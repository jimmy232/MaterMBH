[
    {
        "id": "3041242d.d65d6c",
        "type": "tab",
        "label": "Digitals",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6a9e2b4f.389254",
        "type": "tab",
        "label": "Analog Alarms",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b0f275d4.a9bd08",
        "type": "tab",
        "label": "Analog Scale",
        "disabled": false,
        "info": ""
    },
    {
        "id": "9f7a128a.8cc8",
        "type": "tab",
        "label": "Control Panel",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8ff8eb41.513f08",
        "type": "tab",
        "label": "DB Connections",
        "disabled": false,
        "info": ""
    },
    {
        "id": "21abc26.2e8053e",
        "type": "tab",
        "label": "OS",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3662f577.cb66ca",
        "type": "tab",
        "label": "System",
        "disabled": false,
        "info": ""
    },
    {
        "id": "15d13c44.3d0d04",
        "type": "tab",
        "label": "Firmware",
        "disabled": false,
        "info": ""
    },
    {
        "id": "12b0b98a.2c8cc6",
        "type": "tab",
        "label": "Remote",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d8a17f8e.66ae9",
        "type": "tab",
        "label": "Accumulators",
        "disabled": false,
        "info": ""
    },
    {
        "id": "f6c2b479.af6bc8",
        "type": "tab",
        "label": "IO Control",
        "disabled": false,
        "info": ""
    },
    {
        "id": "c9ba8bcf.e8f3d8",
        "type": "tab",
        "label": "Timers",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a8e4bf2f.90596",
        "type": "tab",
        "label": "Modbus",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a27eb0d8.3c2fa",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8886",
        "protocol": "http",
        "database": "monicon_sess",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "cb1b82bc.a26ae",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "",
        "host": "us-central1-1.gcp.cloud2.influxdata.com",
        "port": "443",
        "tls": true
    },
    {
        "id": "4da4ea34.630684",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8086",
        "protocol": "http",
        "database": "monicon_sess",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "da535876.280af8",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "",
        "host": "us-central1-1.gcp.cloud2.influxdata.com",
        "port": "443",
        "tls": true
    },
    {
        "id": "4d64fa3d.ad0334",
        "type": "mqtt-broker",
        "name": "",
        "broker": "tailor.cloudmqtt.com",
        "port": "10287",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "7e73cdd4.e0b814",
        "type": "tls-config",
        "name": "local-tls",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "https://us-central1-1.gcp.cloud2.influxdata.com",
        "verifyservercert": true
    },
    {
        "id": "5fca9504.17508c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": ""
    },
    {
        "id": "1e88062a.770d7a",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "45a7d85a.401588",
        "type": "ui_tab",
        "name": "Control Panel",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "da91f024.78ee3",
        "type": "ui_tab",
        "name": "IO Measurements",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d8647c59.12493",
        "type": "ui_tab",
        "name": "Alarms",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1c5e7bce.dafe64",
        "type": "ui_tab",
        "name": "Parameters",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1140bc77.403c34",
        "type": "ui_tab",
        "name": "Alarm Config",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "87e78a20.98ffc8",
        "type": "ui_tab",
        "name": "Control Panel",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e30c5524.3b03b8",
        "type": "ui_tab",
        "name": "IO Measurements",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c287c0e5.10e9b",
        "type": "ui_tab",
        "name": "Alarms",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5e5f0080.da32c",
        "type": "ui_tab",
        "name": "Parameters",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2543fd32.5de642",
        "type": "ui_tab",
        "name": "Alarm Config",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f63880d3.c40ef",
        "type": "ui_tab",
        "name": "Config",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "83bb7073.89674",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4fe51183.62334",
        "type": "ui_group",
        "name": "Equipment Identification",
        "tab": "45a7d85a.401588",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5d3de38b.30602c",
        "type": "ui_group",
        "name": "Scale Factor (k)",
        "tab": "45a7d85a.401588",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ea8e7f4c.f8bcc",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "45a7d85a.401588",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "22362b2b.e9a1e4",
        "type": "ui_group",
        "name": "Digital Inputs",
        "tab": "da91f024.78ee3",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "682affd.438e7",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "da91f024.78ee3",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8f5898a7.07fa48",
        "type": "ui_group",
        "name": "4..20mA Signals - 20sec Updates",
        "tab": "da91f024.78ee3",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "bf96246c.d919c8",
        "type": "ui_group",
        "name": "PT100 Signals - 20sec Updates",
        "tab": "da91f024.78ee3",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2753fe30.136152",
        "type": "ui_group",
        "name": "Digital Outputs",
        "tab": "da91f024.78ee3",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d342ae97.3b2ec",
        "type": "ui_group",
        "name": "Thresholds",
        "tab": "45a7d85a.401588",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "18b9ac28.263ce4",
        "type": "ui_group",
        "name": "4n20mA HIGH Alarms",
        "tab": "d8647c59.12493",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "25e1adcb.525a02",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "d8647c59.12493",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "bbe1e6e.c044218",
        "type": "ui_group",
        "name": "4n20mA LOW Alarms",
        "tab": "d8647c59.12493",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a0ab591e.494fc8",
        "type": "ui_group",
        "name": "PT100 LOW Alarms",
        "tab": "d8647c59.12493",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5a0ef1e2.ddb77",
        "type": "ui_group",
        "name": "PT100 HIGH Alarms",
        "tab": "d8647c59.12493",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c9c66b1f.63bdc8",
        "type": "ui_group",
        "name": "4n20mA - LOW Parameter",
        "tab": "1c5e7bce.dafe64",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d41c1003.34b84",
        "type": "ui_group",
        "name": "4n20mA - HIGH Parameter",
        "tab": "1c5e7bce.dafe64",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "64e82ef2.ffce3",
        "type": "ui_group",
        "name": "PT100 - LOW Parameter",
        "tab": "1c5e7bce.dafe64",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d6b5f6cc.ac6ab8",
        "type": "ui_group",
        "name": "PT100 - HIGH Parameter",
        "tab": "1c5e7bce.dafe64",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4952bdf6.d526e4",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "1c5e7bce.dafe64",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2e9493b.19b276c",
        "type": "ui_group",
        "name": "Device Info",
        "tab": "45a7d85a.401588",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "e3d48d50.fae3f",
        "type": "ui_group",
        "name": "System Info",
        "tab": "45a7d85a.401588",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1f86c7fe.575f98",
        "type": "ui_group",
        "name": "PT100 - LOW Active Alarm",
        "tab": "1140bc77.403c34",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1053e3d8.f35acc",
        "type": "ui_group",
        "name": "PT100 - HIGH Active Alarm",
        "tab": "1140bc77.403c34",
        "order": 9,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9cc24926.921388",
        "type": "ui_group",
        "name": "4n20 - LOW Active Alarm",
        "tab": "1140bc77.403c34",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1c35732b.c16ddd",
        "type": "ui_group",
        "name": "4n20 - HIGH Active Alarm",
        "tab": "1140bc77.403c34",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "97964936.2f6b58",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "1140bc77.403c34",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5c1e3a03.f96f14",
        "type": "ui_group",
        "name": "Equipment Identification",
        "tab": "87e78a20.98ffc8",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "17102250.63705e",
        "type": "ui_group",
        "name": "Scale Factor (k)",
        "tab": "87e78a20.98ffc8",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6fb0f864.ab50a8",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "87e78a20.98ffc8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1eb39dcf.402d42",
        "type": "ui_group",
        "name": "Digital Inputs",
        "tab": "e30c5524.3b03b8",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3ccf8783.a39388",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "e30c5524.3b03b8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c272663b.a14478",
        "type": "ui_group",
        "name": "4..20mA Signals - 20sec Updates",
        "tab": "e30c5524.3b03b8",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "72834d19.0b2444",
        "type": "ui_group",
        "name": "PT100 Signals - 20sec Updates",
        "tab": "e30c5524.3b03b8",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7c778399.916a2c",
        "type": "ui_group",
        "name": "Digital Outputs",
        "tab": "e30c5524.3b03b8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "cc99a385.0e3b2",
        "type": "ui_group",
        "name": "Thresholds",
        "tab": "87e78a20.98ffc8",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "b237d978.a14268",
        "type": "ui_group",
        "name": "4n20mA HIGH Alarms",
        "tab": "c287c0e5.10e9b",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ddf1255a.a41838",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "c287c0e5.10e9b",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d2b9ab7b.2c0768",
        "type": "ui_group",
        "name": "4n20mA LOW Alarms",
        "tab": "c287c0e5.10e9b",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6d37b4c5.91432c",
        "type": "ui_group",
        "name": "PT100 LOW Alarms",
        "tab": "c287c0e5.10e9b",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7374f39a.81f2fc",
        "type": "ui_group",
        "name": "PT100 HIGH Alarms",
        "tab": "c287c0e5.10e9b",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "100a187b.33f1a8",
        "type": "ui_group",
        "name": "4n20mA - LOW Parameter",
        "tab": "5e5f0080.da32c",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3f923ce4.4e7424",
        "type": "ui_group",
        "name": "4n20mA - HIGH Parameter",
        "tab": "5e5f0080.da32c",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "61e2dc9d.93fca4",
        "type": "ui_group",
        "name": "PT100 - LOW Parameter",
        "tab": "5e5f0080.da32c",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ac436fe4.bafe",
        "type": "ui_group",
        "name": "PT100 - HIGH Parameter",
        "tab": "5e5f0080.da32c",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "21a017d8.e1e498",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "5e5f0080.da32c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "50eaefba.c2b8",
        "type": "ui_group",
        "name": "Device Info",
        "tab": "87e78a20.98ffc8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1865bad3.468e45",
        "type": "ui_group",
        "name": "System Info",
        "tab": "87e78a20.98ffc8",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f3836776.24a948",
        "type": "ui_group",
        "name": "PT100 - LOW Active Alarm",
        "tab": "2543fd32.5de642",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f848f227.646ba",
        "type": "ui_group",
        "name": "PT100 - HIGH Active Alarm",
        "tab": "2543fd32.5de642",
        "order": 9,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3680207b.60e1c",
        "type": "ui_group",
        "name": "4n20 - LOW Active Alarm",
        "tab": "2543fd32.5de642",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8b02168c.0a4558",
        "type": "ui_group",
        "name": "4n20 - HIGH Active Alarm",
        "tab": "2543fd32.5de642",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9e65150.45f55e8",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "2543fd32.5de642",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d3e0d058.2c0df",
        "type": "ui_group",
        "name": "G1",
        "tab": "f63880d3.c40ef",
        "order": 1,
        "disp": true,
        "width": "3",
        "collapse": false
    },
    {
        "id": "4c053cda.6a4c04",
        "type": "ui_group",
        "name": "G1",
        "tab": "83bb7073.89674",
        "order": 1,
        "disp": true,
        "width": "3",
        "collapse": false
    },
    {
        "id": "dba358e0.ff7ca8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "compatmode": true,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": ""
    },
    {
        "id": "1da4179f.06e888",
        "type": "mqtt-broker",
        "name": "Stand-Alone.sys",
        "broker": "tailor.cloudmqtt.com",
        "port": "10287",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "6f742d0.4b960d4",
        "type": "inject",
        "z": "8ff8eb41.513f08",
        "name": "Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "8f4e03a5.b091f"
            ]
        ]
    },
    {
        "id": "285d610d.753a5e",
        "type": "inject",
        "z": "8ff8eb41.513f08",
        "name": "Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 300,
        "wires": [
            [
                "4e706c3f.1882f4"
            ]
        ]
    },
    {
        "id": "4f7d32c4.5e8f7c",
        "type": "comment",
        "z": "8ff8eb41.513f08",
        "name": "RESET DATABASES",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "2b139899.3cde08",
        "type": "comment",
        "z": "8ff8eb41.513f08",
        "name": "CREATES DATABASES",
        "info": "",
        "x": 130,
        "y": 260,
        "wires": []
    },
    {
        "id": "5306cc6f.7da144",
        "type": "comment",
        "z": "8ff8eb41.513f08",
        "name": "PT100 Analog Signals",
        "info": "",
        "x": 120,
        "y": 500,
        "wires": []
    },
    {
        "id": "bcdfa789.d8bf18",
        "type": "function",
        "z": "8ff8eb41.513f08",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n/*\noutput[0] = AI-0 // PT100\noutput[1] = AI-1 // PT100\noutput[2] = AI-2 // PT100\noutput[3] = AI-3 // PT100\noutput[4] = AI-4 // 4..20mA\noutput[5] = AI-5 // 4..20mA\noutput[6] = AI-6 // 4..20mA\noutput[7] = AI-7 // 4..20mA \noutput[8] = Device ID\noutput[9] = Location \n*/\n\n// Lighting\n//if (output.length > 4) {\n//    if (output[3].includes(\"Light\")) {\n//        output[4] = output[4].replace(/\\s+/g, '_')\n//        output[4] = output[4].concat(\".Lt\")\n//\t} else if (output[3].includes(\"Power\")) {\n//\t\toutput[4] = output[4].replace(/\\s+/g, '_')\n//\t\toutput[4] = output[4].concat(\".Pwr\")\n//\t}\n//}\n\n//output[1] = (output[1] / 1000).toFixed(2);\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: output[9]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t_4n20_7: parseFloat(output[0]),\n\t\t\t\t_4n20_6: parseFloat(output[1]),\n\t\t\t\t_4n20_5: parseFloat(output[2]),\n\t\t\t\t_4n20_4: parseFloat(output[3]),\n\t\t\t\t_4n20_3: parseFloat(output[4]),\n\t\t\t\t_4n20_2: parseFloat(output[5]),\n\t\t\t\t_4n20_1: parseFloat(output[6]),\n\t\t\t\t_4n20_0: parseFloat(output[7]),\n\t\t\t\tTRUC_VERSION: \"\\\"\" + output[8] + \"\\\"\",\n\t\t\t\tdatabaseID: \"\\\"\" + output[9] + \"\\\"\"\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 460,
        "wires": [
            [
                "9d44ef97.05ae1"
            ]
        ]
    },
    {
        "id": "ae44fa83.8d8848",
        "type": "function",
        "z": "8ff8eb41.513f08",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t_4n20_7: parseFloat(output[0]),\n\t\t\t_4n20_6: parseFloat(output[1]),\n\t\t\t_4n20_5: parseFloat(output[2]),\n\t\t\t_4n20_4: parseFloat(output[3]),\n\t\t\t_4n20_3: parseFloat(output[4]),\n\t\t\t_4n20_2: parseFloat(output[5]),\n\t\t\t_4n20_1: parseFloat(output[6]),\n\t\t\t_4n20_0: parseFloat(output[7]),\n\t\t\t_ID: output[8],\n\t\t\tdatabaseID: output[9]\n\t\t},\n\t\t\n        tags:{\n            PLC: output[9] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 420,
        "wires": [
            [
                "de0d3ea8.635ea"
            ]
        ]
    },
    {
        "id": "fd0139df.37da28",
        "type": "mqtt in",
        "z": "21abc26.2e8053e",
        "name": "",
        "topic": "MONICON/CMD/OS/",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 140,
        "y": 160,
        "wires": [
            [
                "28772e9.9ffddd2",
                "7f377aa1.27ea64",
                "c0c87fb2.74543",
                "9f697c10.68489",
                "9e1718e.adf96e8",
                "b00d81df.a94d9"
            ]
        ]
    },
    {
        "id": "131ff681.a11889",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "IP Addr",
        "func": "var data = msg.payload.networkInterfaces.wlan0[0].address\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/IP\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 320,
        "wires": [
            [
                "3ec503f8.a8a64c",
                "61caa4fe.e9c19c"
            ]
        ]
    },
    {
        "id": "d6292270.990b2",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Uptime",
        "func": "var data = msg.payload.uptime\n\nlet days = parseInt(data / 86400)\nlet hours = parseInt((data % 86400) / 3600)\nlet minutes = parseInt(((data % 86400) % 3600) / 60)\nlet secs = parseInt(((data % 86400) % 3600) % 60)\n\nlet msg1 = {payload: \"Days[\" + days + \"] Hours[\" + hours + \"] Mins[\" + minutes + \"] Sec[\" + secs + \"]\", topic: \"MONICON/STAT/OS/UPTIME\"}\n\nreturn msg1\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 360,
        "wires": [
            [
                "3ec503f8.a8a64c",
                "7701d862.25cdd8"
            ]
        ]
    },
    {
        "id": "3ec503f8.a8a64c",
        "type": "mqtt out",
        "z": "21abc26.2e8053e",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 870,
        "y": 60,
        "wires": []
    },
    {
        "id": "2c2b658a.62357a",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Model",
        "func": "var data = msg.payload.cpus[0].model\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/MODEL\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 280,
        "wires": [
            [
                "3ec503f8.a8a64c",
                "260538bc.9fb298"
            ]
        ]
    },
    {
        "id": "6eee86f8.92e568",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Disk Size (GB)",
        "func": "var data = msg.payload[0]\n\nvar diskSize = String((data.size / 1000000).toFixed(2)) + \",\" + String((data.used / 1000000).toFixed(2)) + \",\" + String((data.available / 1000000).toFixed(2)) + \",\" + String((data.capacity * 100).toFixed(0))\n\nvar msg1 = { payload: diskSize, topic: \"MONICON/STAT/OS/DISK\" }\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 200,
        "wires": [
            [
                "3ec503f8.a8a64c",
                "430d8bb1.d28624"
            ]
        ]
    },
    {
        "id": "f569896f.632d38",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "RAM (MB)",
        "func": "var data = msg.payload\n\nvar ramSize = String((data.totalmem / 1000000).toFixed(2)) + \",\" + String((data.freemem / 1000000).toFixed(2)) + \",\" + String(parseFloat(data.memusage).toFixed(0))\n\nvar msg1 = { payload: ramSize, topic: \"MONICON/STAT/OS/RAM\" }\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 120,
        "wires": [
            [
                "3ec503f8.a8a64c",
                "429a1ebb.cfa14"
            ]
        ]
    },
    {
        "id": "430d8bb1.d28624",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar output = msg.payload.split(\",\");\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\n        \n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            TotalMem: parseFloat(output[0]),\n            UsedMem: parseFloat(output[1]),\n            FreeMem: parseFloat(output[2]),\n            PercentMem: parseFloat(output[3])\n        },\n        tags:{\n            System: \"HDD\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"HDD\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTotalMem: parseFloat(output[0]),\n                UsedMem: parseFloat(output[1]),\n                FreeMem: parseFloat(output[2]),\n                PercentMem: parseFloat(output[3])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 200,
        "wires": [
            [
                "aa928845.be4b08"
            ],
            [
                "1b643d70.31a183"
            ]
        ]
    },
    {
        "id": "38ea551d.e32f6a",
        "type": "inject",
        "z": "21abc26.2e8053e",
        "name": "30sec Cycle",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "50b8b1eb.857b8"
            ]
        ]
    },
    {
        "id": "260538bc.9fb298",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    //msg.payload = msg.payload.replace(/\\s+/g, '_')\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Model: msg.payload\n        },\n        tags:{\n            System: \"Model\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Model\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tModel: \"\\\"\" + msg.payload[0].fields.Model + \"\\\"\"\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 280,
        "wires": [
            [
                "32f443b.2a004bc"
            ],
            [
                "c379cf5.9ab6d3"
            ]
        ]
    },
    {
        "id": "61caa4fe.e9c19c",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            IPAddr: msg.payload\n        },\n        tags:{\n            System: \"IP\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"IP\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tIPAddr: \"\\\"\" + msg.payload[0].fields.IPAddr + \"\\\"\"\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 320,
        "wires": [
            [
                "32f443b.2a004bc"
            ],
            [
                "c379cf5.9ab6d3"
            ]
        ]
    },
    {
        "id": "7701d862.25cdd8",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet deploys = global.get(\"deploys\") || 0;\n\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Uptime: msg.payload,\n            Deploys: parseFloat(deploys)\n        },\n        tags:{\n            System: \"UPTIME\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n    let uptime = String(msg.payload[0].fields.Uptime);\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"UPTIME\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tUptime: uptime,\n\t\t\t\tDeploys: parseFloat(deploys)\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 360,
        "wires": [
            [
                "32f443b.2a004bc"
            ],
            [
                "c379cf5.9ab6d3"
            ]
        ]
    },
    {
        "id": "6812d4fe.4b335c",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Hostname: msg.payload,\n        },\n        tags:{\n            System: \"Hostname\",\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Hostname\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tHostname: \"\\\"\" + String(msg.payload[0].fields.Hostname) + \"\\\"\",\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 240,
        "wires": [
            [
                "32f443b.2a004bc"
            ],
            [
                "c379cf5.9ab6d3"
            ]
        ]
    },
    {
        "id": "429a1ebb.cfa14",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar output = msg.payload.split(\",\");\n\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            TotalRam: parseFloat(output[0]),\n            FreeRam: parseFloat(output[1]),\n            PercentRam: parseFloat(output[2])\n        },\n        tags:{\n            System: \"RAM\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"RAM\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTotalRam: parseFloat(output[0]),\n                FreeRam: parseFloat(output[1]),\n                PercentRam: parseFloat(output[2])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 120,
        "wires": [
            [
                "aa928845.be4b08"
            ],
            [
                "1b643d70.31a183"
            ]
        ]
    },
    {
        "id": "525026f2.5fa398",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Hostname",
        "func": "var data = msg.payload.hostname\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/Hostname\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 240,
        "wires": [
            [
                "6812d4fe.4b335c"
            ]
        ]
    },
    {
        "id": "2c0dde7a.63cea2",
        "type": "exec",
        "z": "3662f577.cb66ca",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 810,
        "y": 300,
        "wires": [
            [],
            [
                "ae0ea279.3bb3f"
            ],
            []
        ]
    },
    {
        "id": "244740b5.10c6f",
        "type": "inject",
        "z": "3662f577.cb66ca",
        "name": "48hr Interval",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "172800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "2c0dde7a.63cea2"
            ]
        ]
    },
    {
        "id": "e29163d5.d561",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Temperature",
        "func": "var data = msg.payload\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/Temperature\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 400,
        "wires": [
            [
                "b484dee4.f0b8c",
                "3ec503f8.a8a64c",
                "b3f69175.10c27"
            ]
        ]
    },
    {
        "id": "b484dee4.f0b8c",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"  \n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Temperature: msg.payload,\n        },\n        tags:{\n            System: \"Temperature\",\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Temperature\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTemperature: parseFloat(msg.payload[0].fields.Temperature),\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 400,
        "wires": [
            [
                "754b94da.8c77bc"
            ],
            [
                "c120b570.f7e308"
            ]
        ]
    },
    {
        "id": "9d44ef97.05ae1",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "8ff8eb41.513f08",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "9f13241.583ead8",
        "type": "influxdb out",
        "z": "8ff8eb41.513f08",
        "influxdb": "4da4ea34.630684",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 1010,
        "y": 80,
        "wires": []
    },
    {
        "id": "83dcfc2f.4efa4",
        "type": "influxdb out",
        "z": "8ff8eb41.513f08",
        "influxdb": "4da4ea34.630684",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 990,
        "y": 300,
        "wires": []
    },
    {
        "id": "de0d3ea8.635ea",
        "type": "influxdb batch",
        "z": "8ff8eb41.513f08",
        "influxdb": "4da4ea34.630684",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 420,
        "wires": []
    },
    {
        "id": "8f4e03a5.b091f",
        "type": "influxdb in",
        "z": "8ff8eb41.513f08",
        "influxdb": "4da4ea34.630684",
        "name": "monicon.sess",
        "query": "DROP DATABASE monicon_sess",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 760,
        "y": 80,
        "wires": [
            [
                "9f13241.583ead8"
            ]
        ]
    },
    {
        "id": "4e706c3f.1882f4",
        "type": "influxdb in",
        "z": "8ff8eb41.513f08",
        "influxdb": "4da4ea34.630684",
        "name": "monicon.sess",
        "query": "CREATE DATABASE monicon_sess",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "",
        "x": 740,
        "y": 300,
        "wires": [
            [
                "83dcfc2f.4efa4"
            ]
        ]
    },
    {
        "id": "57a2912d.e199e",
        "type": "string",
        "z": "8ff8eb41.513f08",
        "name": "Sectionaliser ",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "ProPower-ESP/Device/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 290,
        "y": 420,
        "wires": [
            [
                "bcdfa789.d8bf18",
                "ae44fa83.8d8848"
            ]
        ]
    },
    {
        "id": "c0c87fb2.74543",
        "type": "OS",
        "z": "21abc26.2e8053e",
        "name": "",
        "x": 370,
        "y": 240,
        "wires": [
            [
                "525026f2.5fa398"
            ]
        ]
    },
    {
        "id": "9f697c10.68489",
        "type": "Drives",
        "z": "21abc26.2e8053e",
        "name": "",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "6eee86f8.92e568"
            ]
        ]
    },
    {
        "id": "b00d81df.a94d9",
        "type": "Uptime",
        "z": "21abc26.2e8053e",
        "name": "",
        "x": 380,
        "y": 360,
        "wires": [
            [
                "d6292270.990b2"
            ]
        ]
    },
    {
        "id": "7f377aa1.27ea64",
        "type": "CPUs",
        "z": "21abc26.2e8053e",
        "name": "",
        "x": 370,
        "y": 280,
        "wires": [
            [
                "2c2b658a.62357a"
            ]
        ]
    },
    {
        "id": "9e1718e.adf96e8",
        "type": "Memory",
        "z": "21abc26.2e8053e",
        "name": "",
        "x": 380,
        "y": 120,
        "wires": [
            [
                "f569896f.632d38"
            ]
        ]
    },
    {
        "id": "28772e9.9ffddd2",
        "type": "NetworkIntf",
        "z": "21abc26.2e8053e",
        "name": "",
        "x": 390,
        "y": 320,
        "wires": [
            [
                "131ff681.a11889"
            ]
        ]
    },
    {
        "id": "7646f2fa.cba15c",
        "type": "cpu",
        "z": "21abc26.2e8053e",
        "name": "",
        "msgCore": false,
        "msgOverall": false,
        "msgArray": false,
        "msgTemp": true,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "e29163d5.d561"
            ]
        ]
    },
    {
        "id": "d95c895b.6109d8",
        "type": "comment",
        "z": "8ff8eb41.513f08",
        "name": "4n20 Analog Signals",
        "info": "",
        "x": 110,
        "y": 380,
        "wires": []
    },
    {
        "id": "fcd13ca7.99503",
        "type": "function",
        "z": "8ff8eb41.513f08",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\n/*\noutput[0] = AI-0 // PT100\noutput[1] = AI-1 // PT100\noutput[2] = AI-2 // PT100\noutput[3] = AI-3 // PT100\noutput[4] = AI-4 // 4..20mA\noutput[5] = AI-5 // 4..20mA\noutput[6] = AI-6 // 4..20mA\noutput[7] = AI-7 // 4..20mA \noutput[8] = Device ID\noutput[9] = Location \n*/\n\n// Lighting\n//if (output.length > 4) {\n//    if (output[3].includes(\"Light\")) {\n//        output[4] = output[4].replace(/\\s+/g, '_')\n//        output[4] = output[4].concat(\".Lt\")\n//\t} else if (output[3].includes(\"Power\")) {\n//\t\toutput[4] = output[4].replace(/\\s+/g, '_')\n//\t\toutput[4] = output[4].concat(\".Pwr\")\n//\t}\n//}\n\n//output[1] = (output[1] / 1000).toFixed(2);\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: output[9]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t_PT100_7: parseFloat(output[0]),\n\t\t\t\t_PT100_6: parseFloat(output[1]),\n\t\t\t\t_PT100_5: parseFloat(output[2]),\n\t\t\t\t_PT100_4: parseFloat(output[3]),\n\t\t\t\t_PT100_3: parseFloat(output[4]),\n\t\t\t\t_PT100_2: parseFloat(output[5]),\n\t\t\t\t_PT100_1: parseFloat(output[6]),\n\t\t\t\t_PT100_0: parseFloat(output[7]),\n\t\t\t\tTRUC_VERSION: \"\\\"\" + output[8] + \"\\\"\",\n\t\t\t\tdatabaseID: \"\\\"\" + output[9] + \"\\\"\"\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 580,
        "wires": [
            [
                "2d735fa3.108b9"
            ]
        ]
    },
    {
        "id": "bce24b.61cdadb8",
        "type": "function",
        "z": "8ff8eb41.513f08",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t_PT100_7: parseFloat(output[0]),\n\t\t\t_PT100_6: parseFloat(output[1]),\n\t\t\t_PT100_5: parseFloat(output[2]),\n\t\t\t_PT100_4: parseFloat(output[3]),\n\t\t\t_PT100_3: parseFloat(output[4]),\n\t\t\t_PT100_2: parseFloat(output[5]),\n\t\t\t_PT100_1: parseFloat(output[6]),\n\t\t\t_PT100_0: parseFloat(output[7]),\n\t\t\t_ID: output[8],\n\t\t\tdatabaseID: output[9]\n\t\t},\n        tags:{\n            PLC: output[9] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 540,
        "wires": [
            [
                "d44cfbf3.3254e8"
            ]
        ]
    },
    {
        "id": "2d735fa3.108b9",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "8ff8eb41.513f08",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "d44cfbf3.3254e8",
        "type": "influxdb batch",
        "z": "8ff8eb41.513f08",
        "influxdb": "4da4ea34.630684",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 540,
        "wires": []
    },
    {
        "id": "841d56fa.c0fea8",
        "type": "string",
        "z": "8ff8eb41.513f08",
        "name": "Sectionaliser ",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "ProPower-ESP/Device/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 290,
        "y": 540,
        "wires": [
            [
                "fcd13ca7.99503",
                "bce24b.61cdadb8"
            ]
        ]
    },
    {
        "id": "d4533108.3114e",
        "type": "exec",
        "z": "21abc26.2e8053e",
        "command": "iw dev | grep -m1 ssid | awk '{print $2}'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "SSID",
        "x": 370,
        "y": 540,
        "wires": [
            [
                "a9e0bd8f.ae3ff"
            ],
            [],
            []
        ]
    },
    {
        "id": "ba1fabd4.e9a8b8",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar msg1 = {};\n\n    msg1.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            SSID: msg.payload,\n            SiteID: siteID\n        },\n        tags:{\n            System: \"SSID\",\n        }\n    }];\n    \nvar msg2 = {};\n\nstructureObject();\n\nreturn [[msg1], [msg2]];\n        \nfunction structureObject() {\n\tmsg2.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"SSID\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tSSID: \"\\\"\" + msg.payload + \"\\\"\",\n\t\t\t\tSiteID: \"\\\"\" + siteID + \"\\\"\",\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 520,
        "wires": [
            [
                "754b94da.8c77bc"
            ],
            [
                "c120b570.f7e308"
            ]
        ]
    },
    {
        "id": "a9e0bd8f.ae3ff",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "SSID",
        "func": "var data = String(msg.payload.replace(/[\\n\\r]+/g, ' ').replace(/\\s{2,}/g,' ').replace(/^\\s+|\\s+$/,'') )\nmsg.payload = data\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 520,
        "wires": [
            [
                "ba1fabd4.e9a8b8"
            ]
        ]
    },
    {
        "id": "fa731fd3.1d8d9",
        "type": "mqtt in",
        "z": "b0f275d4.a9bd08",
        "name": "",
        "topic": "MONICON-PLC/Device/AI_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "7dd07b39.ee3d14",
                "60b06df2.70ddb4"
            ]
        ]
    },
    {
        "id": "1b151291.f21d5d",
        "type": "mqtt in",
        "z": "b0f275d4.a9bd08",
        "name": "",
        "topic": "MONICON-PLC/Device/AI_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "f2cdbf28.1efe3",
                "60b06df2.70ddb4"
            ]
        ]
    },
    {
        "id": "7dd07b39.ee3d14",
        "type": "link out",
        "z": "b0f275d4.a9bd08",
        "name": "L-OUT-AI_4n20",
        "links": [
            "311cc9da.295866",
            "3e649a44.6ae766",
            "5461bfb7.a4166",
            "fb825d88.14935",
            "e4b05cb6.755b4",
            "61980d7c.a4f6f4",
            "88c2d23c.6ec84"
        ],
        "x": 655,
        "y": 80,
        "wires": []
    },
    {
        "id": "f2cdbf28.1efe3",
        "type": "link out",
        "z": "b0f275d4.a9bd08",
        "name": "L-OUT-AI_PT100",
        "links": [
            "d40653c7.effc4",
            "fc06cab5.592c08",
            "86a52f8.d751fd",
            "809e3c8c.14b8c",
            "88c2d23c.6ec84"
        ],
        "x": 655,
        "y": 160,
        "wires": []
    },
    {
        "id": "5461bfb7.a4166",
        "type": "link in",
        "z": "8ff8eb41.513f08",
        "name": "",
        "links": [
            "7dd07b39.ee3d14"
        ],
        "x": 35,
        "y": 420,
        "wires": [
            [
                "57a2912d.e199e"
            ]
        ]
    },
    {
        "id": "fc06cab5.592c08",
        "type": "link in",
        "z": "8ff8eb41.513f08",
        "name": "",
        "links": [
            "f2cdbf28.1efe3"
        ],
        "x": 35,
        "y": 540,
        "wires": [
            [
                "841d56fa.c0fea8"
            ]
        ]
    },
    {
        "id": "dd9e9eec.15e12",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_00/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 80,
        "wires": [
            [
                "57bdfc85.b5f384",
                "80fe5848.c60c48",
                "d7087b74.d87d48"
            ]
        ]
    },
    {
        "id": "6780988c.ca37b8",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_01/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "57bdfc85.b5f384",
                "80fe5848.c60c48",
                "d7087b74.d87d48"
            ]
        ]
    },
    {
        "id": "4d3f77ee.f519b8",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_02/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "57bdfc85.b5f384",
                "80fe5848.c60c48",
                "d7087b74.d87d48"
            ]
        ]
    },
    {
        "id": "c051afd6.1c5a4",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_03/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "57bdfc85.b5f384",
                "80fe5848.c60c48",
                "d7087b74.d87d48"
            ]
        ]
    },
    {
        "id": "2c89eeee.9dabf2",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_04/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 320,
        "wires": [
            [
                "57bdfc85.b5f384",
                "80fe5848.c60c48",
                "d7087b74.d87d48"
            ]
        ]
    },
    {
        "id": "c1d4ac3b.8526b",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_05/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 380,
        "wires": [
            [
                "57bdfc85.b5f384",
                "80fe5848.c60c48",
                "d7087b74.d87d48"
            ]
        ]
    },
    {
        "id": "a4f01493.b55198",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_06/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 440,
        "wires": [
            [
                "57bdfc85.b5f384",
                "80fe5848.c60c48",
                "d7087b74.d87d48"
            ]
        ]
    },
    {
        "id": "fc491132.deed3",
        "type": "comment",
        "z": "3041242d.d65d6c",
        "name": "Digital Input - Request",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "172e80a0.18242f",
        "type": "comment",
        "z": "9f7a128a.8cc8",
        "name": "Send Email Notification",
        "info": "",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "a881c088.23c77",
        "type": "mqtt in",
        "z": "6a9e2b4f.389254",
        "name": "",
        "topic": "MONICON-PLC/Device/4n20_Flags/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "19560398.7610bc",
                "4442df38.11e1d"
            ]
        ]
    },
    {
        "id": "c721368.ada6ec8",
        "type": "mqtt in",
        "z": "6a9e2b4f.389254",
        "name": "",
        "topic": "MONICON-PLC/Device/PT100_Flags/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "9cb765aa.76a7a8",
                "4442df38.11e1d"
            ]
        ]
    },
    {
        "id": "5e58d43.263422c",
        "type": "comment",
        "z": "6a9e2b4f.389254",
        "name": "Analog Alarms 1st <8x PT100 LOW Alarms> | 2nd <8x PT100 HIGH Alarms>",
        "info": "",
        "x": 290,
        "y": 40,
        "wires": []
    },
    {
        "id": "635e90d6.2eb5e",
        "type": "mqtt in",
        "z": "6a9e2b4f.389254",
        "name": "",
        "topic": "MONICON-PLC/Device/Alarm_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "d8a9b33e.b71b9"
            ]
        ]
    },
    {
        "id": "2c5e4e96.9e6232",
        "type": "mqtt in",
        "z": "6a9e2b4f.389254",
        "name": "",
        "topic": "MONICON-PLC/Device/Alarm_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "5c9d9ad8.03b154"
            ]
        ]
    },
    {
        "id": "1b73e8a9.caaed7",
        "type": "comment",
        "z": "6a9e2b4f.389254",
        "name": "4n20mA Low Alarm - Rising Edge Trigger | <AI-ID> | <Limit-Type> | <Equip-Name>",
        "info": "",
        "x": 310,
        "y": 300,
        "wires": []
    },
    {
        "id": "5c9d9ad8.03b154",
        "type": "link out",
        "z": "6a9e2b4f.389254",
        "name": "L-ALM-PT100",
        "links": [
            "6806906.618517"
        ],
        "x": 475,
        "y": 340,
        "wires": []
    },
    {
        "id": "d8a9b33e.b71b9",
        "type": "link out",
        "z": "6a9e2b4f.389254",
        "name": "L-ALM-4n20",
        "links": [
            "79852da.cbe06d4"
        ],
        "x": 475,
        "y": 420,
        "wires": []
    },
    {
        "id": "6806906.618517",
        "type": "link in",
        "z": "9f7a128a.8cc8",
        "name": "",
        "links": [
            "5c9d9ad8.03b154"
        ],
        "x": 75,
        "y": 120,
        "wires": [
            [
                "4e26bc31.e1f414"
            ]
        ]
    },
    {
        "id": "3a5713c9.c2f6ac",
        "type": "comment",
        "z": "9f7a128a.8cc8",
        "name": "Alarm PT100",
        "info": "",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "5126c8dc.923218",
        "type": "comment",
        "z": "9f7a128a.8cc8",
        "name": "Alarm 4n20",
        "info": "",
        "x": 110,
        "y": 180,
        "wires": []
    },
    {
        "id": "79852da.cbe06d4",
        "type": "link in",
        "z": "9f7a128a.8cc8",
        "name": "",
        "links": [
            "d8a9b33e.b71b9"
        ],
        "x": 75,
        "y": 240,
        "wires": [
            [
                "7adde210.b1f8dc"
            ]
        ]
    },
    {
        "id": "4e26bc31.e1f414",
        "type": "function",
        "z": "9f7a128a.8cc8",
        "name": "Email Setup - PT100 Alarms",
        "func": "/*\ndata[0] = PIN_ID\ndata[1] = Alarm Status\ndata[2] = PV\ndata[3] = Threshold Parameter\ndata[4] = Equipment ID\ndata[5] = Software Version\n\ntopic[0] = PLC_ID\ntopic[1] = CMD\ntopic[2] = Subject\ntopic[3] = Serial_ID\n*/\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nlet subjectMSg_PT100 = global.get(\"subjectMSg_PT100\") || \"null\";                    //String\nlet bodyMSg_PT100 = global.get(\"bodyMSg_PT100\") || \"null\";                          //String\nlet addrTo_PT100 = global.get(\"addrTo_PT100\") || \"monicon.sess@gmail.com\";                            //String\nlet addrCc_PT100 = global.get(\"addrCc_PT100\") || \"\";                            //Strng\nlet addrBcc_PT100 = global.get(\"addrBcc_PT100\") || \"\";                          //String\nlet subjectParameters_PT100 = global.get(\"subjectParameters_PT100\") || \"null\";      //String of bools\nlet bodyParameters_PT100 = global.get(\"bodyParameters_PT100\") || \"null\";            //String of bools\n\n// Data splitting\nvar data = msg.payload.split(',')\nvar topic = msg.topic.split('/')\nlet subPara = subjectParameters_PT100.split('=');\nlet bodyPara = bodyParameters_PT100.split('=');\n\n// Subject Concatenation\nvar subject = subjectMSg_PT100;\nsubject += subPara[5] == \"1\" ? \" | Sensor Type - PT100 Alm\" : \"\";\nsubject += subPara[4] == \"1\" ? \" | Alarm Status - \" + data[1] : \"\";\nsubject += subPara[1] == \"1\" ? \" | Analog No. - \" + data[0] : \"\";\nsubject += subPara[2] == \"1\" ? \" | Site ID - \" + siteID : \"\";\nsubject += subPara[3] == \"1\" ? \" | Equipment ID - \" + data[4] : \"\";\nsubject += subPara[0] == \"1\" ? \" | Date & Time - \" + Date().toString() : \"\";\n\n// Subject Concatenation\nvar body = bodyMSg_PT100 + \"\\n\";\nbody += bodyPara[0] == \"1\" ? \"\\nDate & Time -\\t \" + Date().toString() : \"\";\nbody += bodyPara[5] == \"1\" ? \"\\nSensor Type -\\t PT100 Alm\" : \"\";\nbody += bodyPara[4] == \"1\" ? \"\\nAlarm Status -\\t \" + data[1] : \"\";\nbody += bodyPara[1] == \"1\" ? \"\\nAnalog No. -\\t \" + data[0] : \"\";\nbody += bodyPara[2] == \"1\" ? \"\\nSite ID -\\t \" + siteID : \"\";\nbody += bodyPara[3] == \"1\" ? \"\\nEquipment ID -\\t \" + data[4] : \"\";\nbody += bodyPara[9] == \"1\" ? \"\\nProcess Value -\\t \" + data[2] : \"\";\nbody += bodyPara[6] == \"1\" ? \"\\nThreshold Parameter -\\t \" + data[3] : \"\";\nbody += bodyPara[7] == \"1\" ? \"\\nSerial No. -\\t \" + topic[3] : \"\";\nbody += bodyPara[8] == \"1\" ? \"\\nSoftware Version -\\t \" + data[5] : \"\";\n\n// New Email Message\nmsg = {\n    payload: body,\n    topic: subject,\n    to: addrTo_PT100,\n    cc: addrCc_PT100,\n    bcc: addrBcc_PT100\n}\n\n// Old Email Message\n// msg = {\n//     payload : \"PT100 Alarm has been triggered.\\n\" +\n//     \"Equipment ID[\" + data[4] + \"]\\n\" + \n//     \"PT100 Sensor - AI[\" + data[0] + \"]\\n\" +\n//     \"Alarm Status[\" + data[1] +\"]\\n\" +\n//     \"Timestamp[\" + Date().toString() + \"]\" + \n//     \"Site_BS001\\n\" +\n//     \"AI Process Value[\" + data[2] + \"]\\n\" +\n//     \"Threshold Parameter[\" + data[3] + \"]\\n\" + \n//     \"Equipment ID[\" + data[4] + \"]\\n\\n\" +\n//     \"PLC_Model[\" + topic[0] + \"]\\n\" + \n//     \"Command Header[\" + topic[1] + \"]\\n\" +\n//     \"Command Subject[\" + topic[2] + \"]\\n\" +\n//     \"Device Serial No.[\" + topic[3] + \"]\\n\\n\" , // Body\n//     topic : \"Alarm Notification | PT100 Sensor - AI[\" + data[0] + \"] | Status[\" + data[1] +\"] | \" + \"Timestamp[\" + Date().toString() + \"]\", //Subject\n//     to : \"monicon.sess@gmail.com\",\n//     bcc : \"monicon.sys@gmail.com\"\n// };\n\nreturn msg;\n\n// let parameters = msg.payload.split('+');\n\n// if (parameters[5] == \"1\") // PT100 Configuration Parameters\n// {\n//     global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n//     global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n//     global.set(\"addrTo_PT100\", parameters[2]);                //String\n//     global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_PT100\", parameters[4]);               //String\n//     global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n// } else {\n//     global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n//     global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n//     global.set(\"addrTo_4n20\", parameters[2]);                //String\n//     global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_4n20\", parameters[4]);               //String\n//     global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 120,
        "wires": [
            [
                "14ff54f0.32d69b"
            ]
        ]
    },
    {
        "id": "9cb765aa.76a7a8",
        "type": "link out",
        "z": "6a9e2b4f.389254",
        "name": "L-PT100-ALM_FLAGS",
        "links": [
            "3184a127.75ebfe",
            "a10bac4a.3ef4b",
            "b4007e9b.4946c"
        ],
        "x": 475,
        "y": 80,
        "wires": []
    },
    {
        "id": "19560398.7610bc",
        "type": "link out",
        "z": "6a9e2b4f.389254",
        "name": "L-4n20-ALM_FLAGS",
        "links": [
            "35875a5a.263686"
        ],
        "x": 475,
        "y": 200,
        "wires": []
    },
    {
        "id": "c4ed0a82.536f88",
        "type": "function",
        "z": "3662f577.cb66ca",
        "name": "reboot Counter",
        "func": "var deploys = global.get(\"deploys\") || 0;\ndeploys = deploys + 1;\nglobal.set(\"deploys\", deploys);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "3fe8a5c5.679bca",
        "type": "inject",
        "z": "3662f577.cb66ca",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "c4ed0a82.536f88"
            ]
        ]
    },
    {
        "id": "8d7698ed.591da8",
        "type": "function",
        "z": "8ff8eb41.513f08",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet depolys = global.get(\"depolys\") || 0\n\n// var msg1 = { payload : data[0] };   // RSSI\n// var msg2 = { payload : data[1] };   // WiFi Diconnection Counter\n// var msg3 = { payload : data[2] };   // MQTT Diconnection Counter\n// var msg4 = { payload : data[3] };   // Device IP\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[7]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tRSSI: parseFloat(output[0]),\n\t\t\t\tWIFI_DC: parseFloat(output[1]),\n    \t\t\tMQTT_DC: parseFloat(output[2]),\n    \t\t\tDEVICE_IP: \"\\\"\" + output[3] + \"\\\"\",\n    \t\t\tserialNo: parseFloat(topic[3]),\n    \t\t\tESP_Temp: parseFloat(output[4]),\n    \t\t\ttwentySecLoop: parseFloat(output[5]),\n    \t\t\tTRUC_VERSION: \"\\\"\" + output[6] + \"\\\"\",\n    \t\t\tdatabaseID: \"\\\"\" + output[7] + \"\\\"\",\n    \t\t\tEquipmentID: \"\\\"\" + output[8] + \"\\\"\"\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 700,
        "wires": [
            [
                "dc35f58f.82e788"
            ]
        ]
    },
    {
        "id": "96ecee49.4e272",
        "type": "function",
        "z": "8ff8eb41.513f08",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet depolys = global.get(\"depolys\") || 0\n// Display data\n// var data = msg.payload.split(',')\n// var msg1 = { payload : data[0] };   // RSSI\n// var msg2 = { payload : data[1] };   // WiFi Diconnection Counter\n// var msg3 = { payload : data[2] };   // MQTT Diconnection Counter\n// var msg4 = { payload : data[3] };   // Device IP\n\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\tRSSI: parseFloat(output[0]),\n\t\t\tWIFI_DC: parseFloat(output[1]),\n\t\t\tMQTT_DC: parseFloat(output[2]),\n\t\t\tDEVICE_IP: String(output[3]),\n\t\t\tSerialNo: String(topic[3]),\n\t\t\tESP_Temp: parseFloat(output[4]),\n\t\t\ttwentySecLoop: parseFloat(output[5]),\n\t\t\tTRUC_VERSION: output[6],\n\t\t\tdatabaseID: output[7],\n\t\t\tEquipmentID: output[8]\n\n\t\t},\n        tags:{\n            PLC: output[7] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 660,
        "wires": [
            [
                "beb763e9.1e038"
            ]
        ]
    },
    {
        "id": "dc35f58f.82e788",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "8ff8eb41.513f08",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "beb763e9.1e038",
        "type": "influxdb batch",
        "z": "8ff8eb41.513f08",
        "influxdb": "4da4ea34.630684",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 660,
        "wires": []
    },
    {
        "id": "2c999a9d.09e186",
        "type": "mqtt in",
        "z": "8ff8eb41.513f08",
        "name": "",
        "topic": "MONICON-PLC/Device/Status/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "96ecee49.4e272",
                "8d7698ed.591da8"
            ]
        ]
    },
    {
        "id": "6dea7a00.1ba8a8",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Used mem(SSD)",
        "func": "let msg1 = {payload : \"df -h | grep -i sda1 | awk '{print $3\\\"/\\\"}';df -h | grep -i sda1 | awk '{print $2}'\", topic :\"Used mem(SSD)\"}\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 600,
        "wires": [
            [
                "1ba088b6.8af657"
            ]
        ]
    },
    {
        "id": "1ba088b6.8af657",
        "type": "exec",
        "z": "21abc26.2e8053e",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 590,
        "y": 600,
        "wires": [
            [
                "8c4c43f4.80c6f"
            ],
            [],
            []
        ]
    },
    {
        "id": "8c4c43f4.80c6f",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Used mem(SSD)",
        "func": "if(msg.topic != \"Used mem(SSD)\") {\n    return\n}\n\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet data = msg.payload.split('/')\n\n//return msg;\n\nvar msg1 = {};\n\n    msg1.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            SSD_Used: data[0],//.replace(/\\D/g,'')), //removes non numerical characters\n            SSD_Total: data[1],//.replace(/\\D/g,'')), //removes non numerical characters\n        },\n        tags:{\n            System: \"SSD\",\n        }\n    }];\n    \nvar msg2 = {};\n\nstructureObject();\n\nreturn [[msg1], [msg2]];\n        \nfunction structureObject() {\n    let usedMem = String(data[0].replace(/\\s+/g, ' ').trim());\n    let totMem = String(data[1].replace(/\\s+/g, ' ').trim());\n\tmsg2.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"SSD\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tSSD_Used: usedMem,\n\t\t\t\tSSD_Total: totMem,\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 910,
        "y": 600,
        "wires": [
            [
                "754b94da.8c77bc"
            ],
            [
                "c120b570.f7e308"
            ]
        ]
    },
    {
        "id": "95d6f3e.5a81e1",
        "type": "file in",
        "z": "15d13c44.3d0d04",
        "name": "",
        "filename": "",
        "format": "",
        "sendError": true,
        "x": 950,
        "y": 40,
        "wires": [
            [
                "24a6cd87.2cd782",
                "42a2db8f.45b1a4"
            ]
        ]
    },
    {
        "id": "3cccf574.7e696a",
        "type": "switch",
        "z": "15d13c44.3d0d04",
        "name": "Check user agent",
        "property": "req.headers.user-agent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "ESP32-http-Update",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 40,
        "wires": [
            [],
            [
                "4a69ea53.26aa64"
            ]
        ]
    },
    {
        "id": "4f9a88f4.c67668",
        "type": "http in",
        "z": "15d13c44.3d0d04",
        "name": "OTA Request",
        "url": "/firmwareUpdate",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "3cccf574.7e696a"
            ]
        ]
    },
    {
        "id": "a81489b6.dd8688",
        "type": "debug",
        "z": "15d13c44.3d0d04",
        "name": "msg.mostRecentFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "mostRecentFile",
        "x": 1000,
        "y": 260,
        "wires": []
    },
    {
        "id": "24a6cd87.2cd782",
        "type": "http response",
        "z": "15d13c44.3d0d04",
        "name": "OTA Response",
        "statusCode": "",
        "headers": {},
        "x": 1120,
        "y": 40,
        "wires": []
    },
    {
        "id": "2b2cb150.12399e",
        "type": "function",
        "z": "15d13c44.3d0d04",
        "name": "",
        "func": "///// \n\n\n//msg.filename = \"/home/pi/Firmware/PowerProV2.3.2.ino.nodemcu.bin\"\n//return msg\n\n//List of files from RPI Github\nvar firmwares = msg.files;\n//TRUC_VERSION DATA from ESP\nvar version = msg.req.headers;\n//Version Data\nvar currentFile = version[\"x-esp32-version\"];\n//Extract Device Type PowerPro or LightPro\nvar deviceType = currentFile.substring(0,currentFile.indexOf(\"V\")+1)\nmsg.deviceType = deviceType;\n\n//Extracts Github file that matches current ESP version ID\nvar existingFile = firmwares.filter(item=> item.includes(currentFile)).pop();\n//Filters out any incorrect device types ie PowerPro or LightPro\nvar firmwareNames = firmwares.filter(item=> item.includes(msg.deviceType));\n//Sorts out list of files\nvar comparer = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});\nfirmwareNames.sort(comparer.compare)[firmwareNames.length-1];\n\nvar mostRecentFile;\n//Pops off most recent file\nmsg.mostRecentFile = firmwareNames.pop();\nmsg.existingFile = existingFile;\n//Compares ESP version to most recent developed file\n//if((msg.existingFile.localeCompare(msg.mostRecentFile)) < 0)\n//{\n    msg.filename = \"/home/pi/Firmware/\" + msg.mostRecentFile;\n// }\n// else\n// {\n//     msg.filename = undefined;\n//     msg.payload = \"No New File Exists\"\n// }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 710,
        "y": 40,
        "wires": [
            [
                "a81489b6.dd8688",
                "487de090.a6b93",
                "95d6f3e.5a81e1"
            ]
        ]
    },
    {
        "id": "487de090.a6b93",
        "type": "debug",
        "z": "15d13c44.3d0d04",
        "name": "msg.existingFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "existingFile",
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "4a69ea53.26aa64",
        "type": "fs-ops-dir",
        "z": "15d13c44.3d0d04",
        "name": "",
        "path": "/home/pi/Firmware",
        "pathType": "str",
        "filter": ".bin",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 540,
        "y": 40,
        "wires": [
            [
                "2b2cb150.12399e",
                "3ebebf6b.b8d4e"
            ]
        ]
    },
    {
        "id": "3538566f.2382fa",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "MQTTCloud => MONICON.LOCAL",
        "info": "",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "200378bf.85f2c8",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "97cadfc1.50f58"
            ]
        ]
    },
    {
        "id": "57bdfc85.b5f384",
        "type": "function",
        "z": "3041242d.d65d6c",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 80,
        "wires": [
            [
                "c72a25d6.08be68"
            ]
        ]
    },
    {
        "id": "97cadfc1.50f58",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "System & Device Info",
        "func": "let macAddr = global.get(\"macAddr\") || \"NotSet\";\n\nif (macAddr === \"NotSet\") {\n    return [msg, null];\n} else {\n    return [null, msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 260,
        "wires": [
            [
                "a8be73b7.b7d48"
            ],
            [
                "ad663748.f430f8"
            ]
        ]
    },
    {
        "id": "9fa6b6c0.044508",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "MONICON-PLC/STAT/System/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "9cce5884.bfa7e8"
            ]
        ]
    },
    {
        "id": "eca8b5c9.9d0888",
        "type": "string",
        "z": "12b0b98a.2c8cc6",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 420,
        "y": 200,
        "wires": [
            [
                "97cadfc1.50f58"
            ]
        ]
    },
    {
        "id": "a8be73b7.b7d48",
        "type": "exec",
        "z": "12b0b98a.2c8cc6",
        "command": "cat /sys/class/net/wlan0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "4b18ac1e.d177d4"
            ],
            [
                "38e64b06.7fc794"
            ],
            []
        ]
    },
    {
        "id": "4b18ac1e.d177d4",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nlet siteID = global.get(\"siteID\") || \"SiteIDxxx\";\n\nvar data = macAddr + \",\" + siteID + \",\" + msg.payload + \",\";\n\nmsg.payload = data;\nmsg.topic = \"sess/\" + msg.topic;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1250,
        "y": 220,
        "wires": [
            [
                "ad663748.f430f8"
            ]
        ]
    },
    {
        "id": "95f8a0ed.26246",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "Set MacAddress if NOT already Set",
        "info": "",
        "x": 1080,
        "y": 160,
        "wires": []
    },
    {
        "id": "9cce5884.bfa7e8",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "System Data",
        "func": "let siteID = global.get(\"siteID\") || \"SiteIDxxx\";\nlet macAddr = global.get(\"macAddr\") || \"NotSet\";\nlet serverVersion = global.get(\"serverVersion\") || \"MONICON-PLC_ServerV0.0.0\"\n\nvar data = macAddr + \",\" + siteID + \",\" + msg.payload;\n\nmsg.payload = data + \",\" + serverVersion;\nmsg.topic = \"sess/\" + msg.topic;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 80,
        "wires": [
            [
                "711553c6.cc619c"
            ]
        ]
    },
    {
        "id": "ad663748.f430f8",
        "type": "mqtt out",
        "z": "12b0b98a.2c8cc6",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 1430,
        "y": 280,
        "wires": []
    },
    {
        "id": "f0cc8d82.d928d",
        "type": "function",
        "z": "3662f577.cb66ca",
        "name": "Check Server Address",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 420,
        "wires": [
            [
                "2c0dde7a.63cea2",
                "ef27759a.10d968"
            ]
        ]
    },
    {
        "id": "6089bc7a.e5c6f4",
        "type": "influxdb in",
        "z": "12b0b98a.2c8cc6",
        "influxdb": "4da4ea34.630684",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 850,
        "y": 520,
        "wires": [
            [
                "80cc6c21.915f5"
            ]
        ]
    },
    {
        "id": "80cc6c21.915f5",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "\\n\\r Filter",
        "func": "var data = String(msg.payload[0].last);\ndata = data.replace(/[\\n\\r]+/g, '');\nlet macAddr = global.get(\"macAddr\") || \"nSet\";\nmsg.topic = \"sess/MONICON-PLC/STAT/Query/\" + macAddr;\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 520,
        "wires": [
            [
                "f3888f2c.1d276"
            ]
        ]
    },
    {
        "id": "e54c860a.2d0018",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "Add to Query",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\nlet query = msg.payload;\nlet msg1 = {query:  String(query) };\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 520,
        "wires": [
            [
                "128f3c09.83eda4",
                "711b4f66.1197c"
            ]
        ]
    },
    {
        "id": "f3888f2c.1d276",
        "type": "join",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": ",",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "5",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1210,
        "y": 520,
        "wires": [
            [
                "4a0229a1.417de8"
            ]
        ]
    },
    {
        "id": "128f3c09.83eda4",
        "type": "delay",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 610,
        "y": 520,
        "wires": [
            [
                "6089bc7a.e5c6f4"
            ]
        ]
    },
    {
        "id": "4fd9655e.6d748c",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "Remote System Status Query",
        "info": "",
        "x": 140,
        "y": 480,
        "wires": []
    },
    {
        "id": "5aa38b2.f2f4774",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "Set Site ID",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nlet siteID = msg.payload;\nglobal.set(\"siteID\", siteID);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 680,
        "wires": [
            [
                "fbeb6ebb.91f5"
            ]
        ]
    },
    {
        "id": "e8706344.1dc6c",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "Remote Set Site ID",
        "info": "",
        "x": 110,
        "y": 640,
        "wires": []
    },
    {
        "id": "7021fd3c.877e34",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "Remote Set Equipment ID",
        "info": "",
        "x": 130,
        "y": 800,
        "wires": []
    },
    {
        "id": "c8b434a2.031998",
        "type": "string",
        "z": "12b0b98a.2c8cc6",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 700,
        "y": 840,
        "wires": [
            [
                "998ee5a1.afa108",
                "217a9d34.bc9702"
            ]
        ]
    },
    {
        "id": "217a9d34.bc9702",
        "type": "mqtt out",
        "z": "12b0b98a.2c8cc6",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 950,
        "y": 920,
        "wires": []
    },
    {
        "id": "3d363faa.b48f6",
        "type": "string",
        "z": "12b0b98a.2c8cc6",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 700,
        "y": 1000,
        "wires": [
            [
                "217a9d34.bc9702",
                "bfb4ba20.340808"
            ]
        ]
    },
    {
        "id": "db212d8e.ffe14",
        "type": "exec",
        "z": "12b0b98a.2c8cc6",
        "command": "sudo rm /home/pi/Firmware -r",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Delete Firmware Dir",
        "x": 900,
        "y": 1180,
        "wires": [
            [
                "d0e61d7.24f32e",
                "633c820d.c9309c"
            ],
            [
                "10a601c2.937a3e"
            ],
            []
        ]
    },
    {
        "id": "d0e61d7.24f32e",
        "type": "exec",
        "z": "12b0b98a.2c8cc6",
        "command": " sudo git clone https://github.com/jimmy232/Firmware.git",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Download github bin files",
        "x": 1210,
        "y": 1180,
        "wires": [
            [
                "8adc0ba4.c935d8"
            ],
            [
                "aa9c4108.3bc8d"
            ],
            []
        ]
    },
    {
        "id": "c173d09d.f1b7d",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "MONICON-PLC/CMD/DownloadUploadFirmware/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 1180,
        "wires": [
            [
                "a4540029.69584"
            ]
        ]
    },
    {
        "id": "a4540029.69584",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "Alt Topic",
        "func": "var data = msg.topic\ndata = data.replace(\"DownloadUploadFirmware\", \"UploadFirmware\");\nmsg.topic = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 1180,
        "wires": [
            [
                "db212d8e.ffe14",
                "d371be4e.3cde"
            ]
        ]
    },
    {
        "id": "5313a26d.156d1c",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "Download new ESP32 Firmware and Upload to Device on request",
        "info": "",
        "x": 250,
        "y": 1140,
        "wires": []
    },
    {
        "id": "422f876b.8e8da8",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "Download new ESP32 Firmware and Upload to Device on request",
        "info": "",
        "x": 250,
        "y": 960,
        "wires": []
    },
    {
        "id": "da776196.bc20d",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "Set Timer Enable",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AnalogTimer\", \"0\");\n    AnalogTimer = \"0\";\n    msg.payload = \"Analog Timer Inactive\";\n} else {\n    global.set(\"AnalogTimer\", \"1\");\n    AnalogTimer = \"1\";\n    msg.payload = \"Analog Timer Active\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 1380,
        "wires": [
            [
                "383119b5.4eb1e6"
            ]
        ]
    },
    {
        "id": "60b06df2.70ddb4",
        "type": "function",
        "z": "b0f275d4.a9bd08",
        "name": "Check MQTT Timer Enable",
        "func": "var AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(AnalogTimer == \"1\")\n{\nmsg.topic = msg.topic.replace(\"Device\", \"STAT\");\n    msg.topic = \"sess/\" + msg.topic;\n    return msg;\n} else {\n    return;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 120,
        "wires": [
            [
                "8fa74b6c.6588c8"
            ]
        ]
    },
    {
        "id": "f73d909b.fe457",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "Global Overide Timer Off",
        "func": "var AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AnalogTimer\", \"0\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "b89a665e.770728",
        "type": "mqtt in",
        "z": "b0f275d4.a9bd08",
        "name": "",
        "topic": "MONICON-PLC/STAT/Scale_Single_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "562cfac9.6aa284"
            ]
        ]
    },
    {
        "id": "10df02bf.e0c7fd",
        "type": "mqtt in",
        "z": "b0f275d4.a9bd08",
        "name": "",
        "topic": "MONICON-PLC/STAT/Scale_Single_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 380,
        "wires": [
            [
                "562cfac9.6aa284"
            ]
        ]
    },
    {
        "id": "8a5b6244.b249a",
        "type": "comment",
        "z": "b0f275d4.a9bd08",
        "name": "Scale Parameters",
        "info": "",
        "x": 110,
        "y": 260,
        "wires": []
    },
    {
        "id": "b817e645.6f7fc8",
        "type": "comment",
        "z": "b0f275d4.a9bd08",
        "name": "Analog Input Values",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "562cfac9.6aa284",
        "type": "function",
        "z": "b0f275d4.a9bd08",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 340,
        "wires": [
            [
                "8fa74b6c.6588c8"
            ]
        ]
    },
    {
        "id": "341239b5.1e9226",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "Set Timer Enable",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar AlarmTimer = global.get(\"AlarmTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AlarmTimer\", \"0\");\n    AlarmTimer = \"0\";\n    msg.payload = \"Alarm Timer Inactive\";\n} else {\n    global.set(\"AlarmTimer\", \"1\");\n    AlarmTimer = \"1\";\n    msg.payload = \"Alarm Timer Active\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 1520,
        "wires": [
            [
                "1999778b.08aa68"
            ]
        ]
    },
    {
        "id": "ebfb9b13.9ed758",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "Global Overide Timer Off",
        "func": "var AnalogTimer = global.get(\"AlarmTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AlarmTimer\", \"0\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "4442df38.11e1d",
        "type": "function",
        "z": "6a9e2b4f.389254",
        "name": "Check MQTT Timer Enable",
        "func": "var AlarmTimer = global.get(\"AlarmTimer\") || \"0\";\nif(AlarmTimer == \"1\")\n{\nmsg.topic = msg.topic.replace(\"Device\", \"STAT\");\n    msg.topic = \"sess/\" + msg.topic;\n    return msg;\n} else {\n    return;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 140,
        "wires": [
            [
                "a26a8c39.16ca8"
            ]
        ]
    },
    {
        "id": "1121897e.201397",
        "type": "mqtt in",
        "z": "6a9e2b4f.389254",
        "name": "",
        "topic": "MONICON-PLC/STAT/Alarm_En_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 520,
        "wires": [
            [
                "67f236ba.8f3f28"
            ]
        ]
    },
    {
        "id": "2a283aff.6c63c6",
        "type": "mqtt in",
        "z": "6a9e2b4f.389254",
        "name": "",
        "topic": "MONICON-PLC/STAT/Alarm_En_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 600,
        "wires": [
            [
                "67f236ba.8f3f28"
            ]
        ]
    },
    {
        "id": "67f236ba.8f3f28",
        "type": "function",
        "z": "6a9e2b4f.389254",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 560,
        "wires": [
            [
                "a26a8c39.16ca8"
            ]
        ]
    },
    {
        "id": "54095e34.52dfa",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "Define Email Parameters",
        "info": "",
        "x": 130,
        "y": 1620,
        "wires": []
    },
    {
        "id": "26c2ee2b.4c7ba2",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "Email Parameters",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nlet parameters = msg.payload.split('+');\n\nif (parameters[5] == \"1\") // PT100 Configuration Parameters\n{\n    global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n    global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n    global.set(\"addrTo_PT100\", parameters[2]);                //String\n    global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n    global.set(\"addrBcc_PT100\", parameters[4]);               //String\n    global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n    global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n} else {\n    global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n    global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n    global.set(\"addrTo_4n20\", parameters[2]);                //String\n    global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n    global.set(\"addrBcc_4n20\", parameters[4]);               //String\n    global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n    global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 1660,
        "wires": [
            [
                "b6db3837.06a6a8"
            ]
        ]
    },
    {
        "id": "7adde210.b1f8dc",
        "type": "function",
        "z": "9f7a128a.8cc8",
        "name": "Email Setup - 4..20mA Alarms",
        "func": "/*\ndata[0] = PIN_ID\ndata[1] = Alarm Status\ndata[2] = PV\ndata[3] = Threshold Parameter\ndata[4] = Equipment ID\ndata[5] = Software Version\n\ntopic[0] = PLC_ID\ntopic[1] = CMD\ntopic[2] = Subject\ntopic[3] = Serial_ID\n*/\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nlet subjectMSg_4n20 = global.get(\"subjectMSg_4n20\") || \"null\";                    //String\nlet bodyMSg_4n20 = global.get(\"bodyMSg_4n20\") || \"null\";                          //String\nlet addrTo_4n20 = global.get(\"addrTo_4n20\") || \"monicon.sess@gmail.com\";                            //String\nlet addrCc_4n20 = global.get(\"addrCc_4n20\") || \"\";                            //Strng\nlet addrBcc_4n20 = global.get(\"addrBcc_4n20\") || \"\";                          //String\nlet subjectParameters_4n20 = global.get(\"subjectParameters_4n20\") || \"null\";      //String of bools\nlet bodyParameters_4n20 = global.get(\"bodyParameters_4n20\") || \"null\";            //String of bools\n\n// Data splitting\nvar data = msg.payload.split(',')\nvar topic = msg.topic.split('/')\nlet subPara = subjectParameters_4n20.split('=');\nlet bodyPara = bodyParameters_4n20.split('=');\n\n// Subject Concatenation\nvar subject = subjectMSg_4n20;\nsubject += subPara[5] == \"1\" ? \" | Sensor Type - 4n20 Alm\" : \"\";\nsubject += subPara[4] == \"1\" ? \" | Alarm Status - \" + data[1] : \"\";\nsubject += subPara[1] == \"1\" ? \" | Analog No. - \" + data[0] : \"\";\nsubject += subPara[2] == \"1\" ? \" | Site ID - \" + siteID : \"\";\nsubject += subPara[3] == \"1\" ? \" | Equipment ID - \" + data[4] : \"\";\nsubject += subPara[0] == \"1\" ? \" | Date & Time - \" + Date().toString() : \"\";\n\n// Subject Concatenation\nvar body = bodyMSg_4n20 + \"\\n\";\nbody += bodyPara[0] == \"1\" ? \"\\nDate & Time -\\t \" + Date().toString() : \"\";\nbody += bodyPara[5] == \"1\" ? \"\\nSensor Type -\\t 4n20 Alm\" : \"\";\nbody += bodyPara[4] == \"1\" ? \"\\nAlarm Status -\\t \" + data[1] : \"\";\nbody += bodyPara[1] == \"1\" ? \"\\nAnalog No. -\\t \" + data[0] : \"\";\nbody += bodyPara[2] == \"1\" ? \"\\nSite ID -\\t \" + siteID : \"\";\nbody += bodyPara[3] == \"1\" ? \"\\nEquipment ID -\\t \" + data[4] : \"\";\nbody += bodyPara[9] == \"1\" ? \"\\nProcess Value -\\t \" + data[2] : \"\";\nbody += bodyPara[6] == \"1\" ? \"\\nThreshold Parameter -\\t \" + data[3] : \"\";\nbody += bodyPara[7] == \"1\" ? \"\\nSerial No. -\\t \" + topic[3] : \"\";\nbody += bodyPara[8] == \"1\" ? \"\\nSoftware Version -\\t \" + data[5] : \"\";\n\n// New Email Message\nmsg = {\n    payload: body,\n    topic: subject,\n    to: addrTo_4n20,\n    cc: addrCc_4n20,\n    bcc: addrBcc_4n20\n}\n\n// Old Email Message\n// msg = {\n//     payload : \"PT100 Alarm has been triggered.\\n\" +\n//     \"Equipment ID[\" + data[4] + \"]\\n\" + \n//     \"PT100 Sensor - AI[\" + data[0] + \"]\\n\" +\n//     \"Alarm Status[\" + data[1] +\"]\\n\" +\n//     \"Timestamp[\" + Date().toString() + \"]\" + \n//     \"Site_BS001\\n\" +\n//     \"AI Process Value[\" + data[2] + \"]\\n\" +\n//     \"Threshold Parameter[\" + data[3] + \"]\\n\" + \n//     \"Equipment ID[\" + data[4] + \"]\\n\\n\" +\n//     \"PLC_Model[\" + topic[0] + \"]\\n\" + \n//     \"Command Header[\" + topic[1] + \"]\\n\" +\n//     \"Command Subject[\" + topic[2] + \"]\\n\" +\n//     \"Device Serial No.[\" + topic[3] + \"]\\n\\n\" , // Body\n//     topic : \"Alarm Notification | PT100 Sensor - AI[\" + data[0] + \"] | Status[\" + data[1] +\"] | \" + \"Timestamp[\" + Date().toString() + \"]\", //Subject\n//     to : \"monicon.sess@gmail.com\",\n//     bcc : \"monicon.sys@gmail.com\"\n// };\n\nreturn msg;\n\n// let parameters = msg.payload.split('+');\n\n// if (parameters[5] == \"1\") // PT100 Configuration Parameters\n// {\n//     global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n//     global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n//     global.set(\"addrTo_PT100\", parameters[2]);                //String\n//     global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_PT100\", parameters[4]);               //String\n//     global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n// } else {\n//     global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n//     global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n//     global.set(\"addrTo_4n20\", parameters[2]);                //String\n//     global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_4n20\", parameters[4]);               //String\n//     global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 240,
        "wires": [
            [
                "14ff54f0.32d69b"
            ]
        ]
    },
    {
        "id": "111b209a.f6ea3f",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "eca8b5c9.9d0888"
            ]
        ]
    },
    {
        "id": "9da161ed.318ba",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Query/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 520,
        "wires": [
            [
                "e54c860a.2d0018"
            ]
        ]
    },
    {
        "id": "99edfc2b.16084",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/SiteID/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 680,
        "wires": [
            [
                "5aa38b2.f2f4774"
            ]
        ]
    },
    {
        "id": "3cae7c72.8918e4",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpdateEquipID/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 840,
        "wires": [
            [
                "c8b434a2.031998"
            ]
        ]
    },
    {
        "id": "e5583880.527ca8",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UploadFirmware/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "3d363faa.b48f6"
            ]
        ]
    },
    {
        "id": "df2aaa0d.d9d9c8",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "Enable Analog Timer to Stream values to Broker",
        "info": "",
        "x": 200,
        "y": 1340,
        "wires": []
    },
    {
        "id": "1e94924a.ada6fe",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/AnalogTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 1380,
        "wires": [
            [
                "da776196.bc20d",
                "f73d909b.fe457"
            ]
        ]
    },
    {
        "id": "ceb5721e.479f9",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "Enable Alarm Timer to Stream values to Broker",
        "info": "",
        "x": 200,
        "y": 1480,
        "wires": []
    },
    {
        "id": "f9ea8c53.9c1db",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/AlarmTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 1520,
        "wires": [
            [
                "341239b5.1e9226",
                "ebfb9b13.9ed758"
            ]
        ]
    },
    {
        "id": "cf872df1.e2092",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/EmailDefinition/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 1660,
        "wires": [
            [
                "26c2ee2b.4c7ba2"
            ]
        ]
    },
    {
        "id": "5cd57ad6.14ab64",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "Search Email Parameters",
        "info": "",
        "x": 130,
        "y": 1720,
        "wires": []
    },
    {
        "id": "3d1df22.03b190e",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/EmailSearch/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 1760,
        "wires": [
            [
                "aa552dea.f8fa"
            ]
        ]
    },
    {
        "id": "aa552dea.f8fa",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "Email Parameters Template",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nmsg.topic = msg.topic.replace(\"CMD\", \"STAT\");\n\nlet message = \"\";\n\nif (msg.payload == \"PT100SensorType\") // PT100 Configuration Parameters\n{\n    message = global.get(\"subjectMSg_PT100\");            //String\n    message += \",\";\n    message += global.get(\"bodyMSg_PT100\");               //String\n    message += \",\";\n    message += global.get(\"addrTo_PT100\");                //String\n    message += \",\";\n    message += global.get(\"addrCc_PT100\");                //Strng\n    message += \",\";\n    message += global.get(\"addrBcc_PT100\");               //String\n    message += \",\";\n    message += global.get(\"subjectParameters_PT100\");     //String of bools\n    message += \",\";\n    message += global.get(\"bodyParameters_PT100\");        //String of bools\n} else {\n    message = global.get(\"subjectMSg_4n20\");            //String\n    message += \",\";\n    message += global.get(\"bodyMSg_4n20\");               //String\n    message += \",\";\n    message += global.get(\"addrTo_4n20\");                //String\n    message += \",\";\n    message += global.get(\"addrCc_4n20\");                //Strng\n    message += \",\";\n    message += global.get(\"addrBcc_4n20\");               //String\n    message += \",\";\n    message += global.get(\"subjectParameters_4n20\");     //String of bools\n    message += \",\";\n    message += global.get(\"bodyParameters_4n20\");        //String of bools    \n}\nmsg.payload = message;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 1760,
        "wires": [
            [
                "8adc0ba4.c935d8"
            ]
        ]
    },
    {
        "id": "1901ed61.f19493",
        "type": "mqtt in",
        "z": "3662f577.cb66ca",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Reboot/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "f0cc8d82.d928d"
            ]
        ]
    },
    {
        "id": "6d3681bd.56fab",
        "type": "comment",
        "z": "3662f577.cb66ca",
        "name": "System Reboot Counter",
        "info": "",
        "x": 120,
        "y": 140,
        "wires": []
    },
    {
        "id": "48e6a27a.5b029c",
        "type": "comment",
        "z": "3662f577.cb66ca",
        "name": "System Reboot every 48hrs",
        "info": "",
        "x": 140,
        "y": 260,
        "wires": []
    },
    {
        "id": "6ac1c69e.b92d78",
        "type": "comment",
        "z": "3662f577.cb66ca",
        "name": "Remote Reboot",
        "info": "",
        "x": 100,
        "y": 380,
        "wires": []
    },
    {
        "id": "ef27759a.10d968",
        "type": "function",
        "z": "3662f577.cb66ca",
        "name": "Return Message",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Server Reboot was Successful.\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 420,
        "wires": [
            [
                "319102e1.8dfcfe"
            ]
        ]
    },
    {
        "id": "42a2db8f.45b1a4",
        "type": "function",
        "z": "15d13c44.3d0d04",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Uploading Outstation with new File: <\" + msg.filename + \">\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1090,
        "y": 120,
        "wires": [
            [
                "bcccca3.9f02138"
            ]
        ]
    },
    {
        "id": "b6db3837.06a6a8",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Email template loaded successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1660,
        "wires": [
            [
                "8adc0ba4.c935d8"
            ]
        ]
    },
    {
        "id": "d371be4e.3cde",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Clearing Server File Directory...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1320,
        "wires": [
            [
                "8adc0ba4.c935d8"
            ]
        ]
    },
    {
        "id": "633c820d.c9309c",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Downloading new Firmware...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1240,
        "wires": [
            [
                "8adc0ba4.c935d8"
            ]
        ]
    },
    {
        "id": "bfb4ba20.340808",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Uploading new Firmware...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 1000,
        "wires": [
            [
                "109baf2b.1c9331"
            ]
        ]
    },
    {
        "id": "1999778b.08aa68",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\") || \"\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1520,
        "wires": [
            [
                "8adc0ba4.c935d8"
            ]
        ]
    },
    {
        "id": "fbeb6ebb.91f5",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nlet siteID = global.get(\"siteID\", siteID);\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"SiteID updated <\" + siteID + \">\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 680,
        "wires": [
            [
                "4a0229a1.417de8"
            ]
        ]
    },
    {
        "id": "383119b5.4eb1e6",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\") || \"\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1380,
        "wires": [
            [
                "8adc0ba4.c935d8"
            ]
        ]
    },
    {
        "id": "711b4f66.1197c",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Query on Local Database Executed Successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 580,
        "wires": [
            [
                "4a0229a1.417de8"
            ]
        ]
    },
    {
        "id": "998ee5a1.afa108",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"New Equipment ID has been issued to Outstation.\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 840,
        "wires": [
            [
                "109baf2b.1c9331"
            ]
        ]
    },
    {
        "id": "d612e67d.385eb8",
        "type": "mqtt out",
        "z": "12b0b98a.2c8cc6",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 330,
        "y": 2280,
        "wires": []
    },
    {
        "id": "57a75e31.1f4cc",
        "type": "mqtt out",
        "z": "12b0b98a.2c8cc6",
        "name": "MQTT Cloud",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "4d64fa3d.ad0334",
        "x": 330,
        "y": 2340,
        "wires": []
    },
    {
        "id": "f51711e.b9c1bf",
        "type": "link in",
        "z": "12b0b98a.2c8cc6",
        "name": "MQTT Local | Remote",
        "links": [
            "c72a25d6.08be68",
            "d39bdec5.d9461",
            "1e3304a4.a2fbcb",
            "158a4684.6e20f9",
            "bcccca3.9f02138",
            "4a0229a1.417de8",
            "711553c6.cc619c",
            "319102e1.8dfcfe",
            "a26a8c39.16ca8",
            "8ce08b1b.47bf18",
            "9af9b056.11acf",
            "978180c3.30cf8",
            "39da8639.e8c11a",
            "8adc0ba4.c935d8",
            "8fa74b6c.6588c8",
            "109baf2b.1c9331",
            "92e849be.7f1288",
            "e25579c6.4f04d8",
            "5dea77e8.27fdb8",
            "699294a4.9b178c"
        ],
        "x": 195,
        "y": 2300,
        "wires": [
            [
                "57a75e31.1f4cc",
                "d612e67d.385eb8"
            ]
        ]
    },
    {
        "id": "8adc0ba4.c935d8",
        "type": "link out",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 1575,
        "y": 1400,
        "wires": []
    },
    {
        "id": "109baf2b.1c9331",
        "type": "link out",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 1415,
        "y": 920,
        "wires": []
    },
    {
        "id": "4a0229a1.417de8",
        "type": "link out",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 1395,
        "y": 520,
        "wires": []
    },
    {
        "id": "bcccca3.9f02138",
        "type": "link out",
        "z": "15d13c44.3d0d04",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 1175,
        "y": 120,
        "wires": []
    },
    {
        "id": "319102e1.8dfcfe",
        "type": "link out",
        "z": "3662f577.cb66ca",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 1255,
        "y": 420,
        "wires": []
    },
    {
        "id": "8fa74b6c.6588c8",
        "type": "link out",
        "z": "b0f275d4.a9bd08",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 835,
        "y": 240,
        "wires": []
    },
    {
        "id": "a26a8c39.16ca8",
        "type": "link out",
        "z": "6a9e2b4f.389254",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 935,
        "y": 420,
        "wires": []
    },
    {
        "id": "c72a25d6.08be68",
        "type": "link out",
        "z": "3041242d.d65d6c",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 795,
        "y": 80,
        "wires": []
    },
    {
        "id": "79a9ae3a.58c0d",
        "type": "link in",
        "z": "21abc26.2e8053e",
        "name": "",
        "links": [
            "f18f0c9e.28214"
        ],
        "x": 135,
        "y": 360,
        "wires": [
            [
                "9e1718e.adf96e8",
                "9f697c10.68489",
                "c0c87fb2.74543",
                "7f377aa1.27ea64",
                "28772e9.9ffddd2",
                "b00d81df.a94d9",
                "7646f2fa.cba15c",
                "d4533108.3114e",
                "6dea7a00.1ba8a8",
                "97bd60b5.bca1b"
            ]
        ]
    },
    {
        "id": "f18f0c9e.28214",
        "type": "link out",
        "z": "21abc26.2e8053e",
        "name": "30SecCycle",
        "links": [
            "79a9ae3a.58c0d"
        ],
        "x": 615,
        "y": 80,
        "wires": []
    },
    {
        "id": "aa928845.be4b08",
        "type": "link out",
        "z": "21abc26.2e8053e",
        "name": "",
        "links": [
            "f27ed104.66b25"
        ],
        "x": 1115,
        "y": 80,
        "wires": []
    },
    {
        "id": "f0fe5157.d6f2",
        "type": "influxdb batch",
        "z": "8ff8eb41.513f08",
        "influxdb": "4da4ea34.630684",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 960,
        "wires": []
    },
    {
        "id": "f27ed104.66b25",
        "type": "link in",
        "z": "8ff8eb41.513f08",
        "name": "Local InfluxDB",
        "links": [
            "aa928845.be4b08",
            "754b94da.8c77bc",
            "32f443b.2a004bc",
            "c2814c42.a671f",
            "4f41b8d0.830478",
            "679bca4.18eee34",
            "2df71e1.2d013e2",
            "1628eea3.8519d1"
        ],
        "x": 35,
        "y": 960,
        "wires": [
            [
                "f0fe5157.d6f2"
            ]
        ]
    },
    {
        "id": "6f69e4b1.d2523c",
        "type": "comment",
        "z": "8ff8eb41.513f08",
        "name": "Local InfluxDb Link",
        "info": "",
        "x": 150,
        "y": 940,
        "wires": []
    },
    {
        "id": "a99f0869.674788",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "8ff8eb41.513f08",
        "server": "da535876.280af8",
        "name": "SESS",
        "x": 930,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "55de188.517e2e8",
        "type": "link in",
        "z": "8ff8eb41.513f08",
        "name": "Remote FluxDB",
        "links": [
            "2a1775f7.a39dba",
            "c120b570.f7e308",
            "1b643d70.31a183",
            "b5e581f4.de86b",
            "7a9433e8.0387bc",
            "c379cf5.9ab6d3",
            "93581ea.9d7bce"
        ],
        "x": 35,
        "y": 1040,
        "wires": [
            [
                "a99f0869.674788"
            ]
        ]
    },
    {
        "id": "1b643d70.31a183",
        "type": "link out",
        "z": "21abc26.2e8053e",
        "name": "",
        "links": [
            "55de188.517e2e8"
        ],
        "x": 1115,
        "y": 160,
        "wires": []
    },
    {
        "id": "32f443b.2a004bc",
        "type": "link out",
        "z": "21abc26.2e8053e",
        "name": "",
        "links": [
            "f27ed104.66b25"
        ],
        "x": 1115,
        "y": 240,
        "wires": []
    },
    {
        "id": "754b94da.8c77bc",
        "type": "link out",
        "z": "21abc26.2e8053e",
        "name": "",
        "links": [
            "f27ed104.66b25"
        ],
        "x": 1115,
        "y": 400,
        "wires": []
    },
    {
        "id": "c379cf5.9ab6d3",
        "type": "link out",
        "z": "21abc26.2e8053e",
        "name": "",
        "links": [
            "55de188.517e2e8"
        ],
        "x": 1115,
        "y": 360,
        "wires": []
    },
    {
        "id": "c120b570.f7e308",
        "type": "link out",
        "z": "21abc26.2e8053e",
        "name": "",
        "links": [
            "55de188.517e2e8"
        ],
        "x": 1115,
        "y": 600,
        "wires": []
    },
    {
        "id": "97bd60b5.bca1b",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "System & Device Info",
        "func": "let macAddr = global.get(\"macAddr\") || \"NotSet\";\n\nif (macAddr === \"NotSet\") {\n    return [msg, null];\n} else {\n    msg.payload = macAddr;\n    return [null, msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 760,
        "wires": [
            [
                "e1ca976e.cd08e8"
            ],
            [
                "3833a222.1deb0e"
            ]
        ]
    },
    {
        "id": "e1ca976e.cd08e8",
        "type": "exec",
        "z": "21abc26.2e8053e",
        "command": "cat /sys/class/net/eth0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 630,
        "y": 700,
        "wires": [
            [
                "44196e65.992c"
            ],
            [],
            []
        ]
    },
    {
        "id": "44196e65.992c",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nmsg.payload = macAddr;\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 700,
        "wires": [
            [
                "3833a222.1deb0e"
            ]
        ]
    },
    {
        "id": "50b8b1eb.857b8",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Developer macAddr Block",
        "func": "let macAddr = global.get(\"macAddr\") || \"nSet\";\nif(macAddr == \"b827ebf15f4e\" || macAddr == \"b827eba5dff3\") {\n    return\n} \nelse if (macAddr == \"nSet\") {\n    return [[msg], [null]];\n} else {\n    return [[null], [msg]];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 40,
        "wires": [
            [
                "33bbb910.c77a76"
            ],
            [
                "f18f0c9e.28214"
            ]
        ]
    },
    {
        "id": "e4fec9e0.d93988",
        "type": "comment",
        "z": "21abc26.2e8053e",
        "name": "Get local macaddr",
        "info": "",
        "x": 410,
        "y": 720,
        "wires": []
    },
    {
        "id": "33bbb910.c77a76",
        "type": "link out",
        "z": "21abc26.2e8053e",
        "name": "Get macAddr if Not Defined",
        "links": [
            "11c74579.3eeadb"
        ],
        "x": 615,
        "y": 40,
        "wires": []
    },
    {
        "id": "5907bb1d.2c38f4",
        "type": "inject",
        "z": "3662f577.cb66ca",
        "name": "MoniconPLC-Server003V0.1.1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "MoniconPLC-Server003V0.1.1",
        "payloadType": "str",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "3f864068.802f7"
            ]
        ]
    },
    {
        "id": "b36fadb3.f3c62",
        "type": "comment",
        "z": "3662f577.cb66ca",
        "name": "Set Server Version",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "492e8147.44976",
        "type": "mqtt in",
        "z": "8ff8eb41.513f08",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/DeleteCreateLocalDB/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 160,
        "wires": [
            [
                "b5f8da09.e69ef8"
            ]
        ]
    },
    {
        "id": "f8184804.ba1b38",
        "type": "delay",
        "z": "8ff8eb41.513f08",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 560,
        "y": 240,
        "wires": [
            [
                "4e706c3f.1882f4"
            ]
        ]
    },
    {
        "id": "b5f8da09.e69ef8",
        "type": "function",
        "z": "8ff8eb41.513f08",
        "name": "Check Server macAddr",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Local Database has been reset.\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 160,
        "wires": [
            [
                "8f4e03a5.b091f",
                "f8184804.ba1b38",
                "92e849be.7f1288"
            ]
        ]
    },
    {
        "id": "92e849be.7f1288",
        "type": "link out",
        "z": "8ff8eb41.513f08",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 815,
        "y": 160,
        "wires": []
    },
    {
        "id": "9fdf3971.ff9398",
        "type": "mqtt in",
        "z": "6a9e2b4f.389254",
        "name": "",
        "topic": "MONICON-PLC/STAT/Thresholds_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "d8de533e.18233",
                "7bbc296.a3ec5d8"
            ]
        ]
    },
    {
        "id": "d9f9c9a9.c385e8",
        "type": "mqtt in",
        "z": "6a9e2b4f.389254",
        "name": "",
        "topic": "MONICON-PLC/STAT/Thresholds_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 800,
        "wires": [
            [
                "95b06329.9a41d",
                "7bbc296.a3ec5d8"
            ]
        ]
    },
    {
        "id": "d8de533e.18233",
        "type": "link out",
        "z": "6a9e2b4f.389254",
        "name": "L-Thres_PT100-Para",
        "links": [],
        "x": 475,
        "y": 680,
        "wires": []
    },
    {
        "id": "95b06329.9a41d",
        "type": "link out",
        "z": "6a9e2b4f.389254",
        "name": "L-Thres_4n20-Para",
        "links": [
            "7010bf18.67104"
        ],
        "x": 475,
        "y": 800,
        "wires": []
    },
    {
        "id": "7bbc296.a3ec5d8",
        "type": "function",
        "z": "6a9e2b4f.389254",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 740,
        "wires": [
            [
                "a26a8c39.16ca8"
            ]
        ]
    },
    {
        "id": "711553c6.cc619c",
        "type": "link out",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 575,
        "y": 80,
        "wires": []
    },
    {
        "id": "e086292c.708038",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "GLOBAL DEVICE SEARCH",
        "info": "",
        "x": 140,
        "y": 140,
        "wires": []
    },
    {
        "id": "51188981.c65ea8",
        "type": "mqtt in",
        "z": "b0f275d4.a9bd08",
        "name": "",
        "topic": "MONICON-PLC/STAT/CaliPub_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "da2755bf.2953c8"
            ]
        ]
    },
    {
        "id": "8a368c77.c6b17",
        "type": "mqtt in",
        "z": "b0f275d4.a9bd08",
        "name": "",
        "topic": "MONICON-PLC/STAT/CaliPub_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 580,
        "wires": [
            [
                "da2755bf.2953c8"
            ]
        ]
    },
    {
        "id": "8f9066a9.ec8d68",
        "type": "comment",
        "z": "b0f275d4.a9bd08",
        "name": "Scale Parameters",
        "info": "",
        "x": 110,
        "y": 460,
        "wires": []
    },
    {
        "id": "da2755bf.2953c8",
        "type": "function",
        "z": "b0f275d4.a9bd08",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 540,
        "wires": [
            [
                "8fa74b6c.6588c8"
            ]
        ]
    },
    {
        "id": "212d3eea.1320e2",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "Poll Cycle Times",
        "info": "",
        "x": 120,
        "y": 1840,
        "wires": []
    },
    {
        "id": "5738dd59.0e5e24",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "MONICON-PLC/STAT/TenSecondLoopLimit/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 1880,
        "wires": [
            [
                "72730409.5b463c"
            ]
        ]
    },
    {
        "id": "72730409.5b463c",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 1880,
        "wires": [
            [
                "39da8639.e8c11a"
            ]
        ]
    },
    {
        "id": "39da8639.e8c11a",
        "type": "link out",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 735,
        "y": 1880,
        "wires": []
    },
    {
        "id": "ff69c89.ae80238",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "Task Complete Messages",
        "info": "",
        "x": 150,
        "y": 1940,
        "wires": []
    },
    {
        "id": "f927cd9e.1e70a",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "MONICON-PLC/STAT/RespondMessages/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 1980,
        "wires": [
            [
                "ad6c74b7.cd5168"
            ]
        ]
    },
    {
        "id": "ad6c74b7.cd5168",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 1980,
        "wires": [
            [
                "158a4684.6e20f9"
            ]
        ]
    },
    {
        "id": "158a4684.6e20f9",
        "type": "link out",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 735,
        "y": 1980,
        "wires": []
    },
    {
        "id": "da53d6b.7901128",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "Enable Analog Timer to Stream values to Broker",
        "info": "",
        "x": 220,
        "y": 2040,
        "wires": []
    },
    {
        "id": "ccb069a9.718c38",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpgradeGrafana/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "x": 210,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "9937eab0.ac85a8",
        "type": "exec",
        "z": "12b0b98a.2c8cc6",
        "command": "sudo /home/pi/JC/grafanaGithubSetup.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Update Local Grafana Dashboard ",
        "x": 840,
        "y": 2080,
        "wires": [
            [
                "d279af31.a79e"
            ],
            [
                "39c966f9.efb73a"
            ],
            []
        ]
    },
    {
        "id": "d3f36b0d.159278",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "Check Server",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 2080,
        "wires": [
            [
                "9937eab0.ac85a8"
            ]
        ]
    },
    {
        "id": "d279af31.a79e",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Local Grafana Updated Successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 2100,
        "wires": [
            [
                "8ce08b1b.47bf18"
            ]
        ]
    },
    {
        "id": "8ce08b1b.47bf18",
        "type": "link out",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 1255,
        "y": 2100,
        "wires": []
    },
    {
        "id": "c9bd0f2e.7e4bc",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpgradeGrafana/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 2140,
        "wires": [
            [
                "d3f36b0d.159278"
            ]
        ]
    },
    {
        "id": "39c966f9.efb73a",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 2160,
        "wires": [
            [
                "8ce08b1b.47bf18"
            ]
        ]
    },
    {
        "id": "10a601c2.937a3e",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1280,
        "wires": [
            [
                "8adc0ba4.c935d8"
            ]
        ]
    },
    {
        "id": "aa9c4108.3bc8d",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1450,
        "y": 1180,
        "wires": [
            [
                "8adc0ba4.c935d8"
            ]
        ]
    },
    {
        "id": "38e64b06.7fc794",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 400,
        "wires": [
            [
                "4a0229a1.417de8"
            ]
        ]
    },
    {
        "id": "ae0ea279.3bb3f",
        "type": "function",
        "z": "3662f577.cb66ca",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "319102e1.8dfcfe"
            ]
        ]
    },
    {
        "id": "2ea30971.68b396",
        "type": "comment",
        "z": "3662f577.cb66ca",
        "name": "Download Scripts",
        "info": "",
        "x": 100,
        "y": 640,
        "wires": []
    },
    {
        "id": "14971529.6165db",
        "type": "mqtt in",
        "z": "3662f577.cb66ca",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Scripts/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 680,
        "wires": [
            [
                "a408673c.d4c488"
            ]
        ]
    },
    {
        "id": "a408673c.d4c488",
        "type": "function",
        "z": "3662f577.cb66ca",
        "name": "Scripting",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\n//let directory = \"MONICON\";\n\n//var data = \"sudo find /home/pi/ -type d -name 'MONICON/Scripts' -exec rm -r {} +;\"\nvar data = \"sudo rm -r /home/pi/MONICON/Scripts;\"\ndata = data.concat(\"sudo git clone https://github.com/jimmy232/MoniconPLC_Scripts.git /home/pi/MONICON/Scripts/;\");\ndata = data.concat(\"sudo chmod +x /home/pi/MONICON/Scripts/*.sh;\");\ndata = data.concat(\"sudo /home/pi/MONICON/Scripts/\" + msg.payload + \";\");\nmsg.payload = data;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 680,
        "wires": [
            [
                "aa232235.cded6",
                "8cf62261.569c7",
                "3132d548.be42aa"
            ]
        ]
    },
    {
        "id": "aa232235.cded6",
        "type": "exec",
        "z": "3662f577.cb66ca",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 790,
        "y": 680,
        "wires": [
            [
                "ed6705c6.ab28d8"
            ],
            [
                "ed6705c6.ab28d8"
            ],
            [
                "ed6705c6.ab28d8",
                "a2b4b1cc.3eb69"
            ]
        ]
    },
    {
        "id": "ed6705c6.ab28d8",
        "type": "function",
        "z": "3662f577.cb66ca",
        "name": "Logs",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/LogMessages/\" + macAddr;\nif(msg.payload === null || msg.payload.length == 0) {\n    msg.payload == \"Empty Msg\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 680,
        "wires": [
            [
                "1e3304a4.a2fbcb"
            ]
        ]
    },
    {
        "id": "a2b4b1cc.3eb69",
        "type": "function",
        "z": "3662f577.cb66ca",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nif(msg.payload.code === 0) {\n    msg.payload = \"Script-Finished\";\n} else {\n    msg.payload = \"Script-Failed\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 720,
        "wires": [
            [
                "1e3304a4.a2fbcb"
            ]
        ]
    },
    {
        "id": "1e3304a4.a2fbcb",
        "type": "link out",
        "z": "3662f577.cb66ca",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 1195,
        "y": 840,
        "wires": []
    },
    {
        "id": "8cf62261.569c7",
        "type": "function",
        "z": "3662f577.cb66ca",
        "name": "Logs",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/LogMessages/\" + macAddr;\nif(msg.payload === null || msg.payload.length === 0) {\n    msg.payload == \"Empty Msg\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 800,
        "wires": [
            [
                "1e3304a4.a2fbcb"
            ]
        ]
    },
    {
        "id": "3132d548.be42aa",
        "type": "function",
        "z": "3662f577.cb66ca",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Running Scripts...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 840,
        "wires": [
            [
                "1e3304a4.a2fbcb"
            ]
        ]
    },
    {
        "id": "eb5872ad.4e5e5",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalOutputStatus/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "71a15eca.73541",
                "3f67ebc3.62c894",
                "dcd2aff0.31781"
            ]
        ]
    },
    {
        "id": "fe0b5c48.c521f",
        "type": "comment",
        "z": "3041242d.d65d6c",
        "name": "Digital Output Status",
        "info": "",
        "x": 110,
        "y": 540,
        "wires": []
    },
    {
        "id": "71a15eca.73541",
        "type": "function",
        "z": "3041242d.d65d6c",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 580,
        "wires": [
            [
                "978180c3.30cf8"
            ]
        ]
    },
    {
        "id": "978180c3.30cf8",
        "type": "link out",
        "z": "3041242d.d65d6c",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 795,
        "y": 580,
        "wires": []
    },
    {
        "id": "86a82ac5.875ff8",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "sess/MONICON-PLC/ENG/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "fb0127d4.560998"
            ]
        ]
    },
    {
        "id": "fb0127d4.560998",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "ENG => CMD",
        "func": "msg.topic = msg.topic.replace(\"ENG\", \"CMD\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 320,
        "wires": [
            [
                "97cadfc1.50f58"
            ]
        ]
    },
    {
        "id": "27bce8b5.03f9a8",
        "type": "mqtt in",
        "z": "12b0b98a.2c8cc6",
        "name": "",
        "topic": "sess/MONICON-PLC/PUB/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "301eafda.15ff2"
            ]
        ]
    },
    {
        "id": "301eafda.15ff2",
        "type": "function",
        "z": "12b0b98a.2c8cc6",
        "name": "PUB => CMD",
        "func": "msg.topic = msg.topic.replace(\"PUB\", \"CMD\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 380,
        "wires": [
            [
                "97cadfc1.50f58"
            ]
        ]
    },
    {
        "id": "6b0c20f9.f1cc7",
        "type": "comment",
        "z": "12b0b98a.2c8cc6",
        "name": "MASTER MQTT LINK",
        "info": "",
        "x": 140,
        "y": 2220,
        "wires": []
    },
    {
        "id": "2fd868ea.65bc48",
        "type": "inject",
        "z": "d8a17f8e.66ae9",
        "name": "Accumulator",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "da031d3d.d4eb7"
            ]
        ]
    },
    {
        "id": "da031d3d.d4eb7",
        "type": "function",
        "z": "d8a17f8e.66ae9",
        "name": "AccumulatorRequest 24hr",
        "func": "//var hour = new Date().getHours();\n//if (hour === 0) {\n    for (var r = 0; r < 7; r++) {\n            msg.topic = \"MONICON-PLC/CMD/AccumulatorRequest/\";\n            msg.payload = String(r);\n            node.send(msg);\n       \n    }\n    // for (var c = 0; c < 7; c++) {\n    //         msg.topic = \"MONICON-PLC/CMD/AccumulatorClear/\";\n    //         msg.payload = String(c);\n    //         node.send(msg);\n       \n    // }\n//}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 100,
        "wires": [
            [
                "3da795c3.c624fa"
            ]
        ]
    },
    {
        "id": "cd445271.7176a",
        "type": "mqtt in",
        "z": "d8a17f8e.66ae9",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorOne/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 240,
        "wires": [
            [
                "bc237462.ae7208"
            ]
        ]
    },
    {
        "id": "cb53d3b8.5ddaf",
        "type": "mqtt in",
        "z": "d8a17f8e.66ae9",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorTwo/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 280,
        "wires": [
            [
                "bc237462.ae7208"
            ]
        ]
    },
    {
        "id": "48f34e9e.80a58",
        "type": "mqtt in",
        "z": "d8a17f8e.66ae9",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorThree/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "bc237462.ae7208"
            ]
        ]
    },
    {
        "id": "6b2757d1.a3ef08",
        "type": "mqtt in",
        "z": "d8a17f8e.66ae9",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorFour/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 360,
        "wires": [
            [
                "bc237462.ae7208"
            ]
        ]
    },
    {
        "id": "2c1a8a20.70eab6",
        "type": "mqtt in",
        "z": "d8a17f8e.66ae9",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorFive/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 400,
        "wires": [
            [
                "bc237462.ae7208"
            ]
        ]
    },
    {
        "id": "6c97f057.e7842",
        "type": "mqtt in",
        "z": "d8a17f8e.66ae9",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorSix/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 250,
        "y": 440,
        "wires": [
            [
                "bc237462.ae7208"
            ]
        ]
    },
    {
        "id": "b0b1ede0.c8bdf",
        "type": "mqtt in",
        "z": "d8a17f8e.66ae9",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorSeven/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 480,
        "wires": [
            [
                "bc237462.ae7208"
            ]
        ]
    },
    {
        "id": "3da795c3.c624fa",
        "type": "mqtt out",
        "z": "d8a17f8e.66ae9",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 830,
        "y": 100,
        "wires": []
    },
    {
        "id": "bc237462.ae7208",
        "type": "link out",
        "z": "d8a17f8e.66ae9",
        "name": "Accumulators",
        "links": [
            "a0b03042.c871e"
        ],
        "x": 795,
        "y": 240,
        "wires": []
    },
    {
        "id": "a0b03042.c871e",
        "type": "link in",
        "z": "8ff8eb41.513f08",
        "name": "",
        "links": [
            "bc237462.ae7208"
        ],
        "x": 35,
        "y": 780,
        "wires": [
            [
                "404dba19.420944",
                "ecbc87e0.72deb8"
            ]
        ]
    },
    {
        "id": "ecbc87e0.72deb8",
        "type": "function",
        "z": "8ff8eb41.513f08",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[0]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[2]]: parseFloat(output[1])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 820,
        "wires": [
            [
                "d92a9eeb.dec05"
            ]
        ]
    },
    {
        "id": "404dba19.420944",
        "type": "function",
        "z": "8ff8eb41.513f08",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[2]]: parseFloat(output[1])\n\t\t},\n        tags:{\n            PLC: output[0] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 780,
        "wires": [
            [
                "ebd278e5.7e4ea8"
            ]
        ]
    },
    {
        "id": "d92a9eeb.dec05",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "8ff8eb41.513f08",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "ebd278e5.7e4ea8",
        "type": "influxdb batch",
        "z": "8ff8eb41.513f08",
        "influxdb": "4da4ea34.630684",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 780,
        "wires": []
    },
    {
        "id": "e66dc7a9.4403f8",
        "type": "comment",
        "z": "8ff8eb41.513f08",
        "name": "Accumulators Link",
        "info": "",
        "x": 110,
        "y": 740,
        "wires": []
    },
    {
        "id": "dbbe83ac.26b58",
        "type": "function",
        "z": "c9ba8bcf.e8f3d8",
        "name": "Check Timers",
        "func": "/////////////// Splict message into an array ///////////////\n//var data = msg.payload.split(\",\");\n//data[0] = id\n//data[1] = sw\n//data[2] = type\n//data[3] = index\n//data[4] = action\n//data[5] = milliseconds(onTime)\n//data[6] = milliseconds(offTime)\n//data[7] = repeat\n//data[8] = enable\n//data[9] = RoomName/SwitchName\n\nvar digitalOutputID = 0;\n\nvar timerArray = flow.get(\"timers\") || null;\n\nif(timerArray === null) {\n    return;\n}\n\nif (Object.keys(timerArray).length === 0 ) {\n    return;\n}\n\n\nvar currentTime = new Date().getTime();\n\n/////////////// Action Manifold ///////////////\nfor (let [key, value] of Object.entries(timerArray.id)) {\n    let serial = key;\n    \n    //msg.payload = key;\n    //node.send(msg);\n    \n    for (let [key, value] of Object.entries(timerArray.id[serial].index)) {\n\n        actionSelection(value, serial);\n        \n        // msg.payload = value;\n        // node.send(msg);\n    }\n}\n\nfunction actionSelection(value, serial) {\n    if (value.action == \"On\" ) {\n    } \n    else if (value.action == \"Off\") {\n    }\n    else if (value.action == \"ON/OFF\" ) {\n        timerList(value, serial);\n    }\n}\n\nfunction timerList(value, serial) {\n    \n    if(value.type == \"LightPro\") {\n        if(value.sw == \"sw0\") {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial;\n            digitalOutputID = 0;\n        } \n        else if (value.sw == \"sw1\") {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial; \n            digitalOutputID = 1;\n        } else {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial;\n            digitalOutputID = 2;\n        }\n    } else {\n        msg.topic = \"sess/MONICON-PLC/CMD/RELAY/\" + serial;\n    }\n\n    if (value.on.trig == \"1\" && checkTime(value.on.time)) {\n        if (value.repeat == \"1\") {\n            value.on.trig = \"1\";\n            value.on.time = DateCalculator(value.on.time); // Add 60 seconds\n            value.on.seconds = String(new Date(value.on.time).getTime());\n            msg.date = value.on.time;\n        } else {\n            value.on.trig = \"0\";\n        }\n        msg.id = value.id;\n        msg.name = value.name;\n        msg.payload = String(digitalOutputID) + \",\" + 1;\n        \n        flow.set(\"timers\", timerArray);\n        node.send(msg);\n    } \n    if (value.off.trig == \"1\" && checkTime(value.off.time)) {\n        if (value.repeat == \"1\") {\n            value.off.trig = \"1\";\n            value.off.time = DateCalculator(value.off.time); // Add 60 seconds\n            value.off.seconds = String(new Date(value.off.time).getTime());\n            msg.date = value.off.time;\n        } else {\n            value.off.trig = \"0\";\n        }\n        msg.id = value.id;\n        msg.name = value.name;\n        msg.payload = String(digitalOutputID) + \",\" + 0;\n\n        flow.set(\"timers\", timerArray);\n        node.send(msg);\n    } \n}\n\nfunction DateCalculator(time) {\n    //msg.payload = time\n    //return msg\n    var thisTime = new Date(time);\n    \n    thisTime.setHours(thisTime.getHours());\n    thisTime.setMinutes(thisTime.getMinutes());\n    thisTime.setSeconds(0);\n\n    //thisTime.setDate(new Date().getDate() + 1);\n    thisTime.setDate(new Date().getDate())\n    thisTime.setMonth(new Date().getMonth());\n    thisTime.setFullYear(new Date().getFullYear());\n    \n    var milliSeconds = thisTime.getTime() + 86400000;\n    \n    thisTime = new Date(milliSeconds);\n    \n    return thisTime;\n}\n\nfunction checkTime(time) {\n    if (new Date(time).getTime() < new Date().getTime()) {\n        return true\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 120,
        "wires": [
            [
                "6ffb58d4.0d59f8"
            ]
        ]
    },
    {
        "id": "54c3bed2.cd045",
        "type": "inject",
        "z": "c9ba8bcf.e8f3d8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "dbbe83ac.26b58"
            ]
        ]
    },
    {
        "id": "ba68266a.705148",
        "type": "comment",
        "z": "c9ba8bcf.e8f3d8",
        "name": "Check Existing Alarms",
        "info": "",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "5e8ee360.eb8a5c",
        "type": "function",
        "z": "c9ba8bcf.e8f3d8",
        "name": "Create",
        "func": "/////////////// Splict message into an array ///////////////\nvar data = msg.payload.split(\",\");\n// var data = [];\n// data[0] = \"9020802\"                     //id\n// data[1] = \"sw1\"                         //sw\n// data[2] = \"LightPro\"                    //type\n// data[3] = \"0\"                           //index\n// data[4] = \"On/Off\"                      //action\n// data[5] = \"2020/04/16 19:30\"            //milliseconds(onTime)\n// data[6] = \"2020/04/16 19:32\"            //milliseconds(offTime)\n// data[7] = \"1\"                           //repeat\n// data[8] = \"1\"                           //enable\n// data[9] = \"Master Bedroom/Light\"        //RoomName/SwitchName\n\nlet t1 = new Date(new Date(parseInt(data[5])));\nlet t2 = new Date(new Date(parseInt(data[6])));\n\n// let t1 = new Date(new Date().getTime() + 300000);\n// let t2 = new Date(new Date().getTime() + 30000);\n\nvar timer = flow.get(\"timers.id[\\\"\" + data[0] + \"\\\"].index[\\\"\" + data[3] + \"\\\"]\") || { id: data[0], sw: data[1], type: data[2], index: data[3], action: data[4], on:{trig:data[8], time: t1, seconds: data[6] }, off:{trig:data[8], time: t2, seconds: data[5] }, repeat: data[7], state: data[8], name: data[9] } ; \n\ntimer = { id: data[0], sw: data[1], type: data[2], index: data[3], action: data[4], on:{trig:data[8], time: t1, seconds: data[5] }, off:{trig:data[8], time: t2, seconds: data[6] }, repeat: data[7], state: data[8], name: data[9] } ; \n\nflow.set(\"timers.id[\\\"\" + data[0] + \"\\\"].index[\\\"\" + data[3] + \"\\\"]\", timer);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "b8efa0b8.594",
        "type": "function",
        "z": "c9ba8bcf.e8f3d8",
        "name": "Delete",
        "func": "/////////////// Splict message into an array ///////////////\nvar data = msg.payload.split(\",\");\nlet id = String(data[0])\nlet sw = data[1]\nlet index = String(data[2])\n\n/////////////// Get Timers ///////////////\nvar timer = flow.get(\"timers\") ;\n\n/////////////// Get Timer Object ///////////////\ndelete timer.id[id].index[index]\n",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "eb396e1a.c5844",
        "type": "function",
        "z": "c9ba8bcf.e8f3d8",
        "name": "",
        "func": "/////////////// Get Timers ///////////////\nvar timer = flow.get(\"timers\") ;\n\n/////////////// Get Timer Object ///////////////\nvar obj = timer.id[msg.payload];\nmsg.topic = \"sess/MONICON-PLC/STAT/GetTimers/\" + msg.payload;\n\n/////////////// If Object doesn't exist, send empty object ///////////////\n// if(obj === undefined) {\n//     msg = {payload: {  }, topic: msg.topic};\n//     msg.topic = \"\"\n//     return ;\n// }\n// /////////////// Send Timer Object ///////////////\n// else {\n    var msg1 = { payload: obj, topic: msg.topic };\n\n    return msg1;\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 840,
        "y": 300,
        "wires": [
            [
                "62b1bdc3.352924"
            ]
        ]
    },
    {
        "id": "ed7c9f7d.67737",
        "type": "mqtt in",
        "z": "c9ba8bcf.e8f3d8",
        "name": "",
        "topic": "MONICON-PLC/CMD/setTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "1482ce29.522f22"
            ]
        ]
    },
    {
        "id": "6ffb58d4.0d59f8",
        "type": "function",
        "z": "c9ba8bcf.e8f3d8",
        "name": "Return Timers",
        "func": "var cmd = msg.payload.split(\",\");\nif(cmd[1] === \"1\" || cmd[1] === \"0\") {\n    // Update iOS device timer list\nvar msg1 = { payload: msg.id, topic: \"sess/MONICON-PLC/CMD/GetTimers/\" };\n    // Send Notification to user\nvar msg2 = { payload: msg.id + \",MONICON,\" + msg.name + \",\" + msg.payload, topic: \"sess/MONICON-PLC/STAT/Timers/Alert/\" };\n    // Send Command to Monicon device\nvar msg3 = { payload: msg.payload, topic: msg.topic };\n\nreturn [msg1, msg2, msg3]\n\n}\n\nreturn",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 120,
        "wires": [
            [
                "9af9b056.11acf"
            ],
            [
                "9af9b056.11acf"
            ],
            [
                "9af9b056.11acf"
            ]
        ]
    },
    {
        "id": "e78102ca.25877",
        "type": "mqtt in",
        "z": "c9ba8bcf.e8f3d8",
        "name": "",
        "topic": "MONICON-PLC/CMD/DeleteTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "18db52bb.d60f1d"
            ]
        ]
    },
    {
        "id": "516417b2.eaaf38",
        "type": "mqtt in",
        "z": "c9ba8bcf.e8f3d8",
        "name": "",
        "topic": "MONICON-PLC/CMD/GetTimers/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "186ac431.747a9c"
            ]
        ]
    },
    {
        "id": "d29e06c9.23f398",
        "type": "delay",
        "z": "c9ba8bcf.e8f3d8",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 660,
        "y": 300,
        "wires": [
            [
                "eb396e1a.c5844"
            ]
        ]
    },
    {
        "id": "62b1bdc3.352924",
        "type": "json",
        "z": "c9ba8bcf.e8f3d8",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 970,
        "y": 300,
        "wires": [
            [
                "9af9b056.11acf"
            ]
        ]
    },
    {
        "id": "9af9b056.11acf",
        "type": "link out",
        "z": "c9ba8bcf.e8f3d8",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 1135,
        "y": 120,
        "wires": []
    },
    {
        "id": "90d65cd1.ab842",
        "type": "inject",
        "z": "3041242d.d65d6c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0,1",
        "payloadType": "str",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "fcaa31ed.0f068",
                "7fa9988e.0a6318"
            ]
        ]
    },
    {
        "id": "fcaa31ed.0f068",
        "type": "mqtt out",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/CMD/pubDigitalInputsEnable/4164319659",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 630,
        "y": 860,
        "wires": []
    },
    {
        "id": "c5466752.af3268",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_00/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 80,
        "wires": [
            [
                "eaf75c96.f9faa",
                "ee28e3.9b42672",
                "2846a767.f2cdb8"
            ]
        ]
    },
    {
        "id": "6b2c7ca6.154134",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_01/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 140,
        "wires": [
            [
                "eaf75c96.f9faa",
                "ee28e3.9b42672",
                "2846a767.f2cdb8"
            ]
        ]
    },
    {
        "id": "5275fff8.ecf04",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_02/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 200,
        "wires": [
            [
                "eaf75c96.f9faa",
                "ee28e3.9b42672",
                "2846a767.f2cdb8"
            ]
        ]
    },
    {
        "id": "774adc9c.af3c14",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_03/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 260,
        "wires": [
            [
                "eaf75c96.f9faa",
                "ee28e3.9b42672",
                "2846a767.f2cdb8"
            ]
        ]
    },
    {
        "id": "f956a3b8.d9ce1",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_04/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 320,
        "wires": [
            [
                "eaf75c96.f9faa",
                "ee28e3.9b42672",
                "2846a767.f2cdb8"
            ]
        ]
    },
    {
        "id": "bbeaf86c.3195f8",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_05/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 380,
        "wires": [
            [
                "eaf75c96.f9faa",
                "ee28e3.9b42672",
                "2846a767.f2cdb8"
            ]
        ]
    },
    {
        "id": "fa3fdf71.0d0bc",
        "type": "mqtt in",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_06/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 440,
        "wires": [
            [
                "eaf75c96.f9faa",
                "ee28e3.9b42672",
                "2846a767.f2cdb8"
            ]
        ]
    },
    {
        "id": "5bbaaa35.83a144",
        "type": "comment",
        "z": "3041242d.d65d6c",
        "name": "Digital Input - Status Change",
        "info": "",
        "x": 1220,
        "y": 40,
        "wires": []
    },
    {
        "id": "eaf75c96.f9faa",
        "type": "function",
        "z": "3041242d.d65d6c",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nmsg.topic = msg.topic.replace(\"DigitalInputStatus\", \"DigitalInputs\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 80,
        "wires": [
            [
                "d39bdec5.d9461"
            ]
        ]
    },
    {
        "id": "d39bdec5.d9461",
        "type": "link out",
        "z": "3041242d.d65d6c",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 1875,
        "y": 80,
        "wires": []
    },
    {
        "id": "7fa9988e.0a6318",
        "type": "mqtt out",
        "z": "3041242d.d65d6c",
        "name": "",
        "topic": "MONICON-PLC/CMD/pubDigitalInputsEnable/1010989483",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 630,
        "y": 800,
        "wires": []
    },
    {
        "id": "88d6464a.3fd5b8",
        "type": "comment",
        "z": "3041242d.d65d6c",
        "name": "Enable Digital Status Change Publishing",
        "info": "",
        "x": 180,
        "y": 760,
        "wires": []
    },
    {
        "id": "2631aba3.75ec44",
        "type": "comment",
        "z": "8ff8eb41.513f08",
        "name": "------- Global Logging Connection ------- ",
        "info": "",
        "x": 170,
        "y": 900,
        "wires": []
    },
    {
        "id": "2e43359.042f5ca",
        "type": "comment",
        "z": "8ff8eb41.513f08",
        "name": "Remote FluxDb Link",
        "info": "",
        "x": 150,
        "y": 1020,
        "wires": []
    },
    {
        "id": "dcd2aff0.31781",
        "type": "function",
        "z": "3041242d.d65d6c",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[3]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tDigital_00: parseFloat(output[0]),\n\t\t\t\tDigital_01: parseFloat(output[1]),\n\t\t\t\tDigital_02: parseFloat(output[2])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 660,
        "wires": [
            [
                "93581ea.9d7bce"
            ]
        ]
    },
    {
        "id": "3f67ebc3.62c894",
        "type": "function",
        "z": "3041242d.d65d6c",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\tDigitalOutput_00: parseFloat(output[0]),\n\t\t\tDigitalOutput_01: parseFloat(output[1]),\n\t\t\tDigitalOutput_02: parseFloat(output[2])\n\t\t},\n        tags:{\n            PLC: output[3] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 620,
        "wires": [
            [
                "c2814c42.a671f"
            ]
        ]
    },
    {
        "id": "c2814c42.a671f",
        "type": "link out",
        "z": "3041242d.d65d6c",
        "name": "",
        "links": [
            "f27ed104.66b25"
        ],
        "x": 795,
        "y": 620,
        "wires": []
    },
    {
        "id": "93581ea.9d7bce",
        "type": "link out",
        "z": "3041242d.d65d6c",
        "name": "",
        "links": [
            "55de188.517e2e8"
        ],
        "x": 795,
        "y": 660,
        "wires": []
    },
    {
        "id": "11b5a5b4.f065da",
        "type": "comment",
        "z": "3041242d.d65d6c",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 940,
        "y": 580,
        "wires": []
    },
    {
        "id": "c22dcfb5.99a18",
        "type": "comment",
        "z": "3041242d.d65d6c",
        "name": "Database | Local",
        "info": "",
        "x": 900,
        "y": 620,
        "wires": []
    },
    {
        "id": "59e6af15.a3732",
        "type": "comment",
        "z": "3041242d.d65d6c",
        "name": "Database | Remote",
        "info": "",
        "x": 910,
        "y": 660,
        "wires": []
    },
    {
        "id": "2846a767.f2cdb8",
        "type": "function",
        "z": "3041242d.d65d6c",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[1]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1750,
        "y": 440,
        "wires": [
            [
                "b5e581f4.de86b"
            ]
        ]
    },
    {
        "id": "ee28e3.9b42672",
        "type": "function",
        "z": "3041242d.d65d6c",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            PLC: output[1] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 260,
        "wires": [
            [
                "4f41b8d0.830478"
            ]
        ]
    },
    {
        "id": "4f41b8d0.830478",
        "type": "link out",
        "z": "3041242d.d65d6c",
        "name": "",
        "links": [
            "f27ed104.66b25"
        ],
        "x": 1875,
        "y": 260,
        "wires": []
    },
    {
        "id": "b5e581f4.de86b",
        "type": "link out",
        "z": "3041242d.d65d6c",
        "name": "",
        "links": [
            "55de188.517e2e8"
        ],
        "x": 1875,
        "y": 440,
        "wires": []
    },
    {
        "id": "c5b7f07e.61b08",
        "type": "comment",
        "z": "3041242d.d65d6c",
        "name": "Database | Local",
        "info": "",
        "x": 1980,
        "y": 260,
        "wires": []
    },
    {
        "id": "497c581b.8aa618",
        "type": "comment",
        "z": "3041242d.d65d6c",
        "name": "Database | Remote",
        "info": "",
        "x": 1990,
        "y": 440,
        "wires": []
    },
    {
        "id": "eda1d750.32b0d8",
        "type": "comment",
        "z": "3041242d.d65d6c",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 2020,
        "y": 80,
        "wires": []
    },
    {
        "id": "80fe5848.c60c48",
        "type": "function",
        "z": "3041242d.d65d6c",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[1]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 440,
        "wires": [
            [
                "2a1775f7.a39dba"
            ]
        ]
    },
    {
        "id": "d7087b74.d87d48",
        "type": "function",
        "z": "3041242d.d65d6c",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            PLC: output[1] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 260,
        "wires": [
            [
                "679bca4.18eee34"
            ]
        ]
    },
    {
        "id": "679bca4.18eee34",
        "type": "link out",
        "z": "3041242d.d65d6c",
        "name": "",
        "links": [
            "f27ed104.66b25"
        ],
        "x": 795,
        "y": 260,
        "wires": []
    },
    {
        "id": "2a1775f7.a39dba",
        "type": "link out",
        "z": "3041242d.d65d6c",
        "name": "",
        "links": [
            "55de188.517e2e8"
        ],
        "x": 795,
        "y": 440,
        "wires": []
    },
    {
        "id": "a48a4512.24aaa8",
        "type": "comment",
        "z": "3041242d.d65d6c",
        "name": "Database | Local",
        "info": "",
        "x": 900,
        "y": 260,
        "wires": []
    },
    {
        "id": "7c979fe4.99392",
        "type": "comment",
        "z": "3041242d.d65d6c",
        "name": "Database | Remote",
        "info": "",
        "x": 910,
        "y": 440,
        "wires": []
    },
    {
        "id": "debf0e0d.66b2c",
        "type": "comment",
        "z": "3041242d.d65d6c",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 940,
        "y": 80,
        "wires": []
    },
    {
        "id": "32a44321.e6638c",
        "type": "inject",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "Server_Heartbeat",
        "payload": "*",
        "payloadType": "str",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "64d04312.32202c",
                "59a9cf7d.b60b6"
            ]
        ]
    },
    {
        "id": "64d04312.32202c",
        "type": "trigger",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0.250",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 600,
        "y": 180,
        "wires": [
            [
                "70cb9c4e.0ea314",
                "da125ca.2c80ca"
            ]
        ]
    },
    {
        "id": "70cb9c4e.0ea314",
        "type": "rpi-gpio out",
        "z": "f6c2b479.af6bc8",
        "name": "Heartbeat Server - GPIO18",
        "pin": "12",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1040,
        "y": 180,
        "wires": []
    },
    {
        "id": "6178baeb.656684",
        "type": "mqtt in",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "topic": "MONICON-PLC/CMD/Heartbeat/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "74f1af87.90583"
            ]
        ]
    },
    {
        "id": "3ea1b85e.e68ab8",
        "type": "trigger",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "2.5",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 590,
        "y": 300,
        "wires": [
            [
                "bad27505.b8c7b8"
            ]
        ]
    },
    {
        "id": "45a27635.b11448",
        "type": "comment",
        "z": "f6c2b479.af6bc8",
        "name": "Watchdog Timer Supervisor - Server Heartbeat",
        "info": "",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "8d8ef8.1c6c8108",
        "type": "comment",
        "z": "f6c2b479.af6bc8",
        "name": "Watchdog Timer Supervisor - Server Heartbeat",
        "info": "",
        "x": 220,
        "y": 260,
        "wires": []
    },
    {
        "id": "33f658ee.7f0f18",
        "type": "function",
        "z": "f6c2b479.af6bc8",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tSystem: \"Heartbeat\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[0]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "7a9433e8.0387bc"
            ]
        ]
    },
    {
        "id": "c4a911ef.e1137",
        "type": "function",
        "z": "f6c2b479.af6bc8",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"OS\",\n\n        fields: {\n\t\t\t[topic[0]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            System: \"Heartbeat\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "4d826b76.6d3164"
            ]
        ]
    },
    {
        "id": "4d826b76.6d3164",
        "type": "link out",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "links": [
            "f27ed104.66b25"
        ],
        "x": 1135,
        "y": 240,
        "wires": []
    },
    {
        "id": "7a9433e8.0387bc",
        "type": "link out",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "links": [
            "55de188.517e2e8"
        ],
        "x": 1135,
        "y": 300,
        "wires": []
    },
    {
        "id": "6b8590b9.bc21e",
        "type": "comment",
        "z": "f6c2b479.af6bc8",
        "name": "Database | Local",
        "info": "",
        "x": 1240,
        "y": 240,
        "wires": []
    },
    {
        "id": "53ee3486.ab505c",
        "type": "comment",
        "z": "f6c2b479.af6bc8",
        "name": "Database | Remote",
        "info": "",
        "x": 1250,
        "y": 300,
        "wires": []
    },
    {
        "id": "bad27505.b8c7b8",
        "type": "function",
        "z": "f6c2b479.af6bc8",
        "name": "Formatting",
        "func": "msg.topic = \"PLC_Heartbeat\";\nflow.set(\"PLC_Heartbeat\", \"1\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 300,
        "wires": [
            [
                "c4a911ef.e1137",
                "33f658ee.7f0f18"
            ]
        ]
    },
    {
        "id": "da125ca.2c80ca",
        "type": "function",
        "z": "f6c2b479.af6bc8",
        "name": "Formatting",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 240,
        "wires": [
            [
                "33f658ee.7f0f18",
                "c4a911ef.e1137"
            ]
        ]
    },
    {
        "id": "74f1af87.90583",
        "type": "function",
        "z": "f6c2b479.af6bc8",
        "name": "MoniconPLC-1",
        "func": "if(msg.payload == \"MoniconPLC-1\") {\n    return msg;\n} else {\n    return;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 300,
        "wires": [
            [
                "3ea1b85e.e68ab8"
            ]
        ]
    },
    {
        "id": "93dfc9d5.8b1e88",
        "type": "trigger",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0.250",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 780,
        "y": 80,
        "wires": [
            [
                "70cb9c4e.0ea314"
            ]
        ]
    },
    {
        "id": "59a9cf7d.b60b6",
        "type": "delay",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "pauseType": "delay",
        "timeout": "750",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 590,
        "y": 140,
        "wires": [
            [
                "93dfc9d5.8b1e88"
            ]
        ]
    },
    {
        "id": "8f0b5e8b.6b6eb",
        "type": "rpi-gpio out",
        "z": "f6c2b479.af6bc8",
        "name": "Heartbeat Server - GPIO18",
        "pin": "12",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1240,
        "y": 560,
        "wires": []
    },
    {
        "id": "1c4fd796.be0a48",
        "type": "trigger",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "10",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 560,
        "wires": [
            [
                "8f0b5e8b.6b6eb",
                "c0a2039c.f6ff1",
                "5d7430de.a4b62"
            ]
        ]
    },
    {
        "id": "f2d1c4c3.373728",
        "type": "rpi-gpio in",
        "z": "f6c2b479.af6bc8",
        "name": "Safe Shutdown - Panel Button GPIO16",
        "pin": "36",
        "intype": "up",
        "debounce": "25",
        "read": false,
        "x": 190,
        "y": 640,
        "wires": [
            [
                "aa253c89.cc8c1",
                "8b32950b.e91718"
            ]
        ]
    },
    {
        "id": "aa253c89.cc8c1",
        "type": "delay",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 640,
        "y": 560,
        "wires": [
            [
                "1c4fd796.be0a48"
            ]
        ]
    },
    {
        "id": "a07fa9f1.767c28",
        "type": "function",
        "z": "f6c2b479.af6bc8",
        "name": "Reset",
        "func": "msg.reset = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 560,
        "wires": [
            [
                "aa253c89.cc8c1"
            ]
        ]
    },
    {
        "id": "aef71f49.ac274",
        "type": "delay",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 280,
        "y": 560,
        "wires": [
            [
                "a07fa9f1.767c28"
            ]
        ]
    },
    {
        "id": "8b32950b.e91718",
        "type": "function",
        "z": "f6c2b479.af6bc8",
        "name": "Reset",
        "func": "if (msg.payload === 0) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "aef71f49.ac274"
            ]
        ]
    },
    {
        "id": "85cb4140.97e84",
        "type": "exec",
        "z": "f6c2b479.af6bc8",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Shutdown Pi",
        "x": 1190,
        "y": 640,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "c0a2039c.f6ff1",
        "type": "delay",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1020,
        "y": 640,
        "wires": [
            [
                "85cb4140.97e84"
            ]
        ]
    },
    {
        "id": "f2d73f6f.89e72",
        "type": "link out",
        "z": "f6c2b479.af6bc8",
        "name": "Reset",
        "links": [
            "6620c993.a102f8"
        ],
        "x": 1135,
        "y": 500,
        "wires": []
    },
    {
        "id": "5d7430de.a4b62",
        "type": "function",
        "z": "f6c2b479.af6bc8",
        "name": "Reset",
        "func": "msg.reset = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 500,
        "wires": [
            [
                "f2d73f6f.89e72"
            ]
        ]
    },
    {
        "id": "6620c993.a102f8",
        "type": "link in",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "links": [
            "f2d73f6f.89e72"
        ],
        "x": 255,
        "y": 80,
        "wires": [
            [
                "59a9cf7d.b60b6",
                "64d04312.32202c",
                "93dfc9d5.8b1e88"
            ]
        ]
    },
    {
        "id": "6540c6bc.c303b8",
        "type": "comment",
        "z": "f6c2b479.af6bc8",
        "name": "Reset",
        "info": "",
        "x": 170,
        "y": 80,
        "wires": []
    },
    {
        "id": "37b3c46a.6fe20c",
        "type": "comment",
        "z": "f6c2b479.af6bc8",
        "name": "Reset",
        "info": "",
        "x": 1210,
        "y": 500,
        "wires": []
    },
    {
        "id": "acc853fc.ca286",
        "type": "rpi-gpio out",
        "z": "f6c2b479.af6bc8",
        "name": "Fan - GPIO12",
        "pin": "32",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1200,
        "y": 780,
        "wires": []
    },
    {
        "id": "9dda620d.a595b",
        "type": "comment",
        "z": "f6c2b479.af6bc8",
        "name": "Fan Temperature Control - OS Output",
        "info": "",
        "x": 190,
        "y": 740,
        "wires": []
    },
    {
        "id": "7d7db299.61b9cc",
        "type": "link in",
        "z": "f6c2b479.af6bc8",
        "name": "Fan Controller",
        "links": [
            "b3f69175.10c27"
        ],
        "x": 55,
        "y": 780,
        "wires": [
            [
                "6329c307.b99dec"
            ]
        ]
    },
    {
        "id": "6329c307.b99dec",
        "type": "function",
        "z": "f6c2b479.af6bc8",
        "name": "Temperature Threshold",
        "func": "// Check Temperature Thresholds\nif (msg.payload > 55) {\n    msg.payload = 1;\n    return msg;\n} else if (msg.payload < 50) {\n    msg.payload = 0; \n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 780,
        "wires": [
            [
                "acc853fc.ca286"
            ]
        ]
    },
    {
        "id": "d2a7959a.152ec8",
        "type": "trigger",
        "z": "3662f577.cb66ca",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 800,
        "y": 540,
        "wires": [
            [
                "5dea77e8.27fdb8"
            ]
        ]
    },
    {
        "id": "16daf62.c5d460a",
        "type": "comment",
        "z": "3662f577.cb66ca",
        "name": "Remote Reboot CMD - Esp32 Physical Reboot",
        "info": "",
        "x": 200,
        "y": 520,
        "wires": []
    },
    {
        "id": "1d10eb9e.986014",
        "type": "mqtt in",
        "z": "3662f577.cb66ca",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/APM/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "dba358e0.ff7ca8",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "b3383f5e.d7b2f"
            ]
        ]
    },
    {
        "id": "b3383f5e.d7b2f",
        "type": "function",
        "z": "3662f577.cb66ca",
        "name": "Check Server macAddr",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar msg1 = {payload: \"*\", topic: \"MONICON-PLC/CMD/APM/\" + msg.payload};\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"PLC Reboot was Successful.\"\n\nreturn [msg, msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 560,
        "wires": [
            [
                "d2a7959a.152ec8"
            ],
            [
                "5dc6c166.cc368"
            ]
        ]
    },
    {
        "id": "5dea77e8.27fdb8",
        "type": "link out",
        "z": "3662f577.cb66ca",
        "name": "",
        "links": [
            "f51711e.b9c1bf"
        ],
        "x": 1015,
        "y": 540,
        "wires": []
    },
    {
        "id": "5dc6c166.cc368",
        "type": "mqtt out",
        "z": "3662f577.cb66ca",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "dba358e0.ff7ca8",
        "x": 810,
        "y": 580,
        "wires": []
    },
    {
        "id": "186ac431.747a9c",
        "type": "function",
        "z": "c9ba8bcf.e8f3d8",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "d29e06c9.23f398"
            ]
        ]
    },
    {
        "id": "18db52bb.d60f1d",
        "type": "function",
        "z": "c9ba8bcf.e8f3d8",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 240,
        "wires": [
            [
                "b8efa0b8.594"
            ]
        ]
    },
    {
        "id": "1482ce29.522f22",
        "type": "function",
        "z": "c9ba8bcf.e8f3d8",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 180,
        "wires": [
            [
                "5e8ee360.eb8a5c"
            ]
        ]
    },
    {
        "id": "3f864068.802f7",
        "type": "function",
        "z": "3662f577.cb66ca",
        "name": "Set Server Version",
        "func": "// eg. \"MONICON-PLC_ServerV0.1.1\"\nglobal.set(\"serverVersion\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 80,
        "wires": [
            [
                "9b6e286c.8a5198"
            ]
        ]
    },
    {
        "id": "92fae174.69fa8",
        "type": "function",
        "z": "3662f577.cb66ca",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nreturn\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 970,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "9b6e286c.8a5198",
        "type": "exec",
        "z": "3662f577.cb66ca",
        "command": "cat /sys/class/net/eth0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 770,
        "y": 80,
        "wires": [
            [
                "92fae174.69fa8"
            ],
            [],
            []
        ]
    },
    {
        "id": "b3f69175.10c27",
        "type": "link out",
        "z": "21abc26.2e8053e",
        "name": "",
        "links": [
            "7d7db299.61b9cc"
        ],
        "x": 835,
        "y": 460,
        "wires": []
    },
    {
        "id": "3833a222.1deb0e",
        "type": "function",
        "z": "21abc26.2e8053e",
        "name": "Remote Database",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tSystem: \"macAddr\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tmacAddr: \"\\\"\" + msg.payload + \"\\\"\"\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 760,
        "wires": [
            [
                "c120b570.f7e308"
            ]
        ]
    },
    {
        "id": "3ebebf6b.b8d4e",
        "type": "debug",
        "z": "15d13c44.3d0d04",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 140,
        "wires": []
    },
    {
        "id": "e421cfc5.7581b",
        "type": "rpi-gpio out",
        "z": "f6c2b479.af6bc8",
        "name": "SIXFAB HAT POWER PIN - GPIO26",
        "pin": "37",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 770,
        "y": 960,
        "wires": []
    },
    {
        "id": "e54e0a7f.bce138",
        "type": "http request",
        "z": "f6c2b479.af6bc8",
        "name": "Internet Check",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://gogle.com",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 280,
        "y": 900,
        "wires": [
            [
                "73aedc27.e42404"
            ]
        ]
    },
    {
        "id": "854b0f08.c4496",
        "type": "inject",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 110,
        "y": 900,
        "wires": [
            [
                "e54e0a7f.bce138"
            ]
        ]
    },
    {
        "id": "73aedc27.e42404",
        "type": "function",
        "z": "f6c2b479.af6bc8",
        "name": "Reset SIXFAB HAT",
        "func": "if(msg.statusCode != 200) {\n    msg.payload = 1;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 900,
        "wires": [
            [
                "e421cfc5.7581b",
                "6d8d9d1f.cff044"
            ]
        ]
    },
    {
        "id": "684d355f.fb1d0c",
        "type": "exec",
        "z": "f6c2b479.af6bc8",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Reboot",
        "x": 1180,
        "y": 900,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "8a5e67a0.239d38",
        "type": "comment",
        "z": "f6c2b479.af6bc8",
        "name": "Check Internet Connection every Hour",
        "info": "",
        "x": 190,
        "y": 860,
        "wires": []
    },
    {
        "id": "6d8d9d1f.cff044",
        "type": "delay",
        "z": "f6c2b479.af6bc8",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 680,
        "y": 900,
        "wires": [
            [
                "5b24e57a.93b32c"
            ]
        ]
    },
    {
        "id": "5b24e57a.93b32c",
        "type": "exec",
        "z": "f6c2b479.af6bc8",
        "command": "echo '1-1' |sudo tee /sys/bus/usb/drivers/usb/unbind",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Unbind",
        "x": 860,
        "y": 900,
        "wires": [
            [
                "1995e45f.5f790c"
            ],
            [],
            []
        ]
    },
    {
        "id": "1995e45f.5f790c",
        "type": "exec",
        "z": "f6c2b479.af6bc8",
        "command": "echo '1-1' |sudo tee /sys/bus/usb/drivers/usb/bind",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Bind",
        "x": 1010,
        "y": 900,
        "wires": [
            [
                "684d355f.fb1d0c"
            ],
            [],
            []
        ]
    },
    {
        "id": "af3069db.5362d8",
        "type": "comment",
        "z": "f6c2b479.af6bc8",
        "name": "Safe Shutdown - Button Input",
        "info": "",
        "x": 160,
        "y": 380,
        "wires": []
    },
    {
        "id": "b2fdaa08.fdfc38",
        "type": "inject",
        "z": "f6c2b479.af6bc8",
        "name": "Check Heartbeat else Reboot",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 190,
        "y": 420,
        "wires": [
            [
                "a7848b74.eb0848"
            ]
        ]
    },
    {
        "id": "a7848b74.eb0848",
        "type": "function",
        "z": "f6c2b479.af6bc8",
        "name": "Formatting",
        "func": "var HB = flow.get(\"PLC_Heartbeat\");\nif (HB === \"1\") {\n    flow.set(\"PLC_Heartbeat\", \"0\");\n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 770,
        "y": 420,
        "wires": [
            [
                "3085ba4c.c89d86"
            ]
        ]
    },
    {
        "id": "3085ba4c.c89d86",
        "type": "exec",
        "z": "f6c2b479.af6bc8",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Shutdown Pi",
        "x": 1190,
        "y": 420,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "925a8aa3.71f558",
        "type": "inject",
        "z": "9f7a128a.8cc8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 360,
        "wires": [
            [
                "f1060520.128dc8"
            ]
        ]
    },
    {
        "id": "f1060520.128dc8",
        "type": "function",
        "z": "9f7a128a.8cc8",
        "name": "Dumy Email",
        "func": "msg = {\n    payload: \"48hr activity notification email.\",\n    topic: \"Ignore\",\n    to: \"monicon.sess@gmail.com\",\n    cc: \"\",\n    bcc: \"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 360,
        "wires": [
            [
                "14ff54f0.32d69b"
            ]
        ]
    },
    {
        "id": "14ff54f0.32d69b",
        "type": "e-mail",
        "z": "9f7a128a.8cc8",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "monicon.sess@gmail.com",
        "x": 940,
        "y": 160,
        "wires": []
    }
]