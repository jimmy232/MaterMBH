[
    {
        "id": "0d3283ba57e6c368",
        "type": "tab",
        "label": "Digitals",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e2b3520c307d3bfe",
        "type": "tab",
        "label": "Analog Alarms",
        "disabled": false,
        "info": ""
    },
    {
        "id": "bba4ebb662c3eeb3",
        "type": "tab",
        "label": "Analog Scale",
        "disabled": false,
        "info": ""
    },
    {
        "id": "b40a40ace3c634ef",
        "type": "tab",
        "label": "Control Panel",
        "disabled": false,
        "info": ""
    },
    {
        "id": "574404df84e5165d",
        "type": "tab",
        "label": "DB Connections",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8cfd17e4b664a97b",
        "type": "tab",
        "label": "OS",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7e5ef631b5914f07",
        "type": "tab",
        "label": "System",
        "disabled": false,
        "info": ""
    },
    {
        "id": "72cbff9b58da3b22",
        "type": "tab",
        "label": "Firmware",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1e6e2a7814f49052",
        "type": "tab",
        "label": "Remote",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d39e2b8c53590482",
        "type": "tab",
        "label": "Accumulators",
        "disabled": false,
        "info": ""
    },
    {
        "id": "1f21503adee6eb9d",
        "type": "tab",
        "label": "IO Control",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e7f314431ced4df1",
        "type": "tab",
        "label": "Timers",
        "disabled": false,
        "info": ""
    },
    {
        "id": "69e94d4e8116b018",
        "type": "tab",
        "label": "OMRON",
        "disabled": false,
        "info": ""
    },
    {
        "id": "da535876.280af8",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "",
        "host": "us-central1-1.gcp.cloud2.influxdata.com",
        "port": "443",
        "tls": true
    },
    {
        "id": "4d64fa3d.ad0334",
        "type": "mqtt-broker",
        "name": "",
        "broker": "driver.cloudmqtt.com",
        "port": "18748",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "7e73cdd4.e0b814",
        "type": "tls-config",
        "name": "local-tls",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "https://us-central1-1.gcp.cloud2.influxdata.com",
        "verifyservercert": true
    },
    {
        "id": "5fca9504.17508c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": ""
    },
    {
        "id": "1e88062a.770d7a",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "dba358e0.ff7ca8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": ""
    },
    {
        "id": "d508e07e.f4bc",
        "type": "modbus-client",
        "name": "LOCAL MODBUS SERVER",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "192.168.1.222",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "996e483573dc275b",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8086",
        "protocol": "http",
        "database": "monicon_sess",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "cf8a3eb46e5c3bb7",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.35:4840",
        "secpol": "None",
        "secmode": "None",
        "none": false,
        "login": true,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "63f05b9914ac52f6",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_00/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "1890cf7ef5d27975",
                "b3b52c99fba614b5",
                "9e7ad834c869136b"
            ]
        ]
    },
    {
        "id": "9843068976cb7ce7",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_01/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 140,
        "wires": [
            [
                "1890cf7ef5d27975",
                "b3b52c99fba614b5",
                "9e7ad834c869136b"
            ]
        ]
    },
    {
        "id": "d1f1c080bc69e5f0",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_02/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 200,
        "wires": [
            [
                "1890cf7ef5d27975",
                "b3b52c99fba614b5",
                "9e7ad834c869136b"
            ]
        ]
    },
    {
        "id": "ad33324dde0ad679",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_03/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 260,
        "wires": [
            [
                "1890cf7ef5d27975",
                "b3b52c99fba614b5",
                "9e7ad834c869136b"
            ]
        ]
    },
    {
        "id": "2240ade87ca99425",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_04/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 320,
        "wires": [
            [
                "1890cf7ef5d27975",
                "b3b52c99fba614b5",
                "9e7ad834c869136b"
            ]
        ]
    },
    {
        "id": "3f95f0ba26312da9",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_05/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 380,
        "wires": [
            [
                "1890cf7ef5d27975",
                "b3b52c99fba614b5",
                "9e7ad834c869136b"
            ]
        ]
    },
    {
        "id": "501f320f34d88f44",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_06/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 440,
        "wires": [
            [
                "1890cf7ef5d27975",
                "b3b52c99fba614b5",
                "9e7ad834c869136b"
            ]
        ]
    },
    {
        "id": "20fa51e32ec38b8f",
        "type": "comment",
        "z": "0d3283ba57e6c368",
        "name": "Digital Input - Request",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "1890cf7ef5d27975",
        "type": "function",
        "z": "0d3283ba57e6c368",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 80,
        "wires": [
            [
                "8dfec6f35857111a"
            ]
        ]
    },
    {
        "id": "8dfec6f35857111a",
        "type": "link out",
        "z": "0d3283ba57e6c368",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 795,
        "y": 80,
        "wires": []
    },
    {
        "id": "9460d5761065eba8",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalOutputStatus/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 580,
        "wires": [
            [
                "639d40b1359bcfc0",
                "602059b5d36daba2",
                "19df174089d2fcb8"
            ]
        ]
    },
    {
        "id": "416d77d2a0623d33",
        "type": "comment",
        "z": "0d3283ba57e6c368",
        "name": "Digital Output Status",
        "info": "",
        "x": 110,
        "y": 540,
        "wires": []
    },
    {
        "id": "639d40b1359bcfc0",
        "type": "function",
        "z": "0d3283ba57e6c368",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 580,
        "wires": [
            [
                "d509e25f2215d8bc"
            ]
        ]
    },
    {
        "id": "d509e25f2215d8bc",
        "type": "link out",
        "z": "0d3283ba57e6c368",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 795,
        "y": 580,
        "wires": []
    },
    {
        "id": "b1fd8928b8777d76",
        "type": "inject",
        "z": "0d3283ba57e6c368",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0,1",
        "payloadType": "str",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "3618212f511dfbd6",
                "a4368d3d123417f6"
            ]
        ]
    },
    {
        "id": "3618212f511dfbd6",
        "type": "mqtt out",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/CMD/pubDigitalInputsEnable/4164319659",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 630,
        "y": 860,
        "wires": []
    },
    {
        "id": "2515725e0b174a59",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_00/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 1280,
        "y": 80,
        "wires": [
            [
                "328b9251664edb63",
                "d29c07f10b507ffd",
                "1c2b2f5c2cb9e544"
            ]
        ]
    },
    {
        "id": "a13c273501a23375",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_01/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 1280,
        "y": 140,
        "wires": [
            [
                "328b9251664edb63",
                "d29c07f10b507ffd",
                "1c2b2f5c2cb9e544"
            ]
        ]
    },
    {
        "id": "4cebf8db06e57462",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_02/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 1280,
        "y": 200,
        "wires": [
            [
                "328b9251664edb63",
                "d29c07f10b507ffd",
                "1c2b2f5c2cb9e544"
            ]
        ]
    },
    {
        "id": "5e3febaf21c6ed29",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_03/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 1280,
        "y": 260,
        "wires": [
            [
                "328b9251664edb63",
                "d29c07f10b507ffd",
                "1c2b2f5c2cb9e544"
            ]
        ]
    },
    {
        "id": "32646f10fd27eabb",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_04/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 1280,
        "y": 320,
        "wires": [
            [
                "328b9251664edb63",
                "d29c07f10b507ffd",
                "1c2b2f5c2cb9e544"
            ]
        ]
    },
    {
        "id": "5bd9eac5207f723e",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_05/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 1280,
        "y": 380,
        "wires": [
            [
                "328b9251664edb63",
                "d29c07f10b507ffd",
                "1c2b2f5c2cb9e544"
            ]
        ]
    },
    {
        "id": "a3f2bc66912c5cf9",
        "type": "mqtt in",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_06/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 1280,
        "y": 440,
        "wires": [
            [
                "328b9251664edb63",
                "d29c07f10b507ffd",
                "1c2b2f5c2cb9e544"
            ]
        ]
    },
    {
        "id": "5695ae8c75ebca62",
        "type": "comment",
        "z": "0d3283ba57e6c368",
        "name": "Digital Input - Status Change",
        "info": "",
        "x": 1220,
        "y": 40,
        "wires": []
    },
    {
        "id": "328b9251664edb63",
        "type": "function",
        "z": "0d3283ba57e6c368",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nmsg.topic = msg.topic.replace(\"DigitalInputStatus\", \"DigitalInputs\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 80,
        "wires": [
            [
                "1608f574c3b1e0aa"
            ]
        ]
    },
    {
        "id": "1608f574c3b1e0aa",
        "type": "link out",
        "z": "0d3283ba57e6c368",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 1875,
        "y": 80,
        "wires": []
    },
    {
        "id": "a4368d3d123417f6",
        "type": "mqtt out",
        "z": "0d3283ba57e6c368",
        "name": "",
        "topic": "MONICON-PLC/CMD/pubDigitalInputsEnable/1010989483",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 630,
        "y": 800,
        "wires": []
    },
    {
        "id": "f690ae54f0fcc666",
        "type": "comment",
        "z": "0d3283ba57e6c368",
        "name": "Enable Digital Status Change Publishing",
        "info": "",
        "x": 180,
        "y": 760,
        "wires": []
    },
    {
        "id": "19df174089d2fcb8",
        "type": "function",
        "z": "0d3283ba57e6c368",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[3]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tDigital_00: parseFloat(output[0]),\n\t\t\t\tDigital_01: parseFloat(output[1]),\n\t\t\t\tDigital_02: parseFloat(output[2])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 660,
        "wires": [
            [
                "a1073eb0f47ce931"
            ]
        ]
    },
    {
        "id": "602059b5d36daba2",
        "type": "function",
        "z": "0d3283ba57e6c368",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\tDigitalOutput_00: parseFloat(output[0]),\n\t\t\tDigitalOutput_01: parseFloat(output[1]),\n\t\t\tDigitalOutput_02: parseFloat(output[2])\n\t\t},\n        tags:{\n            PLC: output[3] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 620,
        "wires": [
            [
                "111d3e2248aefc7a"
            ]
        ]
    },
    {
        "id": "111d3e2248aefc7a",
        "type": "link out",
        "z": "0d3283ba57e6c368",
        "name": "",
        "links": [
            "28040d237dcdb782"
        ],
        "x": 795,
        "y": 620,
        "wires": []
    },
    {
        "id": "a1073eb0f47ce931",
        "type": "link out",
        "z": "0d3283ba57e6c368",
        "name": "",
        "links": [
            "02028bbe0188b4ea"
        ],
        "x": 795,
        "y": 660,
        "wires": []
    },
    {
        "id": "e1beb63825b373b3",
        "type": "comment",
        "z": "0d3283ba57e6c368",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 940,
        "y": 580,
        "wires": []
    },
    {
        "id": "73ee6dd0a9958a18",
        "type": "comment",
        "z": "0d3283ba57e6c368",
        "name": "Database | Local",
        "info": "",
        "x": 900,
        "y": 620,
        "wires": []
    },
    {
        "id": "9f7f12f83946641b",
        "type": "comment",
        "z": "0d3283ba57e6c368",
        "name": "Database | Remote",
        "info": "",
        "x": 910,
        "y": 660,
        "wires": []
    },
    {
        "id": "1c2b2f5c2cb9e544",
        "type": "function",
        "z": "0d3283ba57e6c368",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[1]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1750,
        "y": 440,
        "wires": [
            [
                "ac8d93960c4d1a83"
            ]
        ]
    },
    {
        "id": "d29c07f10b507ffd",
        "type": "function",
        "z": "0d3283ba57e6c368",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            PLC: output[1] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 260,
        "wires": [
            [
                "9f0c0f90cbfaca4e"
            ]
        ]
    },
    {
        "id": "9f0c0f90cbfaca4e",
        "type": "link out",
        "z": "0d3283ba57e6c368",
        "name": "",
        "links": [
            "28040d237dcdb782"
        ],
        "x": 1875,
        "y": 260,
        "wires": []
    },
    {
        "id": "ac8d93960c4d1a83",
        "type": "link out",
        "z": "0d3283ba57e6c368",
        "name": "",
        "links": [
            "02028bbe0188b4ea"
        ],
        "x": 1875,
        "y": 440,
        "wires": []
    },
    {
        "id": "0dc1241e4b98b5e1",
        "type": "comment",
        "z": "0d3283ba57e6c368",
        "name": "Database | Local",
        "info": "",
        "x": 1980,
        "y": 260,
        "wires": []
    },
    {
        "id": "4721fc5a4a33bfc5",
        "type": "comment",
        "z": "0d3283ba57e6c368",
        "name": "Database | Remote",
        "info": "",
        "x": 1990,
        "y": 440,
        "wires": []
    },
    {
        "id": "d0d7c4af03a4556f",
        "type": "comment",
        "z": "0d3283ba57e6c368",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 2020,
        "y": 80,
        "wires": []
    },
    {
        "id": "b3b52c99fba614b5",
        "type": "function",
        "z": "0d3283ba57e6c368",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[1]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 440,
        "wires": [
            [
                "0c98684126735a36"
            ]
        ]
    },
    {
        "id": "9e7ad834c869136b",
        "type": "function",
        "z": "0d3283ba57e6c368",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            PLC: output[1] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 260,
        "wires": [
            [
                "7595f1ef8cef4b4a"
            ]
        ]
    },
    {
        "id": "7595f1ef8cef4b4a",
        "type": "link out",
        "z": "0d3283ba57e6c368",
        "name": "",
        "links": [
            "28040d237dcdb782"
        ],
        "x": 795,
        "y": 260,
        "wires": []
    },
    {
        "id": "0c98684126735a36",
        "type": "link out",
        "z": "0d3283ba57e6c368",
        "name": "",
        "links": [
            "02028bbe0188b4ea"
        ],
        "x": 795,
        "y": 440,
        "wires": []
    },
    {
        "id": "3872cbc891913864",
        "type": "comment",
        "z": "0d3283ba57e6c368",
        "name": "Database | Local",
        "info": "",
        "x": 900,
        "y": 260,
        "wires": []
    },
    {
        "id": "7e76315a1061f123",
        "type": "comment",
        "z": "0d3283ba57e6c368",
        "name": "Database | Remote",
        "info": "",
        "x": 910,
        "y": 440,
        "wires": []
    },
    {
        "id": "34a9ebee31a4bff7",
        "type": "comment",
        "z": "0d3283ba57e6c368",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 940,
        "y": 80,
        "wires": []
    },
    {
        "id": "99380de1e233ade8",
        "type": "mqtt in",
        "z": "e2b3520c307d3bfe",
        "name": "",
        "topic": "MONICON-PLC/Device/4n20_Flags/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 170,
        "y": 200,
        "wires": [
            [
                "a76e130bb52ec3c3",
                "acb560b337a669eb"
            ]
        ]
    },
    {
        "id": "b5f31f9bda78596e",
        "type": "mqtt in",
        "z": "e2b3520c307d3bfe",
        "name": "",
        "topic": "MONICON-PLC/Device/PT100_Flags/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 170,
        "y": 80,
        "wires": [
            [
                "500f01b97471ba27",
                "acb560b337a669eb"
            ]
        ]
    },
    {
        "id": "fb5fa02191991d5c",
        "type": "comment",
        "z": "e2b3520c307d3bfe",
        "name": "Analog Alarms 1st <8x PT100 LOW Alarms> | 2nd <8x PT100 HIGH Alarms>",
        "info": "",
        "x": 290,
        "y": 40,
        "wires": []
    },
    {
        "id": "38eaae4801a26611",
        "type": "mqtt in",
        "z": "e2b3520c307d3bfe",
        "name": "",
        "topic": "MONICON-PLC/Device/Alarm_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 170,
        "y": 420,
        "wires": [
            [
                "7f2a80d53222829f"
            ]
        ]
    },
    {
        "id": "ed4d1bc89c46fb95",
        "type": "mqtt in",
        "z": "e2b3520c307d3bfe",
        "name": "",
        "topic": "MONICON-PLC/Device/Alarm_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 170,
        "y": 340,
        "wires": [
            [
                "7f2a80d53222829f"
            ]
        ]
    },
    {
        "id": "bd4caab0bdae220d",
        "type": "comment",
        "z": "e2b3520c307d3bfe",
        "name": "4n20mA Low Alarm - Rising Edge Trigger | <AI-ID> | <Limit-Type> | <Equip-Name>",
        "info": "",
        "x": 310,
        "y": 300,
        "wires": []
    },
    {
        "id": "500f01b97471ba27",
        "type": "link out",
        "z": "e2b3520c307d3bfe",
        "name": "L-PT100-ALM_FLAGS",
        "links": [
            "3184a127.75ebfe",
            "a10bac4a.3ef4b",
            "b4007e9b.4946c"
        ],
        "x": 475,
        "y": 80,
        "wires": []
    },
    {
        "id": "a76e130bb52ec3c3",
        "type": "link out",
        "z": "e2b3520c307d3bfe",
        "name": "L-4n20-ALM_FLAGS",
        "links": [
            "35875a5a.263686"
        ],
        "x": 475,
        "y": 200,
        "wires": []
    },
    {
        "id": "acb560b337a669eb",
        "type": "function",
        "z": "e2b3520c307d3bfe",
        "name": "Check MQTT Timer Enable",
        "func": "var AlarmTimer = global.get(\"AlarmTimer\") || \"0\";\nif(AlarmTimer == \"1\")\n{\nmsg.topic = msg.topic.replace(\"Device\", \"STAT\");\n    msg.topic = \"sess/\" + msg.topic;\n    return msg;\n} else {\n    return;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 140,
        "wires": [
            [
                "d95a6e2ff7541696"
            ]
        ]
    },
    {
        "id": "0ed6c8b314e48047",
        "type": "mqtt in",
        "z": "e2b3520c307d3bfe",
        "name": "",
        "topic": "MONICON-PLC/STAT/Alarm_En_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 520,
        "wires": [
            [
                "7f2a80d53222829f"
            ]
        ]
    },
    {
        "id": "be0dd57d90664bd5",
        "type": "mqtt in",
        "z": "e2b3520c307d3bfe",
        "name": "",
        "topic": "MONICON-PLC/STAT/Alarm_En_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 600,
        "wires": [
            [
                "7f2a80d53222829f"
            ]
        ]
    },
    {
        "id": "7f2a80d53222829f",
        "type": "function",
        "z": "e2b3520c307d3bfe",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 560,
        "wires": [
            [
                "d95a6e2ff7541696"
            ]
        ]
    },
    {
        "id": "d95a6e2ff7541696",
        "type": "link out",
        "z": "e2b3520c307d3bfe",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 935,
        "y": 420,
        "wires": []
    },
    {
        "id": "d9660b3b3e8127b7",
        "type": "mqtt in",
        "z": "e2b3520c307d3bfe",
        "name": "",
        "topic": "MONICON-PLC/STAT/Thresholds_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 680,
        "wires": [
            [
                "06c7e97e09929bd4",
                "24734f716fd0ef2e"
            ]
        ]
    },
    {
        "id": "b8b7014c3e604527",
        "type": "mqtt in",
        "z": "e2b3520c307d3bfe",
        "name": "",
        "topic": "MONICON-PLC/STAT/Thresholds_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 800,
        "wires": [
            [
                "d87b658b0b44d969",
                "24734f716fd0ef2e"
            ]
        ]
    },
    {
        "id": "06c7e97e09929bd4",
        "type": "link out",
        "z": "e2b3520c307d3bfe",
        "name": "L-Thres_PT100-Para",
        "links": [],
        "x": 475,
        "y": 680,
        "wires": []
    },
    {
        "id": "d87b658b0b44d969",
        "type": "link out",
        "z": "e2b3520c307d3bfe",
        "name": "L-Thres_4n20-Para",
        "links": [
            "7010bf18.67104"
        ],
        "x": 475,
        "y": 800,
        "wires": []
    },
    {
        "id": "24734f716fd0ef2e",
        "type": "function",
        "z": "e2b3520c307d3bfe",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 740,
        "wires": [
            [
                "d95a6e2ff7541696"
            ]
        ]
    },
    {
        "id": "dd35515d5cdc8011",
        "type": "mqtt in",
        "z": "bba4ebb662c3eeb3",
        "name": "",
        "topic": "MONICON-PLC/Device/AI_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 160,
        "y": 80,
        "wires": [
            [
                "a1c721091c9edde4",
                "38623145144d639f"
            ]
        ]
    },
    {
        "id": "5702f5f92f06668d",
        "type": "mqtt in",
        "z": "bba4ebb662c3eeb3",
        "name": "",
        "topic": "MONICON-PLC/Device/AI_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 160,
        "y": 160,
        "wires": [
            [
                "2796b83b4838f721",
                "38623145144d639f"
            ]
        ]
    },
    {
        "id": "a1c721091c9edde4",
        "type": "link out",
        "z": "bba4ebb662c3eeb3",
        "name": "L-OUT-AI_4n20",
        "links": [
            "311cc9da.295866",
            "3e649a44.6ae766",
            "4f7001d1b1b81a11",
            "fb825d88.14935",
            "e4b05cb6.755b4",
            "61980d7c.a4f6f4",
            "88c2d23c.6ec84"
        ],
        "x": 655,
        "y": 80,
        "wires": []
    },
    {
        "id": "2796b83b4838f721",
        "type": "link out",
        "z": "bba4ebb662c3eeb3",
        "name": "L-OUT-AI_PT100",
        "links": [
            "d40653c7.effc4",
            "643482b2e528c821",
            "86a52f8.d751fd",
            "809e3c8c.14b8c",
            "88c2d23c.6ec84"
        ],
        "x": 655,
        "y": 160,
        "wires": []
    },
    {
        "id": "38623145144d639f",
        "type": "function",
        "z": "bba4ebb662c3eeb3",
        "name": "Check MQTT Timer Enable",
        "func": "var AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(AnalogTimer == \"1\")\n{\nmsg.topic = msg.topic.replace(\"Device\", \"STAT\");\n    msg.topic = \"sess/\" + msg.topic;\n    return msg;\n} else {\n    return;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 120,
        "wires": [
            [
                "bea294b11657b048"
            ]
        ]
    },
    {
        "id": "f0521e6f7eb9a45a",
        "type": "mqtt in",
        "z": "bba4ebb662c3eeb3",
        "name": "",
        "topic": "MONICON-PLC/STAT/Scale_Single_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 300,
        "wires": [
            [
                "8c1f04a70826764b"
            ]
        ]
    },
    {
        "id": "8c010a782be77812",
        "type": "mqtt in",
        "z": "bba4ebb662c3eeb3",
        "name": "",
        "topic": "MONICON-PLC/STAT/Scale_Single_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 380,
        "wires": [
            [
                "8c1f04a70826764b"
            ]
        ]
    },
    {
        "id": "6a7f481c28885ea1",
        "type": "comment",
        "z": "bba4ebb662c3eeb3",
        "name": "Scale Parameters",
        "info": "",
        "x": 110,
        "y": 260,
        "wires": []
    },
    {
        "id": "e0891dbded933046",
        "type": "comment",
        "z": "bba4ebb662c3eeb3",
        "name": "Analog Input Values",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "8c1f04a70826764b",
        "type": "function",
        "z": "bba4ebb662c3eeb3",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 340,
        "wires": [
            [
                "bea294b11657b048"
            ]
        ]
    },
    {
        "id": "bea294b11657b048",
        "type": "link out",
        "z": "bba4ebb662c3eeb3",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 835,
        "y": 240,
        "wires": []
    },
    {
        "id": "b172860771f041e1",
        "type": "mqtt in",
        "z": "bba4ebb662c3eeb3",
        "name": "",
        "topic": "MONICON-PLC/STAT/CaliPub_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 170,
        "y": 500,
        "wires": [
            [
                "00b871644f4c707a"
            ]
        ]
    },
    {
        "id": "f15d9cc5b7de5474",
        "type": "mqtt in",
        "z": "bba4ebb662c3eeb3",
        "name": "",
        "topic": "MONICON-PLC/STAT/CaliPub_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 580,
        "wires": [
            [
                "00b871644f4c707a"
            ]
        ]
    },
    {
        "id": "12887b4fa5a3d154",
        "type": "comment",
        "z": "bba4ebb662c3eeb3",
        "name": "Scale Parameters",
        "info": "",
        "x": 110,
        "y": 460,
        "wires": []
    },
    {
        "id": "00b871644f4c707a",
        "type": "function",
        "z": "bba4ebb662c3eeb3",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 540,
        "wires": [
            [
                "bea294b11657b048"
            ]
        ]
    },
    {
        "id": "5c7836fd9e7dbda9",
        "type": "comment",
        "z": "b40a40ace3c634ef",
        "name": "Send Email Notification",
        "info": "",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "244047f4b6ba6171",
        "type": "link in",
        "z": "b40a40ace3c634ef",
        "name": "",
        "links": [
            "356d9b5a.3c3144"
        ],
        "x": 75,
        "y": 120,
        "wires": [
            [
                "cc07ade746c495aa"
            ]
        ]
    },
    {
        "id": "308261136319cd79",
        "type": "comment",
        "z": "b40a40ace3c634ef",
        "name": "Alarm PT100",
        "info": "",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "036d0c1bfb08f28a",
        "type": "comment",
        "z": "b40a40ace3c634ef",
        "name": "Alarm 4n20",
        "info": "",
        "x": 110,
        "y": 180,
        "wires": []
    },
    {
        "id": "b09a179d3fcbead5",
        "type": "link in",
        "z": "b40a40ace3c634ef",
        "name": "",
        "links": [
            "d6eb1a78.b65638"
        ],
        "x": 75,
        "y": 240,
        "wires": [
            [
                "2eb8cee336f41e9b"
            ]
        ]
    },
    {
        "id": "cc07ade746c495aa",
        "type": "function",
        "z": "b40a40ace3c634ef",
        "name": "Email Setup - PT100 Alarms",
        "func": "/*\ndata[0] = PIN_ID\ndata[1] = Alarm Status\ndata[2] = PV\ndata[3] = Threshold Parameter\ndata[4] = Equipment ID\ndata[5] = Software Version\n\ntopic[0] = PLC_ID\ntopic[1] = CMD\ntopic[2] = Subject\ntopic[3] = Serial_ID\n*/\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nlet subjectMSg_PT100 = global.get(\"subjectMSg_PT100\") || \"null\";                    //String\nlet bodyMSg_PT100 = global.get(\"bodyMSg_PT100\") || \"null\";                          //String\nlet addrTo_PT100 = global.get(\"addrTo_PT100\") || \"monicon.sess@gmail.com\";                            //String\nlet addrCc_PT100 = global.get(\"addrCc_PT100\") || \"\";                            //Strng\nlet addrBcc_PT100 = global.get(\"addrBcc_PT100\") || \"\";                          //String\nlet subjectParameters_PT100 = global.get(\"subjectParameters_PT100\") || \"null\";      //String of bools\nlet bodyParameters_PT100 = global.get(\"bodyParameters_PT100\") || \"null\";            //String of bools\n\n// Data splitting\nvar data = msg.payload.split(',')\nvar topic = msg.topic.split('/')\nlet subPara = subjectParameters_PT100.split('=');\nlet bodyPara = bodyParameters_PT100.split('=');\n\n// Subject Concatenation\nvar subject = subjectMSg_PT100;\nsubject += subPara[5] == \"1\" ? \" | Sensor Type - PT100 Alm\" : \"\";\nsubject += subPara[4] == \"1\" ? \" | Alarm Status - \" + data[1] : \"\";\nsubject += subPara[1] == \"1\" ? \" | Analog No. - \" + data[0] : \"\";\nsubject += subPara[2] == \"1\" ? \" | Site ID - \" + siteID : \"\";\nsubject += subPara[3] == \"1\" ? \" | Equipment ID - \" + data[4] : \"\";\nsubject += subPara[0] == \"1\" ? \" | Date & Time - \" + Date().toString() : \"\";\n\n// Subject Concatenation\nvar body = bodyMSg_PT100 + \"\\n\";\nbody += bodyPara[0] == \"1\" ? \"\\nDate & Time -\\t \" + Date().toString() : \"\";\nbody += bodyPara[5] == \"1\" ? \"\\nSensor Type -\\t PT100 Alm\" : \"\";\nbody += bodyPara[4] == \"1\" ? \"\\nAlarm Status -\\t \" + data[1] : \"\";\nbody += bodyPara[1] == \"1\" ? \"\\nAnalog No. -\\t \" + data[0] : \"\";\nbody += bodyPara[2] == \"1\" ? \"\\nSite ID -\\t \" + siteID : \"\";\nbody += bodyPara[3] == \"1\" ? \"\\nEquipment ID -\\t \" + data[4] : \"\";\nbody += bodyPara[9] == \"1\" ? \"\\nProcess Value -\\t \" + data[2] : \"\";\nbody += bodyPara[6] == \"1\" ? \"\\nThreshold Parameter -\\t \" + data[3] : \"\";\nbody += bodyPara[7] == \"1\" ? \"\\nSerial No. -\\t \" + topic[3] : \"\";\nbody += bodyPara[8] == \"1\" ? \"\\nSoftware Version -\\t \" + data[5] : \"\";\n\n// New Email Message\nmsg = {\n    payload: body,\n    topic: subject,\n    to: addrTo_PT100,\n    cc: addrCc_PT100,\n    bcc: addrBcc_PT100\n}\n\n// Old Email Message\n// msg = {\n//     payload : \"PT100 Alarm has been triggered.\\n\" +\n//     \"Equipment ID[\" + data[4] + \"]\\n\" + \n//     \"PT100 Sensor - AI[\" + data[0] + \"]\\n\" +\n//     \"Alarm Status[\" + data[1] +\"]\\n\" +\n//     \"Timestamp[\" + Date().toString() + \"]\" + \n//     \"Site_BS001\\n\" +\n//     \"AI Process Value[\" + data[2] + \"]\\n\" +\n//     \"Threshold Parameter[\" + data[3] + \"]\\n\" + \n//     \"Equipment ID[\" + data[4] + \"]\\n\\n\" +\n//     \"PLC_Model[\" + topic[0] + \"]\\n\" + \n//     \"Command Header[\" + topic[1] + \"]\\n\" +\n//     \"Command Subject[\" + topic[2] + \"]\\n\" +\n//     \"Device Serial No.[\" + topic[3] + \"]\\n\\n\" , // Body\n//     topic : \"Alarm Notification | PT100 Sensor - AI[\" + data[0] + \"] | Status[\" + data[1] +\"] | \" + \"Timestamp[\" + Date().toString() + \"]\", //Subject\n//     to : \"monicon.sess@gmail.com\",\n//     bcc : \"monicon.sys@gmail.com\"\n// };\n\nreturn msg;\n\n// let parameters = msg.payload.split('+');\n\n// if (parameters[5] == \"1\") // PT100 Configuration Parameters\n// {\n//     global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n//     global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n//     global.set(\"addrTo_PT100\", parameters[2]);                //String\n//     global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_PT100\", parameters[4]);               //String\n//     global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n// } else {\n//     global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n//     global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n//     global.set(\"addrTo_4n20\", parameters[2]);                //String\n//     global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_4n20\", parameters[4]);               //String\n//     global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "2eb8cee336f41e9b",
        "type": "function",
        "z": "b40a40ace3c634ef",
        "name": "Email Setup - 4..20mA Alarms",
        "func": "/*\ndata[0] = PIN_ID\ndata[1] = Alarm Status\ndata[2] = PV\ndata[3] = Threshold Parameter\ndata[4] = Equipment ID\ndata[5] = Software Version\n\ntopic[0] = PLC_ID\ntopic[1] = CMD\ntopic[2] = Subject\ntopic[3] = Serial_ID\n*/\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nlet subjectMSg_4n20 = global.get(\"subjectMSg_4n20\") || \"null\";                    //String\nlet bodyMSg_4n20 = global.get(\"bodyMSg_4n20\") || \"null\";                          //String\nlet addrTo_4n20 = global.get(\"addrTo_4n20\") || \"monicon.sess@gmail.com\";                            //String\nlet addrCc_4n20 = global.get(\"addrCc_4n20\") || \"\";                            //Strng\nlet addrBcc_4n20 = global.get(\"addrBcc_4n20\") || \"\";                          //String\nlet subjectParameters_4n20 = global.get(\"subjectParameters_4n20\") || \"null\";      //String of bools\nlet bodyParameters_4n20 = global.get(\"bodyParameters_4n20\") || \"null\";            //String of bools\n\n// Data splitting\nvar data = msg.payload.split(',')\nvar topic = msg.topic.split('/')\nlet subPara = subjectParameters_4n20.split('=');\nlet bodyPara = bodyParameters_4n20.split('=');\n\n// Subject Concatenation\nvar subject = subjectMSg_4n20;\nsubject += subPara[5] == \"1\" ? \" | Sensor Type - 4n20 Alm\" : \"\";\nsubject += subPara[4] == \"1\" ? \" | Alarm Status - \" + data[1] : \"\";\nsubject += subPara[1] == \"1\" ? \" | Analog No. - \" + data[0] : \"\";\nsubject += subPara[2] == \"1\" ? \" | Site ID - \" + siteID : \"\";\nsubject += subPara[3] == \"1\" ? \" | Equipment ID - \" + data[4] : \"\";\nsubject += subPara[0] == \"1\" ? \" | Date & Time - \" + Date().toString() : \"\";\n\n// Subject Concatenation\nvar body = bodyMSg_4n20 + \"\\n\";\nbody += bodyPara[0] == \"1\" ? \"\\nDate & Time -\\t \" + Date().toString() : \"\";\nbody += bodyPara[5] == \"1\" ? \"\\nSensor Type -\\t 4n20 Alm\" : \"\";\nbody += bodyPara[4] == \"1\" ? \"\\nAlarm Status -\\t \" + data[1] : \"\";\nbody += bodyPara[1] == \"1\" ? \"\\nAnalog No. -\\t \" + data[0] : \"\";\nbody += bodyPara[2] == \"1\" ? \"\\nSite ID -\\t \" + siteID : \"\";\nbody += bodyPara[3] == \"1\" ? \"\\nEquipment ID -\\t \" + data[4] : \"\";\nbody += bodyPara[9] == \"1\" ? \"\\nProcess Value -\\t \" + data[2] : \"\";\nbody += bodyPara[6] == \"1\" ? \"\\nThreshold Parameter -\\t \" + data[3] : \"\";\nbody += bodyPara[7] == \"1\" ? \"\\nSerial No. -\\t \" + topic[3] : \"\";\nbody += bodyPara[8] == \"1\" ? \"\\nSoftware Version -\\t \" + data[5] : \"\";\n\n// New Email Message\nmsg = {\n    payload: body,\n    topic: subject,\n    to: addrTo_4n20,\n    cc: addrCc_4n20,\n    bcc: addrBcc_4n20\n}\n\n// Old Email Message\n// msg = {\n//     payload : \"PT100 Alarm has been triggered.\\n\" +\n//     \"Equipment ID[\" + data[4] + \"]\\n\" + \n//     \"PT100 Sensor - AI[\" + data[0] + \"]\\n\" +\n//     \"Alarm Status[\" + data[1] +\"]\\n\" +\n//     \"Timestamp[\" + Date().toString() + \"]\" + \n//     \"Site_BS001\\n\" +\n//     \"AI Process Value[\" + data[2] + \"]\\n\" +\n//     \"Threshold Parameter[\" + data[3] + \"]\\n\" + \n//     \"Equipment ID[\" + data[4] + \"]\\n\\n\" +\n//     \"PLC_Model[\" + topic[0] + \"]\\n\" + \n//     \"Command Header[\" + topic[1] + \"]\\n\" +\n//     \"Command Subject[\" + topic[2] + \"]\\n\" +\n//     \"Device Serial No.[\" + topic[3] + \"]\\n\\n\" , // Body\n//     topic : \"Alarm Notification | PT100 Sensor - AI[\" + data[0] + \"] | Status[\" + data[1] +\"] | \" + \"Timestamp[\" + Date().toString() + \"]\", //Subject\n//     to : \"monicon.sess@gmail.com\",\n//     bcc : \"monicon.sys@gmail.com\"\n// };\n\nreturn msg;\n\n// let parameters = msg.payload.split('+');\n\n// if (parameters[5] == \"1\") // PT100 Configuration Parameters\n// {\n//     global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n//     global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n//     global.set(\"addrTo_PT100\", parameters[2]);                //String\n//     global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_PT100\", parameters[4]);               //String\n//     global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n// } else {\n//     global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n//     global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n//     global.set(\"addrTo_4n20\", parameters[2]);                //String\n//     global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_4n20\", parameters[4]);               //String\n//     global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "fd351573577b10fd",
        "type": "inject",
        "z": "b40a40ace3c634ef",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 360,
        "wires": [
            [
                "94af8c67811e92d0"
            ]
        ]
    },
    {
        "id": "94af8c67811e92d0",
        "type": "function",
        "z": "b40a40ace3c634ef",
        "name": "Dumy Email",
        "func": "msg = {\n    payload: \"48hr activity notification email.\",\n    topic: \"Ignore\",\n    to: \"monicon.sess@gmail.com\",\n    cc: \"\",\n    bcc: \"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "fc219f542f4a674e",
        "type": "inject",
        "z": "574404df84e5165d",
        "name": "Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "57b768090959fb16",
        "type": "inject",
        "z": "574404df84e5165d",
        "name": "Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "9d7df095a73f4c99",
        "type": "comment",
        "z": "574404df84e5165d",
        "name": "RESET DATABASES",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "1b2307688235414a",
        "type": "comment",
        "z": "574404df84e5165d",
        "name": "CREATES DATABASES",
        "info": "",
        "x": 130,
        "y": 260,
        "wires": []
    },
    {
        "id": "d1e788d4afbaf406",
        "type": "comment",
        "z": "574404df84e5165d",
        "name": "PT100 Analog Signals",
        "info": "",
        "x": 120,
        "y": 500,
        "wires": []
    },
    {
        "id": "b72c7a254f599133",
        "type": "function",
        "z": "574404df84e5165d",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n/*\noutput[0] = AI-0 // PT100\noutput[1] = AI-1 // PT100\noutput[2] = AI-2 // PT100\noutput[3] = AI-3 // PT100\noutput[4] = AI-4 // 4..20mA\noutput[5] = AI-5 // 4..20mA\noutput[6] = AI-6 // 4..20mA\noutput[7] = AI-7 // 4..20mA \noutput[8] = Device ID\noutput[9] = Location \n*/\n\n// Lighting\n//if (output.length > 4) {\n//    if (output[3].includes(\"Light\")) {\n//        output[4] = output[4].replace(/\\s+/g, '_')\n//        output[4] = output[4].concat(\".Lt\")\n//\t} else if (output[3].includes(\"Power\")) {\n//\t\toutput[4] = output[4].replace(/\\s+/g, '_')\n//\t\toutput[4] = output[4].concat(\".Pwr\")\n//\t}\n//}\n\n//output[1] = (output[1] / 1000).toFixed(2);\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: output[9]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t_4n20_7: parseFloat(output[0]),\n\t\t\t\t_4n20_6: parseFloat(output[1]),\n\t\t\t\t_4n20_5: parseFloat(output[2]),\n\t\t\t\t_4n20_4: parseFloat(output[3]),\n\t\t\t\t_4n20_3: parseFloat(output[4]),\n\t\t\t\t_4n20_2: parseFloat(output[5]),\n\t\t\t\t_4n20_1: parseFloat(output[6]),\n\t\t\t\t_4n20_0: parseFloat(output[7]),\n\t\t\t\tTRUC_VERSION: String(output[8]),\n\t\t\t\tdatabaseID: String(output[9])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 460,
        "wires": [
            [
                "79805109460bc22f"
            ]
        ]
    },
    {
        "id": "dc94ca8bc3c62b92",
        "type": "function",
        "z": "574404df84e5165d",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t_4n20_7: parseFloat(output[0]),\n\t\t\t_4n20_6: parseFloat(output[1]),\n\t\t\t_4n20_5: parseFloat(output[2]),\n\t\t\t_4n20_4: parseFloat(output[3]),\n\t\t\t_4n20_3: parseFloat(output[4]),\n\t\t\t_4n20_2: parseFloat(output[5]),\n\t\t\t_4n20_1: parseFloat(output[6]),\n\t\t\t_4n20_0: parseFloat(output[7]),\n\t\t\t_ID: output[8],\n\t\t\tdatabaseID: output[9]\n\t\t},\n\t\t\n        tags:{\n            PLC: output[9] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "79805109460bc22f",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "574404df84e5165d",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "61866a1ecdb99e95",
        "type": "influxdb out",
        "z": "574404df84e5165d",
        "influxdb": "996e483573dc275b",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 1010,
        "y": 80,
        "wires": []
    },
    {
        "id": "ca391f3f18afbbc7",
        "type": "influxdb out",
        "z": "574404df84e5165d",
        "influxdb": "996e483573dc275b",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 990,
        "y": 300,
        "wires": []
    },
    {
        "id": "94c73258ce9ea68c",
        "type": "influxdb batch",
        "z": "574404df84e5165d",
        "influxdb": "996e483573dc275b",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 420,
        "wires": []
    },
    {
        "id": "942d66c151ed761b",
        "type": "influxdb in",
        "z": "574404df84e5165d",
        "influxdb": "996e483573dc275b",
        "name": "monicon.sess",
        "query": "DROP DATABASE monicon_sess",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 760,
        "y": 80,
        "wires": [
            [
                "61866a1ecdb99e95"
            ]
        ]
    },
    {
        "id": "1ea843221f585699",
        "type": "influxdb in",
        "z": "574404df84e5165d",
        "influxdb": "996e483573dc275b",
        "name": "monicon.sess",
        "query": "CREATE DATABASE monicon_sess",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "",
        "x": 740,
        "y": 300,
        "wires": [
            [
                "ca391f3f18afbbc7"
            ]
        ]
    },
    {
        "id": "d20fa8309e857ee3",
        "type": "string",
        "z": "574404df84e5165d",
        "name": "Sectionaliser ",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "ProPower-ESP/Device/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 290,
        "y": 420,
        "wires": [
            [
                "b72c7a254f599133",
                "dc94ca8bc3c62b92"
            ]
        ]
    },
    {
        "id": "e88ee00156abae33",
        "type": "comment",
        "z": "574404df84e5165d",
        "name": "4n20 Analog Signals",
        "info": "",
        "x": 110,
        "y": 380,
        "wires": []
    },
    {
        "id": "b6e44d63de983153",
        "type": "function",
        "z": "574404df84e5165d",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\n/*\noutput[0] = AI-0 // PT100\noutput[1] = AI-1 // PT100\noutput[2] = AI-2 // PT100\noutput[3] = AI-3 // PT100\noutput[4] = AI-4 // 4..20mA\noutput[5] = AI-5 // 4..20mA\noutput[6] = AI-6 // 4..20mA\noutput[7] = AI-7 // 4..20mA \noutput[8] = Device ID\noutput[9] = Location \n*/\n\n// Lighting\n//if (output.length > 4) {\n//    if (output[3].includes(\"Light\")) {\n//        output[4] = output[4].replace(/\\s+/g, '_')\n//        output[4] = output[4].concat(\".Lt\")\n//\t} else if (output[3].includes(\"Power\")) {\n//\t\toutput[4] = output[4].replace(/\\s+/g, '_')\n//\t\toutput[4] = output[4].concat(\".Pwr\")\n//\t}\n//}\n\n//output[1] = (output[1] / 1000).toFixed(2);\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: output[9]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t_PT100_7: parseFloat(output[0]),\n\t\t\t\t_PT100_6: parseFloat(output[1]),\n\t\t\t\t_PT100_5: parseFloat(output[2]),\n\t\t\t\t_PT100_4: parseFloat(output[3]),\n\t\t\t\t_PT100_3: parseFloat(output[4]),\n\t\t\t\t_PT100_2: parseFloat(output[5]),\n\t\t\t\t_PT100_1: parseFloat(output[6]),\n\t\t\t\t_PT100_0: parseFloat(output[7]),\n\t\t\t\tTRUC_VERSION: String(output[8]),\n\t\t\t\tdatabaseID: String(output[9])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 580,
        "wires": [
            [
                "f2e6f92c68d96b3a"
            ]
        ]
    },
    {
        "id": "7b62834d0010a853",
        "type": "function",
        "z": "574404df84e5165d",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t_PT100_7: parseFloat(output[0]),\n\t\t\t_PT100_6: parseFloat(output[1]),\n\t\t\t_PT100_5: parseFloat(output[2]),\n\t\t\t_PT100_4: parseFloat(output[3]),\n\t\t\t_PT100_3: parseFloat(output[4]),\n\t\t\t_PT100_2: parseFloat(output[5]),\n\t\t\t_PT100_1: parseFloat(output[6]),\n\t\t\t_PT100_0: parseFloat(output[7]),\n\t\t\t_ID: output[8],\n\t\t\tdatabaseID: output[9]\n\t\t},\n        tags:{\n            PLC: output[9] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "f2e6f92c68d96b3a",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "574404df84e5165d",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "69e4af1ef9aa8240",
        "type": "influxdb batch",
        "z": "574404df84e5165d",
        "influxdb": "996e483573dc275b",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 540,
        "wires": []
    },
    {
        "id": "6c4709efa40ca715",
        "type": "string",
        "z": "574404df84e5165d",
        "name": "Sectionaliser ",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "ProPower-ESP/Device/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 290,
        "y": 540,
        "wires": [
            [
                "b6e44d63de983153",
                "7b62834d0010a853"
            ]
        ]
    },
    {
        "id": "4f7001d1b1b81a11",
        "type": "link in",
        "z": "574404df84e5165d",
        "name": "",
        "links": [
            "a1c721091c9edde4"
        ],
        "x": 35,
        "y": 420,
        "wires": [
            [
                "d20fa8309e857ee3"
            ]
        ]
    },
    {
        "id": "643482b2e528c821",
        "type": "link in",
        "z": "574404df84e5165d",
        "name": "",
        "links": [
            "2796b83b4838f721"
        ],
        "x": 35,
        "y": 540,
        "wires": [
            [
                "6c4709efa40ca715"
            ]
        ]
    },
    {
        "id": "8274d78f6d1ca2d0",
        "type": "function",
        "z": "574404df84e5165d",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet depolys = global.get(\"depolys\") || 0\n\n// var msg1 = { payload : data[0] };   // RSSI\n// var msg2 = { payload : data[1] };   // WiFi Diconnection Counter\n// var msg3 = { payload : data[2] };   // MQTT Diconnection Counter\n// var msg4 = { payload : data[3] };   // Device IP\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[7]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tRSSI: parseFloat(output[0]),\n\t\t\t\tWIFI_DC: parseFloat(output[1]),\n    \t\t\tMQTT_DC: parseFloat(output[2]),\n    \t\t\tDEVICE_IP: \" + output[3] + \",\n    \t\t\tserialNo: parseFloat(topic[3]),\n    \t\t\tESP_Temp: parseFloat(output[4]),\n    \t\t\ttwentySecLoop: parseFloat(output[5]),\n    \t\t\tTRUC_VERSION: String(output[6]),\n    \t\t\tdatabaseID: String(output[7]),\n    \t\t\tEquipmentID: String(output[8])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 700,
        "wires": [
            [
                "77b83e3d873cce9d"
            ]
        ]
    },
    {
        "id": "3052b3159ed5ed09",
        "type": "function",
        "z": "574404df84e5165d",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet depolys = global.get(\"depolys\") || 0\n// Display data\n// var data = msg.payload.split(',')\n// var msg1 = { payload : data[0] };   // RSSI\n// var msg2 = { payload : data[1] };   // WiFi Diconnection Counter\n// var msg3 = { payload : data[2] };   // MQTT Diconnection Counter\n// var msg4 = { payload : data[3] };   // Device IP\n\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\tRSSI: parseFloat(output[0]),\n\t\t\tWIFI_DC: parseFloat(output[1]),\n\t\t\tMQTT_DC: parseFloat(output[2]),\n\t\t\tDEVICE_IP: String(output[3]),\n\t\t\tSerialNo: String(topic[3]),\n\t\t\tESP_Temp: parseFloat(output[4]),\n\t\t\ttwentySecLoop: parseFloat(output[5]),\n\t\t\tTRUC_VERSION: output[6],\n\t\t\tdatabaseID: output[7],\n\t\t\tEquipmentID: output[8]\n\n\t\t},\n        tags:{\n            PLC: output[7] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "77b83e3d873cce9d",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "574404df84e5165d",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "64b68f468675a60e",
        "type": "influxdb batch",
        "z": "574404df84e5165d",
        "influxdb": "996e483573dc275b",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 660,
        "wires": []
    },
    {
        "id": "c811df7e9fce2ef2",
        "type": "mqtt in",
        "z": "574404df84e5165d",
        "name": "",
        "topic": "MONICON-PLC/Device/Status/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 150,
        "y": 660,
        "wires": [
            [
                "3052b3159ed5ed09",
                "8274d78f6d1ca2d0"
            ]
        ]
    },
    {
        "id": "d4da415158910885",
        "type": "influxdb batch",
        "z": "574404df84e5165d",
        "influxdb": "996e483573dc275b",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 960,
        "wires": []
    },
    {
        "id": "28040d237dcdb782",
        "type": "link in",
        "z": "574404df84e5165d",
        "name": "Local InfluxDB",
        "links": [
            "4b0d563f446bc22f",
            "f7c6672a8acfd797",
            "899e5d4eb217488e",
            "111d3e2248aefc7a",
            "9f0c0f90cbfaca4e",
            "7595f1ef8cef4b4a",
            "2df71e1.2d013e2",
            "1628eea3.8519d1",
            "87ac69cb917a0b13"
        ],
        "x": 35,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "cc24a5be524a8235",
        "type": "comment",
        "z": "574404df84e5165d",
        "name": "Local InfluxDb Link",
        "info": "",
        "x": 150,
        "y": 940,
        "wires": []
    },
    {
        "id": "8f4dec2e2cea7b01",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "574404df84e5165d",
        "server": "da535876.280af8",
        "name": "SESS",
        "x": 930,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "02028bbe0188b4ea",
        "type": "link in",
        "z": "574404df84e5165d",
        "name": "Remote FluxDB",
        "links": [
            "0c98684126735a36",
            "a113b6564a0cab1f",
            "fdbed9e9782d2f32",
            "ac8d93960c4d1a83",
            "f08f794da7608242",
            "4a941c7f0162b7f1",
            "a1073eb0f47ce931",
            "35654aabe51d702e"
        ],
        "x": 35,
        "y": 1040,
        "wires": [
            [
                "8f4dec2e2cea7b01"
            ]
        ]
    },
    {
        "id": "1b1d5edd12b46a57",
        "type": "mqtt in",
        "z": "574404df84e5165d",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/DeleteCreateLocalDB/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 210,
        "y": 160,
        "wires": [
            [
                "4812df60a28fe42c"
            ]
        ]
    },
    {
        "id": "a124cdc3e0df3f71",
        "type": "delay",
        "z": "574404df84e5165d",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 560,
        "y": 240,
        "wires": [
            [
                "1ea843221f585699"
            ]
        ]
    },
    {
        "id": "4812df60a28fe42c",
        "type": "function",
        "z": "574404df84e5165d",
        "name": "Check Server macAddr",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Local Database has been reset.\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 160,
        "wires": [
            [
                "942d66c151ed761b",
                "a124cdc3e0df3f71",
                "46eb161b2491b0d6"
            ]
        ]
    },
    {
        "id": "46eb161b2491b0d6",
        "type": "link out",
        "z": "574404df84e5165d",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 815,
        "y": 160,
        "wires": []
    },
    {
        "id": "097d0dbb790f89dd",
        "type": "link in",
        "z": "574404df84e5165d",
        "name": "",
        "links": [
            "e1673593432fb36f"
        ],
        "x": 35,
        "y": 780,
        "wires": [
            [
                "1fdd6c6d67760922",
                "f27c25774740838d"
            ]
        ]
    },
    {
        "id": "f27c25774740838d",
        "type": "function",
        "z": "574404df84e5165d",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[0]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[2]]: parseFloat(output[1])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 820,
        "wires": [
            [
                "5535a442044ee380"
            ]
        ]
    },
    {
        "id": "1fdd6c6d67760922",
        "type": "function",
        "z": "574404df84e5165d",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[2]]: parseFloat(output[1])\n\t\t},\n        tags:{\n            PLC: output[0] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "5535a442044ee380",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "574404df84e5165d",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "29731f9d16dd211f",
        "type": "influxdb batch",
        "z": "574404df84e5165d",
        "influxdb": "996e483573dc275b",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 780,
        "wires": []
    },
    {
        "id": "0790375ac4c39d7f",
        "type": "comment",
        "z": "574404df84e5165d",
        "name": "Accumulators Link",
        "info": "",
        "x": 110,
        "y": 740,
        "wires": []
    },
    {
        "id": "3af1f282dd90bbe0",
        "type": "comment",
        "z": "574404df84e5165d",
        "name": "------- Global Logging Connection ------- ",
        "info": "",
        "x": 170,
        "y": 900,
        "wires": []
    },
    {
        "id": "fc59b5630de8aa2e",
        "type": "comment",
        "z": "574404df84e5165d",
        "name": "Remote FluxDb Link",
        "info": "",
        "x": 150,
        "y": 1020,
        "wires": []
    },
    {
        "id": "0f98f55650eb7249",
        "type": "mqtt in",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "topic": "MONICON/CMD/OS/",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 140,
        "y": 160,
        "wires": [
            [
                "df26f77eecaa9f63",
                "195e6b67ccd4802c",
                "f056f8cdbd834c5f",
                "b189b3b371eec144",
                "372c441f9dbc3d8d",
                "04a9afb6579298b5"
            ]
        ]
    },
    {
        "id": "2dc2b11b7755071e",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "IP Addr",
        "func": "if (typeof msg.payload.networkInterfaces.wlan0[0].address !=\"undefined\" ){\n    var data = msg.payload.networkInterfaces.wlan0[0].address\n    var msg1 = { payload: data, topic: \"MONICON/STAT/OS/IP\" };\n    return msg1;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 320,
        "wires": [
            [
                "cd1f097523d74724",
                "fc1fa4b793d8115c"
            ]
        ]
    },
    {
        "id": "c5a05a4f4724814e",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Uptime",
        "func": "var data = msg.payload.uptime\n\nlet days = parseInt(data / 86400)\nlet hours = parseInt((data % 86400) / 3600)\nlet minutes = parseInt(((data % 86400) % 3600) / 60)\nlet secs = parseInt(((data % 86400) % 3600) % 60)\n\nlet msg1 = {payload: \"Days[\" + days + \"] Hours[\" + hours + \"] Mins[\" + minutes + \"] Sec[\" + secs + \"]\", topic: \"MONICON/STAT/OS/UPTIME\"}\n\nreturn msg1\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 360,
        "wires": [
            [
                "cd1f097523d74724",
                "d535d144fa0d9e29"
            ]
        ]
    },
    {
        "id": "cd1f097523d74724",
        "type": "mqtt out",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 870,
        "y": 60,
        "wires": []
    },
    {
        "id": "b40a19e9050f4c03",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Model",
        "func": "var data = msg.payload.cpus[0].model\nvar msg1 = { payload: data, topic: \"MONICON/STAT/OS/MODEL\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 280,
        "wires": [
            [
                "cd1f097523d74724",
                "c97dbdf4e4279d27"
            ]
        ]
    },
    {
        "id": "7378dd39d48389bd",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Disk Size (GB)",
        "func": "var data = msg.payload[0]\n\nvar diskSize = String((data.size / 1000000).toFixed(2)) + \",\" + String((data.used / 1000000).toFixed(2)) + \",\" + String((data.available / 1000000).toFixed(2)) + \",\" + String((data.capacity * 100).toFixed(0))\n\nvar msg1 = { payload: diskSize, topic: \"MONICON/STAT/OS/DISK\" }\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 200,
        "wires": [
            [
                "cd1f097523d74724",
                "fa20152722a5e05c"
            ]
        ]
    },
    {
        "id": "f9e449bbc2eecb46",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "RAM (MB)",
        "func": "var data = msg.payload\n\nvar ramSize = String((data.totalmem / 1000000).toFixed(2)) + \",\" + String((data.freemem / 1000000).toFixed(2)) + \",\" + String(parseFloat(data.memusage).toFixed(0))\n\nvar msg1 = { payload: ramSize, topic: \"MONICON/STAT/OS/RAM\" }\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 120,
        "wires": [
            [
                "cd1f097523d74724",
                "6e1d3a6473a9386b"
            ]
        ]
    },
    {
        "id": "fa20152722a5e05c",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar output = msg.payload.split(\",\");\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\n        \n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            TotalMem: parseFloat(output[0]),\n            UsedMem: parseFloat(output[1]),\n            FreeMem: parseFloat(output[2]),\n            PercentMem: parseFloat(output[3])\n        },\n        tags:{\n            System: \"HDD\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"HDD\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTotalMem: parseFloat(output[0]),\n                UsedMem: parseFloat(output[1]),\n                FreeMem: parseFloat(output[2]),\n                PercentMem: parseFloat(output[3])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 200,
        "wires": [
            [
                "4b0d563f446bc22f"
            ],
            [
                "fdbed9e9782d2f32"
            ]
        ]
    },
    {
        "id": "7a607c2b1ad167c4",
        "type": "inject",
        "z": "8cfd17e4b664a97b",
        "name": "30sec Cycle",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "ae30fdd3a402e2a2"
            ]
        ]
    },
    {
        "id": "c97dbdf4e4279d27",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    //msg.payload = msg.payload.replace(/\\s+/g, '_')\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Model: msg.payload\n        },\n        tags:{\n            System: \"Model\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Model\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tModel: String(msg.payload[0].fields.Model)\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 280,
        "wires": [
            [
                "899e5d4eb217488e"
            ],
            [
                "4a941c7f0162b7f1"
            ]
        ]
    },
    {
        "id": "fc1fa4b793d8115c",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            IPAddr: msg.payload\n        },\n        tags:{\n            System: \"IP\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"IP\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tIPAddr: String(msg.payload[0].fields.IPAddr)\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 320,
        "wires": [
            [
                "899e5d4eb217488e"
            ],
            [
                "4a941c7f0162b7f1"
            ]
        ]
    },
    {
        "id": "d535d144fa0d9e29",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet deploys = global.get(\"deploys\") || 0;\n\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Uptime: msg.payload,\n            Deploys: parseFloat(deploys)\n        },\n        tags:{\n            System: \"UPTIME\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n    let uptime = String(msg.payload[0].fields.Uptime);\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"UPTIME\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tUptime: uptime,\n\t\t\t\tDeploys: parseFloat(deploys)\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 360,
        "wires": [
            [
                "899e5d4eb217488e"
            ],
            [
                "4a941c7f0162b7f1"
            ]
        ]
    },
    {
        "id": "78c7d633991007dd",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Hostname: msg.payload,\n        },\n        tags:{\n            System: \"Hostname\",\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Hostname\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tHostname: String(msg.payload[0].fields.Hostname),\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 240,
        "wires": [
            [
                "899e5d4eb217488e"
            ],
            [
                "4a941c7f0162b7f1"
            ]
        ]
    },
    {
        "id": "6e1d3a6473a9386b",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar output = msg.payload.split(\",\");\n\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            TotalRam: parseFloat(output[0]),\n            FreeRam: parseFloat(output[1]),\n            PercentRam: parseFloat(output[2])\n        },\n        tags:{\n            System: \"RAM\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"RAM\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTotalRam: parseFloat(output[0]),\n                FreeRam: parseFloat(output[1]),\n                PercentRam: parseFloat(output[2])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 120,
        "wires": [
            [
                "4b0d563f446bc22f"
            ],
            [
                "fdbed9e9782d2f32"
            ]
        ]
    },
    {
        "id": "55eb7c15ec1b1ef2",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Hostname",
        "func": "var data = msg.payload.hostname\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/Hostname\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 240,
        "wires": [
            [
                "78c7d633991007dd"
            ]
        ]
    },
    {
        "id": "c3e86cf52ff0fb05",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Temperature",
        "func": "var data = msg.payload\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/Temperature\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 400,
        "wires": [
            [
                "d39293ec21a2abe3",
                "cd1f097523d74724",
                "a461d5bee7f23a7f"
            ]
        ]
    },
    {
        "id": "d39293ec21a2abe3",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"  \n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Temperature: msg.payload,\n        },\n        tags:{\n            System: \"Temperature\",\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Temperature\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTemperature: parseFloat(msg.payload[0].fields.Temperature),\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 400,
        "wires": [
            [
                "f7c6672a8acfd797"
            ],
            [
                "a113b6564a0cab1f"
            ]
        ]
    },
    {
        "id": "f056f8cdbd834c5f",
        "type": "OS",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "x": 370,
        "y": 240,
        "wires": [
            [
                "55eb7c15ec1b1ef2"
            ]
        ]
    },
    {
        "id": "b189b3b371eec144",
        "type": "Drives",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "7378dd39d48389bd"
            ]
        ]
    },
    {
        "id": "04a9afb6579298b5",
        "type": "Uptime",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "x": 380,
        "y": 360,
        "wires": [
            [
                "c5a05a4f4724814e"
            ]
        ]
    },
    {
        "id": "195e6b67ccd4802c",
        "type": "CPUs",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "x": 370,
        "y": 280,
        "wires": [
            [
                "b40a19e9050f4c03"
            ]
        ]
    },
    {
        "id": "372c441f9dbc3d8d",
        "type": "Memory",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "x": 380,
        "y": 120,
        "wires": [
            [
                "f9e449bbc2eecb46"
            ]
        ]
    },
    {
        "id": "df26f77eecaa9f63",
        "type": "NetworkIntf",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "x": 390,
        "y": 320,
        "wires": [
            [
                "2dc2b11b7755071e"
            ]
        ]
    },
    {
        "id": "c4ed5842beab2a58",
        "type": "cpu",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "msgCore": false,
        "msgOverall": false,
        "msgArray": false,
        "msgTemp": true,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "c3e86cf52ff0fb05"
            ]
        ]
    },
    {
        "id": "5003aaff814f1b31",
        "type": "exec",
        "z": "8cfd17e4b664a97b",
        "command": "iw dev | grep -m1 ssid | awk '{print $2}'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "SSID",
        "x": 370,
        "y": 540,
        "wires": [
            [
                "58cf994a6c6a137d"
            ],
            [],
            []
        ]
    },
    {
        "id": "7ad4780dc23aced3",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar msg1 = {};\n\n    msg1.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            SSID: msg.payload,\n            SiteID: siteID\n        },\n        tags:{\n            System: \"SSID\",\n        }\n    }];\n    \nvar msg2 = {};\n\nstructureObject();\n\nreturn [[msg1], [msg2]];\n        \nfunction structureObject() {\n\tmsg2.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"SSID\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tSSID: String(msg.payload),\n\t\t\t\tSiteID: String(siteID),\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 520,
        "wires": [
            [
                "f7c6672a8acfd797"
            ],
            [
                "a113b6564a0cab1f"
            ]
        ]
    },
    {
        "id": "58cf994a6c6a137d",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "SSID",
        "func": "var data = String(msg.payload.replace(/[\\n\\r]+/g, ' ').replace(/\\s{2,}/g,' ').replace(/^\\s+|\\s+$/,'') )\nmsg.payload = data\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 520,
        "wires": [
            [
                "7ad4780dc23aced3"
            ]
        ]
    },
    {
        "id": "a74ce0d9431b44c4",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Used mem(SSD)",
        "func": "let msg1 = {payload : \"df -h | grep -i sda1 | awk '{print $3\\\"/\\\"}';df -h | grep -i sda1 | awk '{print $2}'\", topic :\"Used mem(SSD)\"}\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 600,
        "wires": [
            [
                "6a0855f626b0d901"
            ]
        ]
    },
    {
        "id": "6a0855f626b0d901",
        "type": "exec",
        "z": "8cfd17e4b664a97b",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 590,
        "y": 600,
        "wires": [
            [
                "aa3b9083c179fad5"
            ],
            [],
            []
        ]
    },
    {
        "id": "aa3b9083c179fad5",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Used mem(SSD)",
        "func": "if(msg.topic != \"Used mem(SSD)\") {\n    return\n}\n\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet data = msg.payload.split('/')\n\n//return msg;\n\nvar msg1 = {};\n\n    msg1.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            SSD_Used: data[0],//.replace(/\\D/g,'')), //removes non numerical characters\n            SSD_Total: data[1],//.replace(/\\D/g,'')), //removes non numerical characters\n        },\n        tags:{\n            System: \"SSD\",\n        }\n    }];\n    \nvar msg2 = {};\n\nstructureObject();\n\nreturn [[msg1], [msg2]];\n        \nfunction structureObject() {\n    let usedMem = String(data[0].replace(/\\s+/g, ' ').trim());\n    let totMem = String(data[1].replace(/\\s+/g, ' ').trim());\n\tmsg2.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"SSD\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tSSD_Used: usedMem,\n\t\t\t\tSSD_Total: totMem,\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 910,
        "y": 600,
        "wires": [
            [
                "f7c6672a8acfd797"
            ],
            [
                "a113b6564a0cab1f"
            ]
        ]
    },
    {
        "id": "4bd2b3952c690b4e",
        "type": "link in",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "links": [
            "8aee61a3c2447008"
        ],
        "x": 135,
        "y": 360,
        "wires": [
            [
                "372c441f9dbc3d8d",
                "b189b3b371eec144",
                "f056f8cdbd834c5f",
                "195e6b67ccd4802c",
                "df26f77eecaa9f63",
                "04a9afb6579298b5",
                "c4ed5842beab2a58",
                "5003aaff814f1b31",
                "07d5278743b6d880"
            ]
        ]
    },
    {
        "id": "8aee61a3c2447008",
        "type": "link out",
        "z": "8cfd17e4b664a97b",
        "name": "30SecCycle",
        "links": [
            "4bd2b3952c690b4e"
        ],
        "x": 615,
        "y": 80,
        "wires": []
    },
    {
        "id": "4b0d563f446bc22f",
        "type": "link out",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "links": [
            "28040d237dcdb782"
        ],
        "x": 1115,
        "y": 80,
        "wires": []
    },
    {
        "id": "fdbed9e9782d2f32",
        "type": "link out",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "links": [
            "02028bbe0188b4ea"
        ],
        "x": 1115,
        "y": 160,
        "wires": []
    },
    {
        "id": "899e5d4eb217488e",
        "type": "link out",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "links": [
            "28040d237dcdb782"
        ],
        "x": 1115,
        "y": 240,
        "wires": []
    },
    {
        "id": "f7c6672a8acfd797",
        "type": "link out",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "links": [
            "28040d237dcdb782"
        ],
        "x": 1115,
        "y": 400,
        "wires": []
    },
    {
        "id": "4a941c7f0162b7f1",
        "type": "link out",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "links": [
            "02028bbe0188b4ea"
        ],
        "x": 1115,
        "y": 360,
        "wires": []
    },
    {
        "id": "a113b6564a0cab1f",
        "type": "link out",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "links": [
            "02028bbe0188b4ea"
        ],
        "x": 1115,
        "y": 600,
        "wires": []
    },
    {
        "id": "07d5278743b6d880",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "System & Device Info",
        "func": "let macAddr = global.get(\"macAddr\") || \"NotSet\";\n\nif (macAddr === \"NotSet\") {\n    return [msg, null];\n} else {\n    msg.payload = macAddr;\n    return [null, msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 760,
        "wires": [
            [
                "0260c0fe513a8740"
            ],
            [
                "330658be461081e6"
            ]
        ]
    },
    {
        "id": "0260c0fe513a8740",
        "type": "exec",
        "z": "8cfd17e4b664a97b",
        "command": "cat /sys/class/net/eth0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 630,
        "y": 700,
        "wires": [
            [
                "66ef5c414bd06dda"
            ],
            [],
            []
        ]
    },
    {
        "id": "66ef5c414bd06dda",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nmsg.payload = macAddr;\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 700,
        "wires": [
            [
                "330658be461081e6"
            ]
        ]
    },
    {
        "id": "ae30fdd3a402e2a2",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Developer macAddr Block",
        "func": "let macAddr = global.get(\"macAddr\") || \"nSet\";\nif(macAddr == \"b827ebf15f4e\" || macAddr == \"b827eba5dff3\") {\n    return\n} \nelse if (macAddr == \"nSet\") {\n    return [[msg], [null]];\n} else {\n    return [[null], [msg]];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 40,
        "wires": [
            [
                "43f028e029e7e77a"
            ],
            [
                "8aee61a3c2447008"
            ]
        ]
    },
    {
        "id": "38ba614935ed7968",
        "type": "comment",
        "z": "8cfd17e4b664a97b",
        "name": "Get local macaddr",
        "info": "",
        "x": 410,
        "y": 720,
        "wires": []
    },
    {
        "id": "43f028e029e7e77a",
        "type": "link out",
        "z": "8cfd17e4b664a97b",
        "name": "Get macAddr if Not Defined",
        "links": [
            "11c74579.3eeadb"
        ],
        "x": 615,
        "y": 40,
        "wires": []
    },
    {
        "id": "a461d5bee7f23a7f",
        "type": "link out",
        "z": "8cfd17e4b664a97b",
        "name": "",
        "links": [
            "eff290824f2ec191"
        ],
        "x": 835,
        "y": 460,
        "wires": []
    },
    {
        "id": "330658be461081e6",
        "type": "function",
        "z": "8cfd17e4b664a97b",
        "name": "Remote Database",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tSystem: \"macAddr\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tmacAddr: String(msg.payload)\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 760,
        "wires": [
            [
                "a113b6564a0cab1f"
            ]
        ]
    },
    {
        "id": "66dc5791cf1135f7",
        "type": "exec",
        "z": "7e5ef631b5914f07",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 810,
        "y": 300,
        "wires": [
            [],
            [
                "63fdf5e81a6ca844"
            ],
            []
        ]
    },
    {
        "id": "756355892d73c530",
        "type": "inject",
        "z": "7e5ef631b5914f07",
        "name": "48hr Interval",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "172800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "66dc5791cf1135f7"
            ]
        ]
    },
    {
        "id": "e5d7b7f154b7a40f",
        "type": "function",
        "z": "7e5ef631b5914f07",
        "name": "Deploy Counter",
        "func": "var deploys = global.get(\"deploys\") || 0;\ndeploys = deploys + 1;\nglobal.set(\"deploys\", deploys);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "e1d377f73e3e81d2",
        "type": "inject",
        "z": "7e5ef631b5914f07",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "e5d7b7f154b7a40f"
            ]
        ]
    },
    {
        "id": "69385c38e145aafa",
        "type": "function",
        "z": "7e5ef631b5914f07",
        "name": "Check Server Address",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 420,
        "wires": [
            [
                "66dc5791cf1135f7",
                "79f83796d7c5842d"
            ]
        ]
    },
    {
        "id": "774b2f6078e37550",
        "type": "mqtt in",
        "z": "7e5ef631b5914f07",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Reboot/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 160,
        "y": 420,
        "wires": [
            [
                "69385c38e145aafa"
            ]
        ]
    },
    {
        "id": "c7c90c7df00fb2e1",
        "type": "comment",
        "z": "7e5ef631b5914f07",
        "name": "Deploy Counter",
        "info": "",
        "x": 100,
        "y": 140,
        "wires": []
    },
    {
        "id": "19bfc2d0ea73044b",
        "type": "comment",
        "z": "7e5ef631b5914f07",
        "name": "System Reboot every 48hrs",
        "info": "",
        "x": 140,
        "y": 260,
        "wires": []
    },
    {
        "id": "e112f7960682a751",
        "type": "comment",
        "z": "7e5ef631b5914f07",
        "name": "Remote Reboot",
        "info": "",
        "x": 100,
        "y": 380,
        "wires": []
    },
    {
        "id": "79f83796d7c5842d",
        "type": "function",
        "z": "7e5ef631b5914f07",
        "name": "Return Message",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Server Reboot was Successful.\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 420,
        "wires": [
            [
                "b27d67d062f105f8"
            ]
        ]
    },
    {
        "id": "b27d67d062f105f8",
        "type": "link out",
        "z": "7e5ef631b5914f07",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 1255,
        "y": 420,
        "wires": []
    },
    {
        "id": "204a19cbe9f8e63f",
        "type": "inject",
        "z": "7e5ef631b5914f07",
        "name": "MoniconPLC-Server004V0.2.1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "MoniconPLC-Server004V0.2.1",
        "payloadType": "str",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "c54a79f4feff335f"
            ]
        ]
    },
    {
        "id": "2e3e40986f8069aa",
        "type": "comment",
        "z": "7e5ef631b5914f07",
        "name": "Set Server Version",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "63fdf5e81a6ca844",
        "type": "function",
        "z": "7e5ef631b5914f07",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "b27d67d062f105f8"
            ]
        ]
    },
    {
        "id": "7fdb00dc28241b10",
        "type": "comment",
        "z": "7e5ef631b5914f07",
        "name": "Download Scripts",
        "info": "",
        "x": 100,
        "y": 640,
        "wires": []
    },
    {
        "id": "f02316c692648ef2",
        "type": "mqtt in",
        "z": "7e5ef631b5914f07",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Scripts/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 160,
        "y": 680,
        "wires": [
            [
                "020948ed2064e9eb"
            ]
        ]
    },
    {
        "id": "020948ed2064e9eb",
        "type": "function",
        "z": "7e5ef631b5914f07",
        "name": "Scripting",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\n//let directory = \"MONICON\";\n\n//var data = \"sudo find /home/pi/ -type d -name 'MONICON/Scripts' -exec rm -r {} +;\"\nvar data = \"sudo rm -r /home/pi/MONICON/Scripts;\"\ndata = data.concat(\"sudo git clone https://github.com/jimmy232/MoniconPLC_Scripts.git /home/pi/MONICON/Scripts/;\");\ndata = data.concat(\"sudo chmod +x /home/pi/MONICON/Scripts/*.sh;\");\ndata = data.concat(\"sudo /home/pi/MONICON/Scripts/\" + msg.payload + \";\");\nmsg.payload = data;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 680,
        "wires": [
            [
                "9f28ad2c72d636d0",
                "f85238736b4805c0",
                "af19a4135d34e4fa"
            ]
        ]
    },
    {
        "id": "9f28ad2c72d636d0",
        "type": "exec",
        "z": "7e5ef631b5914f07",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 790,
        "y": 680,
        "wires": [
            [
                "58b15d27f03cf5ca"
            ],
            [
                "58b15d27f03cf5ca"
            ],
            [
                "58b15d27f03cf5ca",
                "cbf613080ae2c588"
            ]
        ]
    },
    {
        "id": "58b15d27f03cf5ca",
        "type": "function",
        "z": "7e5ef631b5914f07",
        "name": "Logs",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/LogMessages/\" + macAddr;\nif(msg.payload === null || msg.payload.length == 0) {\n    msg.payload == \"Empty Msg\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 680,
        "wires": [
            [
                "e8fa53495217f026"
            ]
        ]
    },
    {
        "id": "cbf613080ae2c588",
        "type": "function",
        "z": "7e5ef631b5914f07",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nif(msg.payload.code === 0) {\n    msg.payload = \"Script-Finished\";\n} else {\n    msg.payload = \"Script-Failed\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 720,
        "wires": [
            [
                "e8fa53495217f026"
            ]
        ]
    },
    {
        "id": "e8fa53495217f026",
        "type": "link out",
        "z": "7e5ef631b5914f07",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 1195,
        "y": 840,
        "wires": []
    },
    {
        "id": "f85238736b4805c0",
        "type": "function",
        "z": "7e5ef631b5914f07",
        "name": "Logs",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/LogMessages/\" + macAddr;\nif(msg.payload === null || msg.payload.length === 0) {\n    msg.payload == \"Empty Msg\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 800,
        "wires": [
            [
                "e8fa53495217f026"
            ]
        ]
    },
    {
        "id": "af19a4135d34e4fa",
        "type": "function",
        "z": "7e5ef631b5914f07",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Running Scripts...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 840,
        "wires": [
            [
                "e8fa53495217f026"
            ]
        ]
    },
    {
        "id": "656850245c0f0a59",
        "type": "trigger",
        "z": "7e5ef631b5914f07",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 800,
        "y": 540,
        "wires": [
            [
                "b786cfa4a5d8d596"
            ]
        ]
    },
    {
        "id": "f02985b7a8d4dee7",
        "type": "comment",
        "z": "7e5ef631b5914f07",
        "name": "Remote Reboot CMD - Esp32 Physical Reboot",
        "info": "",
        "x": 200,
        "y": 520,
        "wires": []
    },
    {
        "id": "9e1774da8da84f81",
        "type": "mqtt in",
        "z": "7e5ef631b5914f07",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/APM/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "dba358e0.ff7ca8",
        "inputs": 0,
        "x": 160,
        "y": 560,
        "wires": [
            [
                "3f735e82e4bd3cdf"
            ]
        ]
    },
    {
        "id": "3f735e82e4bd3cdf",
        "type": "function",
        "z": "7e5ef631b5914f07",
        "name": "Check Server macAddr",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar msg1 = {payload: \"*\", topic: \"MONICON-PLC/CMD/APM/\" + msg.payload};\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"PLC Reboot was Successful.\"\n\nreturn [msg, msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 560,
        "wires": [
            [
                "656850245c0f0a59"
            ],
            [
                "55fac93322145287"
            ]
        ]
    },
    {
        "id": "b786cfa4a5d8d596",
        "type": "link out",
        "z": "7e5ef631b5914f07",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 1015,
        "y": 540,
        "wires": []
    },
    {
        "id": "55fac93322145287",
        "type": "mqtt out",
        "z": "7e5ef631b5914f07",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "dba358e0.ff7ca8",
        "x": 810,
        "y": 580,
        "wires": []
    },
    {
        "id": "c54a79f4feff335f",
        "type": "function",
        "z": "7e5ef631b5914f07",
        "name": "Set Server Version",
        "func": "// eg. \"MONICON-PLC_ServerV0.1.1\"\nglobal.set(\"serverVersion\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 80,
        "wires": [
            [
                "951719721f8ffee9"
            ]
        ]
    },
    {
        "id": "4417b033b1595d18",
        "type": "function",
        "z": "7e5ef631b5914f07",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nreturn\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 970,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "951719721f8ffee9",
        "type": "exec",
        "z": "7e5ef631b5914f07",
        "command": "cat /sys/class/net/eth0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 770,
        "y": 80,
        "wires": [
            [
                "4417b033b1595d18"
            ],
            [],
            []
        ]
    },
    {
        "id": "f1577f9666f1eb6f",
        "type": "comment",
        "z": "7e5ef631b5914f07",
        "name": "Initialise InfluxDB",
        "info": "",
        "x": 100,
        "y": 920,
        "wires": []
    },
    {
        "id": "3d0a3249bc7de73d",
        "type": "exec",
        "z": "7e5ef631b5914f07",
        "command": "sudo influxd -config /etc/influxdb/influxdb.conf",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "InfluxDB Start",
        "x": 1080,
        "y": 960,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "efd64dc70ccd81bf",
        "type": "inject",
        "z": "7e5ef631b5914f07",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 110,
        "y": 960,
        "wires": [
            [
                "3d0a3249bc7de73d"
            ]
        ]
    },
    {
        "id": "210be8e2bfdc5f88",
        "type": "file in",
        "z": "72cbff9b58da3b22",
        "name": "",
        "filename": "",
        "format": "",
        "sendError": true,
        "x": 950,
        "y": 40,
        "wires": [
            [
                "158d70d4321f4495",
                "2e0bedf09c2c977f"
            ]
        ]
    },
    {
        "id": "64ad63c774a24d92",
        "type": "switch",
        "z": "72cbff9b58da3b22",
        "name": "Check user agent",
        "property": "req.headers.user-agent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "ESP32-http-Update",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 40,
        "wires": [
            [],
            [
                "79ad8d185560743e"
            ]
        ]
    },
    {
        "id": "c3be052bc53166fa",
        "type": "http in",
        "z": "72cbff9b58da3b22",
        "name": "OTA Request",
        "url": "/firmwareUpdate",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "64ad63c774a24d92"
            ]
        ]
    },
    {
        "id": "1273433266d82bab",
        "type": "debug",
        "z": "72cbff9b58da3b22",
        "name": "msg.mostRecentFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "mostRecentFile",
        "x": 1000,
        "y": 260,
        "wires": []
    },
    {
        "id": "158d70d4321f4495",
        "type": "http response",
        "z": "72cbff9b58da3b22",
        "name": "OTA Response",
        "statusCode": "",
        "headers": {},
        "x": 1120,
        "y": 40,
        "wires": []
    },
    {
        "id": "b3221f9db08cf2b4",
        "type": "function",
        "z": "72cbff9b58da3b22",
        "name": "",
        "func": "///// \n\n\n//msg.filename = \"/home/pi/Firmware/PowerProV2.3.2.ino.nodemcu.bin\"\n//return msg\n\n//List of files from RPI Github\nvar firmwares = msg.files;\n//TRUC_VERSION DATA from ESP\nvar version = msg.req.headers;\n//Version Data\nvar currentFile = version[\"x-esp32-version\"];\n//Extract Device Type PowerPro or LightPro\nvar deviceType = currentFile.substring(0,currentFile.indexOf(\"V\")+1)\nmsg.deviceType = deviceType;\n\n//Extracts Github file that matches current ESP version ID\nvar existingFile = firmwares.filter(item=> item.includes(currentFile)).pop();\n//Filters out any incorrect device types ie PowerPro or LightPro\nvar firmwareNames = firmwares.filter(item=> item.includes(msg.deviceType));\n//Sorts out list of files\nvar comparer = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});\nfirmwareNames.sort(comparer.compare)[firmwareNames.length-1];\n\nvar mostRecentFile;\n//Pops off most recent file\nmsg.mostRecentFile = firmwareNames.pop();\nmsg.existingFile = existingFile;\n//Compares ESP version to most recent developed file\n//if((msg.existingFile.localeCompare(msg.mostRecentFile)) < 0)\n//{\n    msg.filename = \"/home/pi/Firmware/\" + msg.mostRecentFile;\n// }\n// else\n// {\n//     msg.filename = undefined;\n//     msg.payload = \"No New File Exists\"\n// }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 710,
        "y": 40,
        "wires": [
            [
                "1273433266d82bab",
                "37741cc1f80c9bba",
                "210be8e2bfdc5f88"
            ]
        ]
    },
    {
        "id": "37741cc1f80c9bba",
        "type": "debug",
        "z": "72cbff9b58da3b22",
        "name": "msg.existingFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "existingFile",
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "79ad8d185560743e",
        "type": "fs-ops-dir",
        "z": "72cbff9b58da3b22",
        "name": "",
        "path": "/home/pi/Firmware",
        "pathType": "str",
        "filter": ".bin",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 540,
        "y": 40,
        "wires": [
            [
                "b3221f9db08cf2b4",
                "2b41bf10d6e6c1aa"
            ]
        ]
    },
    {
        "id": "2e0bedf09c2c977f",
        "type": "function",
        "z": "72cbff9b58da3b22",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Uploading Outstation with new File: <\" + msg.filename + \">\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1090,
        "y": 120,
        "wires": [
            [
                "cf48a5fad79e7eeb"
            ]
        ]
    },
    {
        "id": "cf48a5fad79e7eeb",
        "type": "link out",
        "z": "72cbff9b58da3b22",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 1175,
        "y": 120,
        "wires": []
    },
    {
        "id": "2b41bf10d6e6c1aa",
        "type": "debug",
        "z": "72cbff9b58da3b22",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 140,
        "wires": []
    },
    {
        "id": "a2e3ebf4f7b1117b",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "MQTTCloud => MONICON.LOCAL",
        "info": "",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "aaf3c553d29a2435",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 260,
        "wires": [
            [
                "0439e477aa678f88"
            ]
        ]
    },
    {
        "id": "0439e477aa678f88",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "System & Device Info",
        "func": "let macAddr = global.get(\"macAddr\") || \"NotSet\";\n\nif (macAddr === \"NotSet\") {\n    return [msg, null];\n} else {\n    return [null, msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 260,
        "wires": [
            [
                "7cc96301cef65f3f"
            ],
            [
                "b16673dfdb985b76"
            ]
        ]
    },
    {
        "id": "72f2b35ec629d485",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "MONICON-PLC/STAT/System/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 150,
        "y": 80,
        "wires": [
            [
                "38f56f1dd2ca5db6"
            ]
        ]
    },
    {
        "id": "6f912db9d174f65c",
        "type": "string",
        "z": "1e6e2a7814f49052",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 420,
        "y": 200,
        "wires": [
            [
                "0439e477aa678f88"
            ]
        ]
    },
    {
        "id": "7cc96301cef65f3f",
        "type": "exec",
        "z": "1e6e2a7814f49052",
        "command": "cat /sys/class/net/wlan0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 950,
        "y": 220,
        "wires": [
            [
                "5e0b4dcc5b8efe89"
            ],
            [
                "94a4a80b979038f2"
            ],
            []
        ]
    },
    {
        "id": "5e0b4dcc5b8efe89",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nlet siteID = global.get(\"siteID\") || \"SiteIDxxx\";\n\nvar data = macAddr + \",\" + siteID + \",\" + msg.payload + \",\";\n\nmsg.payload = data;\nmsg.topic = \"sess/\" + msg.topic;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1150,
        "y": 220,
        "wires": [
            [
                "b16673dfdb985b76"
            ]
        ]
    },
    {
        "id": "c898ec738b00c14d",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "Set MacAddress if NOT already Set",
        "info": "",
        "x": 1080,
        "y": 160,
        "wires": []
    },
    {
        "id": "38f56f1dd2ca5db6",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "System Data",
        "func": "let siteID = global.get(\"siteID\") || \"SiteIDxxx\";\nlet macAddr = global.get(\"macAddr\") || \"NotSet\";\nlet serverVersion = global.get(\"serverVersion\") || \"MONICON-PLC_ServerV0.0.0\"\n\nvar data = macAddr + \",\" + siteID + \",\" + msg.payload;\n\nmsg.payload = data + \",\" + serverVersion;\nmsg.topic = \"sess/\" + msg.topic;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            [
                "bb85ab5edbfd4153"
            ]
        ]
    },
    {
        "id": "b16673dfdb985b76",
        "type": "mqtt out",
        "z": "1e6e2a7814f49052",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 1330,
        "y": 260,
        "wires": []
    },
    {
        "id": "f21aeb0f78e32c89",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Add to Query",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\n\nlet siteID = global.get(\"siteID\");\n\nlet macAddr = global.get(\"macAddr\") || \"nSet\";\nmsg.topic = \"sess/MONICON-PLC/STAT/Query/\" + macAddr;\n\nif(serialID != macAddr) {\n    return\n}\nlet uptime = flow.get(\"uptime\") || \"N/A\"\nlet deploys = global.get(\"deploys\") || 0;\nvar data = flow.get(\"diskSize\")\nlet diskSize = data.split(\",\");\n\nlet msg1 = { topic: msg.topic, payload: uptime + \",\" + diskSize[1] + \",\" + diskSize[0] +\",N/A,N/A,\" + deploys};\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 500,
        "wires": [
            [
                "c9b6a56fafd98e4e",
                "7992f46debb18422"
            ]
        ]
    },
    {
        "id": "0450319d33796870",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "Remote System Status Query",
        "info": "",
        "x": 140,
        "y": 480,
        "wires": []
    },
    {
        "id": "d8d4d7f8ecf43f7a",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Set Site ID",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nlet siteID = msg.payload;\nglobal.set(\"siteID\", siteID);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 680,
        "wires": [
            [
                "54b6c5276e2726e8"
            ]
        ]
    },
    {
        "id": "1bfe5d7706d4bbcb",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "Remote Set Site ID",
        "info": "",
        "x": 110,
        "y": 640,
        "wires": []
    },
    {
        "id": "3783894d59917606",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "Remote Set Equipment ID",
        "info": "",
        "x": 130,
        "y": 800,
        "wires": []
    },
    {
        "id": "b474830b753e2072",
        "type": "string",
        "z": "1e6e2a7814f49052",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 700,
        "y": 840,
        "wires": [
            [
                "aa56e622f89278ca",
                "dee005c8d271cc9a"
            ]
        ]
    },
    {
        "id": "dee005c8d271cc9a",
        "type": "mqtt out",
        "z": "1e6e2a7814f49052",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 950,
        "y": 920,
        "wires": []
    },
    {
        "id": "b3f5399856ca5f41",
        "type": "string",
        "z": "1e6e2a7814f49052",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 700,
        "y": 1000,
        "wires": [
            [
                "dee005c8d271cc9a",
                "98e2b118e3bc395f"
            ]
        ]
    },
    {
        "id": "21604e5036e6ba98",
        "type": "exec",
        "z": "1e6e2a7814f49052",
        "command": "sudo rm /home/pi/Firmware -r",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Delete Firmware Dir",
        "x": 900,
        "y": 1180,
        "wires": [
            [
                "281d46641f90f3e8",
                "f44b5013228582f0"
            ],
            [
                "e284d8ad30f0f944"
            ],
            []
        ]
    },
    {
        "id": "281d46641f90f3e8",
        "type": "exec",
        "z": "1e6e2a7814f49052",
        "command": " sudo git clone https://github.com/jimmy232/Firmware.git",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Download github bin files",
        "x": 1210,
        "y": 1180,
        "wires": [
            [
                "c436e13a5ea938e5"
            ],
            [
                "cb4f7ead5bd7c10c"
            ],
            []
        ]
    },
    {
        "id": "5c3d69630ba2296c",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "MONICON-PLC/CMD/DownloadUploadFirmware/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 210,
        "y": 1180,
        "wires": [
            [
                "1503f7515ba502eb"
            ]
        ]
    },
    {
        "id": "1503f7515ba502eb",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Alt Topic",
        "func": "var data = msg.topic\ndata = data.replace(\"DownloadUploadFirmware\", \"UploadFirmware\");\nmsg.topic = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1180,
        "wires": [
            [
                "21604e5036e6ba98",
                "2f998322e62a9169"
            ]
        ]
    },
    {
        "id": "f000c0ba1957febb",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "Download new ESP32 Firmware and Upload to Device on request",
        "info": "",
        "x": 250,
        "y": 1140,
        "wires": []
    },
    {
        "id": "d967da29fad02cbe",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "Download new ESP32 Firmware and Upload to Device on request",
        "info": "",
        "x": 250,
        "y": 960,
        "wires": []
    },
    {
        "id": "298627a5ed5688e3",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Set Timer Enable",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AnalogTimer\", \"0\");\n    AnalogTimer = \"0\";\n    msg.payload = \"Analog Timer Inactive\";\n} else {\n    global.set(\"AnalogTimer\", \"1\");\n    AnalogTimer = \"1\";\n    msg.payload = \"Analog Timer Active\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1380,
        "wires": [
            [
                "44b2529bf9b3e5a3"
            ]
        ]
    },
    {
        "id": "f601deb1dc7d287b",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Global Overide Timer Off",
        "func": "var AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AnalogTimer\", \"0\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "c9e506bd9c6b9a88",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Set Timer Enable",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar AlarmTimer = global.get(\"AlarmTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AlarmTimer\", \"0\");\n    AlarmTimer = \"0\";\n    msg.payload = \"Alarm Timer Inactive\";\n} else {\n    global.set(\"AlarmTimer\", \"1\");\n    AlarmTimer = \"1\";\n    msg.payload = \"Alarm Timer Active\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 1520,
        "wires": [
            [
                "03a665934fda6741"
            ]
        ]
    },
    {
        "id": "f28f1aa22dc4ddeb",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Global Overide Timer Off",
        "func": "var AnalogTimer = global.get(\"AlarmTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AlarmTimer\", \"0\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "02cb973eb39910fc",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "Define Email Parameters",
        "info": "",
        "x": 130,
        "y": 1620,
        "wires": []
    },
    {
        "id": "bc8b4584c388b90d",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Email Parameters",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nlet parameters = msg.payload.split('+');\n\nif (parameters[5] == \"1\") // PT100 Configuration Parameters\n{\n    global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n    global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n    global.set(\"addrTo_PT100\", parameters[2]);                //String\n    global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n    global.set(\"addrBcc_PT100\", parameters[4]);               //String\n    global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n    global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n} else {\n    global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n    global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n    global.set(\"addrTo_4n20\", parameters[2]);                //String\n    global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n    global.set(\"addrBcc_4n20\", parameters[4]);               //String\n    global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n    global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1660,
        "wires": [
            [
                "a75afe61b6d5ccee"
            ]
        ]
    },
    {
        "id": "2c286caa3e8e3882",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 200,
        "wires": [
            [
                "6f912db9d174f65c"
            ]
        ]
    },
    {
        "id": "a0750ee122d6c038",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Query/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 160,
        "y": 520,
        "wires": [
            [
                "95b07b111c80166a",
                "08b492730be3ed95",
                "c0a015cf6e72c253"
            ]
        ]
    },
    {
        "id": "e72f1e4e768df195",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/SiteID/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 160,
        "y": 680,
        "wires": [
            [
                "d8d4d7f8ecf43f7a"
            ]
        ]
    },
    {
        "id": "996bf343c48fcfc6",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpdateEquipID/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 840,
        "wires": [
            [
                "b474830b753e2072"
            ]
        ]
    },
    {
        "id": "731b48066835fc48",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UploadFirmware/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "b3f5399856ca5f41"
            ]
        ]
    },
    {
        "id": "eaf455f94a13c32a",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "Enable Analog Timer to Stream values to Broker",
        "info": "",
        "x": 200,
        "y": 1340,
        "wires": []
    },
    {
        "id": "f236cc8d90f2c966",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/AnalogTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 1380,
        "wires": [
            [
                "298627a5ed5688e3",
                "f601deb1dc7d287b"
            ]
        ]
    },
    {
        "id": "7b3662aedb09e1bd",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "Enable Alarm Timer to Stream values to Broker",
        "info": "",
        "x": 200,
        "y": 1480,
        "wires": []
    },
    {
        "id": "24122f80b7a40f94",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/AlarmTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 1520,
        "wires": [
            [
                "c9e506bd9c6b9a88",
                "f28f1aa22dc4ddeb"
            ]
        ]
    },
    {
        "id": "789cd139ee0ea285",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/EmailDefinition/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 1660,
        "wires": [
            [
                "bc8b4584c388b90d"
            ]
        ]
    },
    {
        "id": "0ef8db75a9d6a481",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "Search Email Parameters",
        "info": "",
        "x": 130,
        "y": 1720,
        "wires": []
    },
    {
        "id": "b1dd5463c86bb0e2",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/EmailSearch/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 1760,
        "wires": [
            [
                "074a9d20b536741e"
            ]
        ]
    },
    {
        "id": "074a9d20b536741e",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Email Parameters Template",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nmsg.topic = msg.topic.replace(\"CMD\", \"STAT\");\n\nlet message = \"\";\n\nif (msg.payload == \"PT100SensorType\") // PT100 Configuration Parameters\n{\n    message = global.get(\"subjectMSg_PT100\");            //String\n    message += \",\";\n    message += global.get(\"bodyMSg_PT100\");               //String\n    message += \",\";\n    message += global.get(\"addrTo_PT100\");                //String\n    message += \",\";\n    message += global.get(\"addrCc_PT100\");                //Strng\n    message += \",\";\n    message += global.get(\"addrBcc_PT100\");               //String\n    message += \",\";\n    message += global.get(\"subjectParameters_PT100\");     //String of bools\n    message += \",\";\n    message += global.get(\"bodyParameters_PT100\");        //String of bools\n} else {\n    message = global.get(\"subjectMSg_4n20\");            //String\n    message += \",\";\n    message += global.get(\"bodyMSg_4n20\");               //String\n    message += \",\";\n    message += global.get(\"addrTo_4n20\");                //String\n    message += \",\";\n    message += global.get(\"addrCc_4n20\");                //Strng\n    message += \",\";\n    message += global.get(\"addrBcc_4n20\");               //String\n    message += \",\";\n    message += global.get(\"subjectParameters_4n20\");     //String of bools\n    message += \",\";\n    message += global.get(\"bodyParameters_4n20\");        //String of bools    \n}\nmsg.payload = message;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 1760,
        "wires": [
            [
                "c436e13a5ea938e5"
            ]
        ]
    },
    {
        "id": "a75afe61b6d5ccee",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Email template loaded successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1660,
        "wires": [
            [
                "c436e13a5ea938e5"
            ]
        ]
    },
    {
        "id": "2f998322e62a9169",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Clearing Server File Directory...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1320,
        "wires": [
            [
                "c436e13a5ea938e5"
            ]
        ]
    },
    {
        "id": "f44b5013228582f0",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Downloading new Firmware...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1240,
        "wires": [
            [
                "c436e13a5ea938e5"
            ]
        ]
    },
    {
        "id": "98e2b118e3bc395f",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Uploading new Firmware...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 1000,
        "wires": [
            [
                "18fa8c0b4fdec3e3"
            ]
        ]
    },
    {
        "id": "03a665934fda6741",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\") || \"\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1520,
        "wires": [
            [
                "c436e13a5ea938e5"
            ]
        ]
    },
    {
        "id": "54b6c5276e2726e8",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nlet siteID = global.get(\"siteID\", siteID);\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"SiteID updated <\" + siteID + \">\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 680,
        "wires": [
            [
                "9ba9bc7a837d01f4"
            ]
        ]
    },
    {
        "id": "44b2529bf9b3e5a3",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\") || \"\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1380,
        "wires": [
            [
                "c436e13a5ea938e5"
            ]
        ]
    },
    {
        "id": "7992f46debb18422",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Query on Local Database Executed Successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 580,
        "wires": [
            [
                "c9b6a56fafd98e4e"
            ]
        ]
    },
    {
        "id": "aa56e622f89278ca",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"New Equipment ID has been issued to Outstation.\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 840,
        "wires": [
            [
                "18fa8c0b4fdec3e3"
            ]
        ]
    },
    {
        "id": "c21c2a4c1dc9b59e",
        "type": "mqtt out",
        "z": "1e6e2a7814f49052",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 330,
        "y": 2280,
        "wires": []
    },
    {
        "id": "484487b7dfeb3c6b",
        "type": "mqtt out",
        "z": "1e6e2a7814f49052",
        "name": "MQTT Cloud",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4d64fa3d.ad0334",
        "x": 330,
        "y": 2340,
        "wires": []
    },
    {
        "id": "94e54e4fe4565d31",
        "type": "link in",
        "z": "1e6e2a7814f49052",
        "name": "MQTT Local | Remote",
        "links": [
            "8dfec6f35857111a",
            "1608f574c3b1e0aa",
            "e8fa53495217f026",
            "53445a8c23521fa3",
            "cf48a5fad79e7eeb",
            "c9b6a56fafd98e4e",
            "bb85ab5edbfd4153",
            "b27d67d062f105f8",
            "d95a6e2ff7541696",
            "fa06b70f7a963216",
            "fa9a900be07f9134",
            "d509e25f2215d8bc",
            "2db8acaca6f9bced",
            "c436e13a5ea938e5",
            "bea294b11657b048",
            "18fa8c0b4fdec3e3",
            "46eb161b2491b0d6",
            "e25579c6.4f04d8",
            "b786cfa4a5d8d596",
            "699294a4.9b178c",
            "8525b4835e526f40",
            "9ba9bc7a837d01f4"
        ],
        "x": 195,
        "y": 2300,
        "wires": [
            [
                "484487b7dfeb3c6b",
                "c21c2a4c1dc9b59e"
            ]
        ]
    },
    {
        "id": "c436e13a5ea938e5",
        "type": "link out",
        "z": "1e6e2a7814f49052",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 1575,
        "y": 1400,
        "wires": []
    },
    {
        "id": "18fa8c0b4fdec3e3",
        "type": "link out",
        "z": "1e6e2a7814f49052",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 1375,
        "y": 920,
        "wires": []
    },
    {
        "id": "c9b6a56fafd98e4e",
        "type": "link out",
        "z": "1e6e2a7814f49052",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 1375,
        "y": 500,
        "wires": []
    },
    {
        "id": "bb85ab5edbfd4153",
        "type": "link out",
        "z": "1e6e2a7814f49052",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 575,
        "y": 80,
        "wires": []
    },
    {
        "id": "a2556425116d1bfc",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "GLOBAL DEVICE SEARCH",
        "info": "",
        "x": 140,
        "y": 140,
        "wires": []
    },
    {
        "id": "c246ec8ee4672ba6",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "Poll Cycle Times",
        "info": "",
        "x": 120,
        "y": 1840,
        "wires": []
    },
    {
        "id": "68c1bbe9c31ffcae",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "MONICON-PLC/STAT/TenSecondLoopLimit/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 210,
        "y": 1880,
        "wires": [
            [
                "6d012563f8268a33"
            ]
        ]
    },
    {
        "id": "6d012563f8268a33",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 1880,
        "wires": [
            [
                "2db8acaca6f9bced"
            ]
        ]
    },
    {
        "id": "2db8acaca6f9bced",
        "type": "link out",
        "z": "1e6e2a7814f49052",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 735,
        "y": 1880,
        "wires": []
    },
    {
        "id": "49576f4839feb873",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "Task Complete Messages",
        "info": "",
        "x": 150,
        "y": 1940,
        "wires": []
    },
    {
        "id": "9507e76021c47182",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "MONICON-PLC/STAT/RespondMessages/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 210,
        "y": 1980,
        "wires": [
            [
                "219952c4adde4482"
            ]
        ]
    },
    {
        "id": "219952c4adde4482",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 1980,
        "wires": [
            [
                "53445a8c23521fa3"
            ]
        ]
    },
    {
        "id": "53445a8c23521fa3",
        "type": "link out",
        "z": "1e6e2a7814f49052",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 735,
        "y": 1980,
        "wires": []
    },
    {
        "id": "70da727aa489d1aa",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "Enable Analog Timer to Stream values to Broker",
        "info": "",
        "x": 220,
        "y": 2040,
        "wires": []
    },
    {
        "id": "be85b75000320ee0",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpgradeGrafana/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "inputs": 0,
        "x": 210,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "d57cdf5e50df0327",
        "type": "exec",
        "z": "1e6e2a7814f49052",
        "command": "sudo /home/pi/JC/grafanaGithubSetup.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Update Local Grafana Dashboard ",
        "x": 840,
        "y": 2080,
        "wires": [
            [
                "fc64727fdc14908d"
            ],
            [
                "0441661d8b1d1dbb"
            ],
            []
        ]
    },
    {
        "id": "6765955e9e2ad391",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Check Server",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 2080,
        "wires": [
            [
                "d57cdf5e50df0327"
            ]
        ]
    },
    {
        "id": "fc64727fdc14908d",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Local Grafana Updated Successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 2100,
        "wires": [
            [
                "fa06b70f7a963216"
            ]
        ]
    },
    {
        "id": "fa06b70f7a963216",
        "type": "link out",
        "z": "1e6e2a7814f49052",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 1255,
        "y": 2100,
        "wires": []
    },
    {
        "id": "31ece799b23c6a1a",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpgradeGrafana/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 210,
        "y": 2140,
        "wires": [
            [
                "6765955e9e2ad391"
            ]
        ]
    },
    {
        "id": "0441661d8b1d1dbb",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 2160,
        "wires": [
            [
                "fa06b70f7a963216"
            ]
        ]
    },
    {
        "id": "e284d8ad30f0f944",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1280,
        "wires": [
            [
                "c436e13a5ea938e5"
            ]
        ]
    },
    {
        "id": "cb4f7ead5bd7c10c",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1450,
        "y": 1180,
        "wires": [
            [
                "c436e13a5ea938e5"
            ]
        ]
    },
    {
        "id": "94a4a80b979038f2",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1130,
        "y": 320,
        "wires": [
            [
                "8525b4835e526f40"
            ]
        ]
    },
    {
        "id": "367191c46cbe5b87",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "sess/MONICON-PLC/ENG/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 320,
        "wires": [
            [
                "0498073922c44000"
            ]
        ]
    },
    {
        "id": "0498073922c44000",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "ENG => CMD",
        "func": "msg.topic = msg.topic.replace(\"ENG\", \"CMD\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 320,
        "wires": [
            [
                "0439e477aa678f88"
            ]
        ]
    },
    {
        "id": "7616604af38f2278",
        "type": "mqtt in",
        "z": "1e6e2a7814f49052",
        "name": "",
        "topic": "sess/MONICON-PLC/PUB/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 380,
        "wires": [
            [
                "81c58ea29020bbca"
            ]
        ]
    },
    {
        "id": "81c58ea29020bbca",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "PUB => CMD",
        "func": "msg.topic = msg.topic.replace(\"PUB\", \"CMD\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 380,
        "wires": [
            [
                "0439e477aa678f88"
            ]
        ]
    },
    {
        "id": "b0021a3f672a0e95",
        "type": "comment",
        "z": "1e6e2a7814f49052",
        "name": "MASTER MQTT LINK",
        "info": "",
        "x": 140,
        "y": 2220,
        "wires": []
    },
    {
        "id": "95b07b111c80166a",
        "type": "Uptime",
        "z": "1e6e2a7814f49052",
        "name": "",
        "x": 420,
        "y": 580,
        "wires": [
            [
                "f7f540a0bdf77efb"
            ]
        ]
    },
    {
        "id": "f7f540a0bdf77efb",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Uptime",
        "func": "var data = msg.payload.uptime\n\nlet days = parseInt(data / 86400)\nlet hours = parseInt((data % 86400) / 3600)\nlet minutes = parseInt(((data % 86400) % 3600) / 60)\nlet secs = parseInt(((data % 86400) % 3600) % 60)\n\nlet msg1 = {payload: \"Days[\" + days + \"] Hours[\" + hours + \"] Mins[\" + minutes + \"] Sec[\" + secs + \"]\", topic: \"MONICON/STAT/OS/UPTIME\"};\nmsg1.topic = msg.topic;\nflow.set(\"uptime\",msg1.payload);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "08b492730be3ed95",
        "type": "delay",
        "z": "1e6e2a7814f49052",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 500,
        "wires": [
            [
                "f21aeb0f78e32c89"
            ]
        ]
    },
    {
        "id": "c0a015cf6e72c253",
        "type": "Drives",
        "z": "1e6e2a7814f49052",
        "name": "",
        "x": 410,
        "y": 620,
        "wires": [
            [
                "23c0e2cfd5b379ef"
            ]
        ]
    },
    {
        "id": "23c0e2cfd5b379ef",
        "type": "function",
        "z": "1e6e2a7814f49052",
        "name": "Disk Size (GB)",
        "func": "var data = msg.payload[0]\n\nvar diskSize = String((data.size / 1000000).toFixed(2)) + \",\" + String((data.used / 1000000).toFixed(2)) + \",\" + String((data.available / 1000000).toFixed(2)) + \",\" + String((data.capacity * 100).toFixed(0))\n\nvar msg1 = { payload: diskSize, topic: \"MONICON/STAT/OS/DISK\" }\n\nflow.set(\"diskSize\", msg1.payload);\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "8525b4835e526f40",
        "type": "link out",
        "z": "1e6e2a7814f49052",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 1375,
        "y": 320,
        "wires": []
    },
    {
        "id": "9ba9bc7a837d01f4",
        "type": "link out",
        "z": "1e6e2a7814f49052",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 1375,
        "y": 680,
        "wires": []
    },
    {
        "id": "b8d42c84ce6ae57f",
        "type": "inject",
        "z": "d39e2b8c53590482",
        "name": "Accumulator",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "075473f26f2c1034"
            ]
        ]
    },
    {
        "id": "075473f26f2c1034",
        "type": "function",
        "z": "d39e2b8c53590482",
        "name": "AccumulatorRequest 24hr",
        "func": "//var hour = new Date().getHours();\n//if (hour === 0) {\n    for (var r = 0; r < 7; r++) {\n            msg.topic = \"MONICON-PLC/CMD/AccumulatorRequest/\";\n            msg.payload = String(r);\n            node.send(msg);\n       \n    }\n    // for (var c = 0; c < 7; c++) {\n    //         msg.topic = \"MONICON-PLC/CMD/AccumulatorClear/\";\n    //         msg.payload = String(c);\n    //         node.send(msg);\n       \n    // }\n//}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 100,
        "wires": [
            [
                "6c5cec27b92478d6"
            ]
        ]
    },
    {
        "id": "483c7b9517dd17d0",
        "type": "mqtt in",
        "z": "d39e2b8c53590482",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorOne/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 240,
        "y": 240,
        "wires": [
            [
                "e1673593432fb36f"
            ]
        ]
    },
    {
        "id": "c2bee645ef1761f4",
        "type": "mqtt in",
        "z": "d39e2b8c53590482",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorTwo/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 240,
        "y": 280,
        "wires": [
            [
                "e1673593432fb36f"
            ]
        ]
    },
    {
        "id": "9c58f049ddc1dee2",
        "type": "mqtt in",
        "z": "d39e2b8c53590482",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorThree/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 240,
        "y": 320,
        "wires": [
            [
                "e1673593432fb36f"
            ]
        ]
    },
    {
        "id": "c002ccb62dc76005",
        "type": "mqtt in",
        "z": "d39e2b8c53590482",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorFour/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 240,
        "y": 360,
        "wires": [
            [
                "e1673593432fb36f"
            ]
        ]
    },
    {
        "id": "57c7904b451a4c70",
        "type": "mqtt in",
        "z": "d39e2b8c53590482",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorFive/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 240,
        "y": 400,
        "wires": [
            [
                "e1673593432fb36f"
            ]
        ]
    },
    {
        "id": "4b9936d84bff5814",
        "type": "mqtt in",
        "z": "d39e2b8c53590482",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorSix/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 250,
        "y": 440,
        "wires": [
            [
                "e1673593432fb36f"
            ]
        ]
    },
    {
        "id": "fb88004d40e417d1",
        "type": "mqtt in",
        "z": "d39e2b8c53590482",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorSeven/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 240,
        "y": 480,
        "wires": [
            [
                "e1673593432fb36f"
            ]
        ]
    },
    {
        "id": "6c5cec27b92478d6",
        "type": "mqtt out",
        "z": "d39e2b8c53590482",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 830,
        "y": 100,
        "wires": []
    },
    {
        "id": "e1673593432fb36f",
        "type": "link out",
        "z": "d39e2b8c53590482",
        "name": "Accumulators",
        "links": [
            "097d0dbb790f89dd"
        ],
        "x": 795,
        "y": 240,
        "wires": []
    },
    {
        "id": "de69efe8bc9aca95",
        "type": "inject",
        "z": "1f21503adee6eb9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "Server_Heartbeat",
        "payload": "*",
        "payloadType": "str",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "0bfc4665184af30c",
                "570d5069846c2fd5"
            ]
        ]
    },
    {
        "id": "0bfc4665184af30c",
        "type": "trigger",
        "z": "1f21503adee6eb9d",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0.250",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 600,
        "y": 180,
        "wires": [
            [
                "d9b9041799dd3b12",
                "86e8f835508c7070"
            ]
        ]
    },
    {
        "id": "d9b9041799dd3b12",
        "type": "rpi-gpio out",
        "z": "1f21503adee6eb9d",
        "name": "Heartbeat Server - GPIO18",
        "pin": "18",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1040,
        "y": 180,
        "wires": []
    },
    {
        "id": "6d9159fa38f8383e",
        "type": "mqtt in",
        "z": "1f21503adee6eb9d",
        "name": "",
        "topic": "MONICON-PLC/CMD/Heartbeat/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 300,
        "wires": [
            [
                "f2154eafb8932155"
            ]
        ]
    },
    {
        "id": "4540d068ca108f7b",
        "type": "trigger",
        "z": "1f21503adee6eb9d",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "2.5",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 590,
        "y": 300,
        "wires": [
            [
                "76dd1b3f4d8d6149"
            ]
        ]
    },
    {
        "id": "366b7fcc38c0dca4",
        "type": "comment",
        "z": "1f21503adee6eb9d",
        "name": "Watchdog Timer Supervisor - Server Heartbeat",
        "info": "",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "02ddadde1371312b",
        "type": "comment",
        "z": "1f21503adee6eb9d",
        "name": "Watchdog Timer Supervisor - Server Heartbeat",
        "info": "",
        "x": 220,
        "y": 260,
        "wires": []
    },
    {
        "id": "96a99f0247cfd4ca",
        "type": "function",
        "z": "1f21503adee6eb9d",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tSystem: \"Heartbeat\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[0]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "f08f794da7608242"
            ]
        ]
    },
    {
        "id": "c75160d5acfc25d1",
        "type": "function",
        "z": "1f21503adee6eb9d",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"OS\",\n\n        fields: {\n\t\t\t[topic[0]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            System: \"Heartbeat\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "48b2b4916ed9db36"
            ]
        ]
    },
    {
        "id": "48b2b4916ed9db36",
        "type": "link out",
        "z": "1f21503adee6eb9d",
        "name": "",
        "links": [
            "28040d237dcdb782"
        ],
        "x": 1135,
        "y": 240,
        "wires": []
    },
    {
        "id": "f08f794da7608242",
        "type": "link out",
        "z": "1f21503adee6eb9d",
        "name": "",
        "links": [
            "02028bbe0188b4ea"
        ],
        "x": 1135,
        "y": 300,
        "wires": []
    },
    {
        "id": "b70006d65911ea85",
        "type": "comment",
        "z": "1f21503adee6eb9d",
        "name": "Database | Local",
        "info": "",
        "x": 1240,
        "y": 240,
        "wires": []
    },
    {
        "id": "34218aa684907871",
        "type": "comment",
        "z": "1f21503adee6eb9d",
        "name": "Database | Remote",
        "info": "",
        "x": 1250,
        "y": 300,
        "wires": []
    },
    {
        "id": "76dd1b3f4d8d6149",
        "type": "function",
        "z": "1f21503adee6eb9d",
        "name": "Formatting",
        "func": "msg.topic = \"PLC_Heartbeat\";\nflow.set(\"PLC_Heartbeat\", \"1\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 300,
        "wires": [
            [
                "c75160d5acfc25d1",
                "96a99f0247cfd4ca"
            ]
        ]
    },
    {
        "id": "86e8f835508c7070",
        "type": "function",
        "z": "1f21503adee6eb9d",
        "name": "Formatting",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 240,
        "wires": [
            [
                "96a99f0247cfd4ca",
                "c75160d5acfc25d1"
            ]
        ]
    },
    {
        "id": "f2154eafb8932155",
        "type": "function",
        "z": "1f21503adee6eb9d",
        "name": "MoniconPLC-1",
        "func": "if(msg.payload == \"MoniconPLC-1\") {\n    return msg;\n} else {\n    return;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 300,
        "wires": [
            [
                "4540d068ca108f7b"
            ]
        ]
    },
    {
        "id": "a4ae9c769a196f75",
        "type": "trigger",
        "z": "1f21503adee6eb9d",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0.250",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 780,
        "y": 80,
        "wires": [
            [
                "d9b9041799dd3b12"
            ]
        ]
    },
    {
        "id": "570d5069846c2fd5",
        "type": "delay",
        "z": "1f21503adee6eb9d",
        "name": "",
        "pauseType": "delay",
        "timeout": "750",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 590,
        "y": 140,
        "wires": [
            [
                "a4ae9c769a196f75"
            ]
        ]
    },
    {
        "id": "cfec671d82f59c05",
        "type": "rpi-gpio out",
        "z": "1f21503adee6eb9d",
        "name": "Heartbeat Server - GPIO18",
        "pin": "18",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1240,
        "y": 560,
        "wires": []
    },
    {
        "id": "d98ad0f92aeb5c77",
        "type": "trigger",
        "z": "1f21503adee6eb9d",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "10",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 560,
        "wires": [
            [
                "cfec671d82f59c05",
                "4c5d004a8d93f954",
                "7da2d0489d69e6d9"
            ]
        ]
    },
    {
        "id": "7892f50454c39879",
        "type": "rpi-gpio in",
        "z": "1f21503adee6eb9d",
        "name": "Safe Shutdown - Panel Button GPIO16",
        "pin": "16",
        "intype": "up",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 190,
        "y": 640,
        "wires": [
            [
                "970555fb7d109515",
                "036a18215b84674d"
            ]
        ]
    },
    {
        "id": "970555fb7d109515",
        "type": "delay",
        "z": "1f21503adee6eb9d",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 640,
        "y": 560,
        "wires": [
            [
                "d98ad0f92aeb5c77"
            ]
        ]
    },
    {
        "id": "96318292cb183818",
        "type": "function",
        "z": "1f21503adee6eb9d",
        "name": "Reset",
        "func": "msg.reset = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 560,
        "wires": [
            [
                "970555fb7d109515"
            ]
        ]
    },
    {
        "id": "b1ee75acbb39ec2e",
        "type": "delay",
        "z": "1f21503adee6eb9d",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 280,
        "y": 560,
        "wires": [
            [
                "96318292cb183818"
            ]
        ]
    },
    {
        "id": "036a18215b84674d",
        "type": "function",
        "z": "1f21503adee6eb9d",
        "name": "Reset",
        "func": "if (msg.payload === 0) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "b1ee75acbb39ec2e"
            ]
        ]
    },
    {
        "id": "134a2376041ea7ef",
        "type": "exec",
        "z": "1f21503adee6eb9d",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Shutdown Pi",
        "x": 1190,
        "y": 640,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "4c5d004a8d93f954",
        "type": "delay",
        "z": "1f21503adee6eb9d",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1020,
        "y": 640,
        "wires": [
            [
                "134a2376041ea7ef"
            ]
        ]
    },
    {
        "id": "75b59d38bbeabb21",
        "type": "link out",
        "z": "1f21503adee6eb9d",
        "name": "Reset",
        "links": [
            "7748a739e4fb8f61"
        ],
        "x": 1135,
        "y": 500,
        "wires": []
    },
    {
        "id": "7da2d0489d69e6d9",
        "type": "function",
        "z": "1f21503adee6eb9d",
        "name": "Reset",
        "func": "msg.reset = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 500,
        "wires": [
            [
                "75b59d38bbeabb21"
            ]
        ]
    },
    {
        "id": "7748a739e4fb8f61",
        "type": "link in",
        "z": "1f21503adee6eb9d",
        "name": "",
        "links": [
            "75b59d38bbeabb21"
        ],
        "x": 255,
        "y": 80,
        "wires": [
            [
                "570d5069846c2fd5",
                "0bfc4665184af30c",
                "a4ae9c769a196f75"
            ]
        ]
    },
    {
        "id": "990713a4eac28254",
        "type": "comment",
        "z": "1f21503adee6eb9d",
        "name": "Reset",
        "info": "",
        "x": 170,
        "y": 80,
        "wires": []
    },
    {
        "id": "24843a36e9093b8e",
        "type": "comment",
        "z": "1f21503adee6eb9d",
        "name": "Reset",
        "info": "",
        "x": 1210,
        "y": 500,
        "wires": []
    },
    {
        "id": "b7643e8badbd397d",
        "type": "rpi-gpio out",
        "z": "1f21503adee6eb9d",
        "name": "Fan - GPIO12",
        "pin": "12",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1200,
        "y": 780,
        "wires": []
    },
    {
        "id": "0c337db2be7c7ffb",
        "type": "comment",
        "z": "1f21503adee6eb9d",
        "name": "Fan Temperature Control - OS Output",
        "info": "",
        "x": 190,
        "y": 740,
        "wires": []
    },
    {
        "id": "eff290824f2ec191",
        "type": "link in",
        "z": "1f21503adee6eb9d",
        "name": "Fan Controller",
        "links": [
            "a461d5bee7f23a7f"
        ],
        "x": 55,
        "y": 780,
        "wires": [
            [
                "d8f18f6ce307b6c9"
            ]
        ]
    },
    {
        "id": "d8f18f6ce307b6c9",
        "type": "function",
        "z": "1f21503adee6eb9d",
        "name": "Temperature Threshold",
        "func": "// Check Temperature Thresholds\nif (msg.payload > 55) {\n    msg.payload = 1;\n    return msg;\n} else if (msg.payload < 50) {\n    msg.payload = 0; \n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 780,
        "wires": [
            [
                "b7643e8badbd397d"
            ]
        ]
    },
    {
        "id": "4c81fe2f61193d90",
        "type": "rpi-gpio out",
        "z": "1f21503adee6eb9d",
        "name": "SIXFAB HAT POWER PIN - GPIO26",
        "pin": "26",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 770,
        "y": 960,
        "wires": []
    },
    {
        "id": "b435a7d4041275ab",
        "type": "http request",
        "z": "1f21503adee6eb9d",
        "name": "Internet Check",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://gogle.com",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 280,
        "y": 900,
        "wires": [
            [
                "67ed1cef488d84c3"
            ]
        ]
    },
    {
        "id": "8116e67aad2cc859",
        "type": "inject",
        "z": "1f21503adee6eb9d",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 110,
        "y": 900,
        "wires": [
            [
                "b435a7d4041275ab"
            ]
        ]
    },
    {
        "id": "67ed1cef488d84c3",
        "type": "function",
        "z": "1f21503adee6eb9d",
        "name": "Reset SIXFAB HAT",
        "func": "if(msg.statusCode != 200) {\n    msg.payload = 1;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 900,
        "wires": [
            [
                "4c81fe2f61193d90",
                "8f722ca57fe3c276"
            ]
        ]
    },
    {
        "id": "4c18c88f73e5b41b",
        "type": "exec",
        "z": "1f21503adee6eb9d",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Reboot",
        "x": 1180,
        "y": 900,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "c0fe8598b87a89c7",
        "type": "comment",
        "z": "1f21503adee6eb9d",
        "name": "Check Internet Connection every Hour",
        "info": "",
        "x": 190,
        "y": 860,
        "wires": []
    },
    {
        "id": "8f722ca57fe3c276",
        "type": "delay",
        "z": "1f21503adee6eb9d",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 680,
        "y": 900,
        "wires": [
            [
                "59a602ea31d821d8"
            ]
        ]
    },
    {
        "id": "59a602ea31d821d8",
        "type": "exec",
        "z": "1f21503adee6eb9d",
        "command": "echo '1-1' |sudo tee /sys/bus/usb/drivers/usb/unbind",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Unbind",
        "x": 860,
        "y": 900,
        "wires": [
            [
                "5f9686739e4c41cf"
            ],
            [],
            []
        ]
    },
    {
        "id": "5f9686739e4c41cf",
        "type": "exec",
        "z": "1f21503adee6eb9d",
        "command": "echo '1-1' |sudo tee /sys/bus/usb/drivers/usb/bind",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Bind",
        "x": 1010,
        "y": 900,
        "wires": [
            [
                "4c18c88f73e5b41b"
            ],
            [],
            []
        ]
    },
    {
        "id": "3fb4aac43408cd5b",
        "type": "comment",
        "z": "1f21503adee6eb9d",
        "name": "Safe Shutdown - Button Input",
        "info": "",
        "x": 160,
        "y": 380,
        "wires": []
    },
    {
        "id": "f47a5074b70238d0",
        "type": "inject",
        "z": "1f21503adee6eb9d",
        "name": "Check Heartbeat else Reboot",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 190,
        "y": 420,
        "wires": [
            [
                "ad57740ab24e5756"
            ]
        ]
    },
    {
        "id": "ad57740ab24e5756",
        "type": "function",
        "z": "1f21503adee6eb9d",
        "name": "Formatting",
        "func": "var HB = flow.get(\"PLC_Heartbeat\");\nif (HB === \"1\") {\n    flow.set(\"PLC_Heartbeat\", \"0\");\n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 770,
        "y": 420,
        "wires": [
            [
                "09298742205ca7ef"
            ]
        ]
    },
    {
        "id": "09298742205ca7ef",
        "type": "exec",
        "z": "1f21503adee6eb9d",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Shutdown Pi",
        "x": 1190,
        "y": 420,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "6597a5aedda12a1c",
        "type": "function",
        "z": "e7f314431ced4df1",
        "name": "Check Timers",
        "func": "/////////////// Splict message into an array ///////////////\n//var data = msg.payload.split(\",\");\n//data[0] = id\n//data[1] = sw\n//data[2] = type\n//data[3] = index\n//data[4] = action\n//data[5] = milliseconds(onTime)\n//data[6] = milliseconds(offTime)\n//data[7] = repeat\n//data[8] = enable\n//data[9] = RoomName/SwitchName\n\nvar digitalOutputID = 0;\n\nvar timerArray = flow.get(\"timers\") || null;\n\nif(timerArray === null) {\n    return;\n}\n\nif (Object.keys(timerArray).length === 0 ) {\n    return;\n}\n\n\nvar currentTime = new Date().getTime();\n\n/////////////// Action Manifold ///////////////\nfor (let [key, value] of Object.entries(timerArray.id)) {\n    let serial = key;\n    \n    //msg.payload = key;\n    //node.send(msg);\n    \n    for (let [key, value] of Object.entries(timerArray.id[serial].index)) {\n\n        actionSelection(value, serial);\n        \n        // msg.payload = value;\n        // node.send(msg);\n    }\n}\n\nfunction actionSelection(value, serial) {\n    if (value.action == \"On\" ) {\n    } \n    else if (value.action == \"Off\") {\n    }\n    else if (value.action == \"ON/OFF\" ) {\n        timerList(value, serial);\n    }\n}\n\nfunction timerList(value, serial) {\n    \n    if(value.type == \"LightPro\") {\n        if(value.sw == \"sw0\") {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial;\n            digitalOutputID = 0;\n        } \n        else if (value.sw == \"sw1\") {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial; \n            digitalOutputID = 1;\n        } else {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial;\n            digitalOutputID = 2;\n        }\n    } else {\n        msg.topic = \"sess/MONICON-PLC/CMD/RELAY/\" + serial;\n    }\n\n    if (value.on.trig == \"1\" && checkTime(value.on.time)) {\n        if (value.repeat == \"1\") {\n            value.on.trig = \"1\";\n            value.on.time = DateCalculator(value.on.time); // Add 60 seconds\n            value.on.seconds = String(new Date(value.on.time).getTime());\n            msg.date = value.on.time;\n        } else {\n            value.on.trig = \"0\";\n        }\n        msg.id = value.id;\n        msg.name = value.name;\n        msg.payload = String(digitalOutputID) + \",\" + 1;\n        \n        flow.set(\"timers\", timerArray);\n        node.send(msg);\n    } \n    if (value.off.trig == \"1\" && checkTime(value.off.time)) {\n        if (value.repeat == \"1\") {\n            value.off.trig = \"1\";\n            value.off.time = DateCalculator(value.off.time); // Add 60 seconds\n            value.off.seconds = String(new Date(value.off.time).getTime());\n            msg.date = value.off.time;\n        } else {\n            value.off.trig = \"0\";\n        }\n        msg.id = value.id;\n        msg.name = value.name;\n        msg.payload = String(digitalOutputID) + \",\" + 0;\n\n        flow.set(\"timers\", timerArray);\n        node.send(msg);\n    } \n}\n\nfunction DateCalculator(time) {\n    //msg.payload = time\n    //return msg\n    var thisTime = new Date(time);\n    \n    thisTime.setHours(thisTime.getHours());\n    thisTime.setMinutes(thisTime.getMinutes());\n    thisTime.setSeconds(0);\n\n    //thisTime.setDate(new Date().getDate() + 1);\n    thisTime.setDate(new Date().getDate())\n    thisTime.setMonth(new Date().getMonth());\n    thisTime.setFullYear(new Date().getFullYear());\n    \n    var milliSeconds = thisTime.getTime() + 86400000;\n    \n    thisTime = new Date(milliSeconds);\n    \n    return thisTime;\n}\n\nfunction checkTime(time) {\n    if (new Date(time).getTime() < new Date().getTime()) {\n        return true\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 120,
        "wires": [
            [
                "efc2a43f654efbd0"
            ]
        ]
    },
    {
        "id": "5816a4188e2f034b",
        "type": "inject",
        "z": "e7f314431ced4df1",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "6597a5aedda12a1c"
            ]
        ]
    },
    {
        "id": "d25b5602518fd514",
        "type": "comment",
        "z": "e7f314431ced4df1",
        "name": "Check Existing Alarms",
        "info": "",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "8d70b12c8a82710b",
        "type": "function",
        "z": "e7f314431ced4df1",
        "name": "Create",
        "func": "/////////////// Splict message into an array ///////////////\nvar data = msg.payload.split(\",\");\n// var data = [];\n// data[0] = \"9020802\"                     //id\n// data[1] = \"sw1\"                         //sw\n// data[2] = \"LightPro\"                    //type\n// data[3] = \"0\"                           //index\n// data[4] = \"On/Off\"                      //action\n// data[5] = \"2020/04/16 19:30\"            //milliseconds(onTime)\n// data[6] = \"2020/04/16 19:32\"            //milliseconds(offTime)\n// data[7] = \"1\"                           //repeat\n// data[8] = \"1\"                           //enable\n// data[9] = \"Master Bedroom/Light\"        //RoomName/SwitchName\n\nlet t1 = new Date(new Date(parseInt(data[5])));\nlet t2 = new Date(new Date(parseInt(data[6])));\n\n// let t1 = new Date(new Date().getTime() + 300000);\n// let t2 = new Date(new Date().getTime() + 30000);\n\nvar timer = flow.get(\"timers.id[\\\"\" + data[0] + \"\\\"].index[\\\"\" + data[3] + \"\\\"]\") || { id: data[0], sw: data[1], type: data[2], index: data[3], action: data[4], on:{trig:data[8], time: t1, seconds: data[6] }, off:{trig:data[8], time: t2, seconds: data[5] }, repeat: data[7], state: data[8], name: data[9] } ; \n\ntimer = { id: data[0], sw: data[1], type: data[2], index: data[3], action: data[4], on:{trig:data[8], time: t1, seconds: data[5] }, off:{trig:data[8], time: t2, seconds: data[6] }, repeat: data[7], state: data[8], name: data[9] } ; \n\nflow.set(\"timers.id[\\\"\" + data[0] + \"\\\"].index[\\\"\" + data[3] + \"\\\"]\", timer);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "b99e3836fa92e9d5",
        "type": "function",
        "z": "e7f314431ced4df1",
        "name": "Delete",
        "func": "/////////////// Splict message into an array ///////////////\nvar data = msg.payload.split(\",\");\nlet id = String(data[0])\nlet sw = data[1]\nlet index = String(data[2])\n\n/////////////// Get Timers ///////////////\nvar timer = flow.get(\"timers\") ;\n\n/////////////// Get Timer Object ///////////////\ndelete timer.id[id].index[index]\n",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "d5debf986a581ae6",
        "type": "function",
        "z": "e7f314431ced4df1",
        "name": "",
        "func": "/////////////// Get Timers ///////////////\nvar timer = flow.get(\"timers\") ;\n\n/////////////// Get Timer Object ///////////////\nvar obj = timer.id[msg.payload];\nmsg.topic = \"sess/MONICON-PLC/STAT/GetTimers/\" + msg.payload;\n\n/////////////// If Object doesn't exist, send empty object ///////////////\n// if(obj === undefined) {\n//     msg = {payload: {  }, topic: msg.topic};\n//     msg.topic = \"\"\n//     return ;\n// }\n// /////////////// Send Timer Object ///////////////\n// else {\n    var msg1 = { payload: obj, topic: msg.topic };\n\n    return msg1;\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 840,
        "y": 300,
        "wires": [
            [
                "f2a5c0b318809a8b"
            ]
        ]
    },
    {
        "id": "950fa654009c16c0",
        "type": "mqtt in",
        "z": "e7f314431ced4df1",
        "name": "",
        "topic": "MONICON-PLC/CMD/setTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "c1cdf04941759d77"
            ]
        ]
    },
    {
        "id": "efc2a43f654efbd0",
        "type": "function",
        "z": "e7f314431ced4df1",
        "name": "Return Timers",
        "func": "var cmd = msg.payload.split(\",\");\nif(cmd[1] === \"1\" || cmd[1] === \"0\") {\n    // Update iOS device timer list\nvar msg1 = { payload: msg.id, topic: \"sess/MONICON-PLC/CMD/GetTimers/\" };\n    // Send Notification to user\nvar msg2 = { payload: msg.id + \",MONICON,\" + msg.name + \",\" + msg.payload, topic: \"sess/MONICON-PLC/STAT/Timers/Alert/\" };\n    // Send Command to Monicon device\nvar msg3 = { payload: msg.payload, topic: msg.topic };\n\nreturn [msg1, msg2, msg3]\n\n}\n\nreturn",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 120,
        "wires": [
            [
                "fa9a900be07f9134"
            ],
            [
                "fa9a900be07f9134"
            ],
            [
                "fa9a900be07f9134"
            ]
        ]
    },
    {
        "id": "fafe3a93a928c890",
        "type": "mqtt in",
        "z": "e7f314431ced4df1",
        "name": "",
        "topic": "MONICON-PLC/CMD/DeleteTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 160,
        "y": 240,
        "wires": [
            [
                "3fd89bd92019ad0a"
            ]
        ]
    },
    {
        "id": "cd1dd5b415014abd",
        "type": "mqtt in",
        "z": "e7f314431ced4df1",
        "name": "",
        "topic": "MONICON-PLC/CMD/GetTimers/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 170,
        "y": 300,
        "wires": [
            [
                "3e8b1fea859c18db"
            ]
        ]
    },
    {
        "id": "4fabd5a580db19fd",
        "type": "delay",
        "z": "e7f314431ced4df1",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 660,
        "y": 300,
        "wires": [
            [
                "d5debf986a581ae6"
            ]
        ]
    },
    {
        "id": "f2a5c0b318809a8b",
        "type": "json",
        "z": "e7f314431ced4df1",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 970,
        "y": 300,
        "wires": [
            [
                "fa9a900be07f9134"
            ]
        ]
    },
    {
        "id": "fa9a900be07f9134",
        "type": "link out",
        "z": "e7f314431ced4df1",
        "name": "",
        "links": [
            "94e54e4fe4565d31"
        ],
        "x": 1135,
        "y": 120,
        "wires": []
    },
    {
        "id": "3e8b1fea859c18db",
        "type": "function",
        "z": "e7f314431ced4df1",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "4fabd5a580db19fd"
            ]
        ]
    },
    {
        "id": "3fd89bd92019ad0a",
        "type": "function",
        "z": "e7f314431ced4df1",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 240,
        "wires": [
            [
                "b99e3836fa92e9d5"
            ]
        ]
    },
    {
        "id": "c1cdf04941759d77",
        "type": "function",
        "z": "e7f314431ced4df1",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 180,
        "wires": [
            [
                "8d70b12c8a82710b"
            ]
        ]
    },
    {
        "id": "f1f060cfbf3e1b9c",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_Fault_On_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Fault_On_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 80,
        "wires": [
            [
                "a65dce1205e2685c"
            ]
        ]
    },
    {
        "id": "d1d70f44c7293ac8",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "Input_Pressure_Jacket_rl",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Input_Pressure_Jacket_rl;datatype=INT",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 860,
        "wires": [
            [
                "ca82eec34743c867"
            ]
        ]
    },
    {
        "id": "8e5e6f2a8cdc7289",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "Input_GEN_Level_rl",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Input_GEN_Level_rl;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 920,
        "wires": [
            [
                "ca82eec34743c867"
            ]
        ]
    },
    {
        "id": "19f3377c2090d9fd",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_Cyc_Abort_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Cyc_Abort_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 120,
        "wires": [
            [
                "a65dce1205e2685c"
            ]
        ]
    },
    {
        "id": "75806a49c4e1d7c7",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_Cyc_ON_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Cyc_ON_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 160,
        "wires": [
            [
                "a65dce1205e2685c"
            ]
        ]
    },
    {
        "id": "0824228feab3a452",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_Low_Steam_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Low_Steam_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 200,
        "wires": [
            [
                "a65dce1205e2685c"
            ]
        ]
    },
    {
        "id": "95c017a89e4f7539",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_Low_Air_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Low_Air_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 240,
        "wires": [
            [
                "a65dce1205e2685c"
            ]
        ]
    },
    {
        "id": "cb3118e88e67bfe1",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_Low_Water_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Low_Water_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 280,
        "wires": [
            [
                "a65dce1205e2685c"
            ]
        ]
    },
    {
        "id": "8b2b5523558c8c5e",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_Low_Gask_Press_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Low_Gask_Press_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 320,
        "wires": [
            [
                "a65dce1205e2685c"
            ]
        ]
    },
    {
        "id": "a172d67a7b047d47",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_Low_Steri_Temp_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Low_Steri_Temp_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 460,
        "wires": [
            [
                "ee363e8a3d6aa915"
            ]
        ]
    },
    {
        "id": "38370d57d95972ed",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_Over_Temp_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Over_Temp_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 500,
        "wires": [
            [
                "ee363e8a3d6aa915"
            ]
        ]
    },
    {
        "id": "44a09086aa488558",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_Power_Interrupt_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Power_Interrupt_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 540,
        "wires": [
            [
                "ee363e8a3d6aa915"
            ]
        ]
    },
    {
        "id": "38a2fcab3fc38dee",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_Generator_Fault_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Generator_Fault_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 580,
        "wires": [
            [
                "ee363e8a3d6aa915"
            ]
        ]
    },
    {
        "id": "4eeddb563e22ed44",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_Door_Fault_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Door_Fault_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 620,
        "wires": [
            [
                "ee363e8a3d6aa915"
            ]
        ]
    },
    {
        "id": "442b6233d75926c0",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_SteamCharge_TO_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_SteamCharge_TO_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 660,
        "wires": [
            [
                "ee363e8a3d6aa915"
            ]
        ]
    },
    {
        "id": "20bdbd2fe5c8fec2",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_Pulsing_TO_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Pulsing_TO_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 700,
        "wires": [
            [
                "ee363e8a3d6aa915"
            ]
        ]
    },
    {
        "id": "6958d3af13ed391a",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "BMS_Excessive_Leak_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Excessive_Leak_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 740,
        "wires": [
            [
                "ee363e8a3d6aa915"
            ]
        ]
    },
    {
        "id": "2ac35e0cd0ad42e9",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "Temp_Water_Flow_rl",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Temp_Water_Flow_rl;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 980,
        "wires": [
            [
                "ca82eec34743c867"
            ]
        ]
    },
    {
        "id": "451a41131e581576",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "Input_Water_Flow_Temp_raw_rl",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Input_Water_Flow_Temp_raw_rl;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 1040,
        "wires": [
            [
                "ca82eec34743c867"
            ]
        ]
    },
    {
        "id": "fc57e15736441e69",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "Temp_Vac_Pump_Work_rl",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Temp_Vac_Pump_Work_rl;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1100,
        "wires": [
            [
                "ca82eec34743c867"
            ]
        ]
    },
    {
        "id": "8e764704efd87e7d",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "Press_Generator_Work_rl",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Press_Generator_Work_rl;datatype=Int16",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1160,
        "wires": [
            [
                "ca82eec34743c867"
            ]
        ]
    },
    {
        "id": "09ae027ebf9d774c",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "Temp_Drain_Work_rl",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Temp_Drain_Work_rl;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 1220,
        "wires": [
            [
                "ca82eec34743c867"
            ]
        ]
    },
    {
        "id": "b0cb1135285aa896",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "Input_HeatEx_temp_int",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Input_HeatEx_temp_int;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "9da2f9f9d2ff9cd0",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "Input_CondRem_Cham_temp_int",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Input_CondRem_Cham_temp_int;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "50466d520cfc3579",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "Input_CondRem_Jack_temp_int",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Input_CondRem_Jack_temp_int;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 1460,
        "wires": [
            []
        ]
    },
    {
        "id": "634b2abb3817c65a",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "Input_STM_Supply_Press_AI",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Input_STM_Supply_Press_AI;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1520,
        "wires": [
            []
        ]
    },
    {
        "id": "c6d06902ca7324d1",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "Input_AirDet_temp_int",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Input_AirDet_temp_int;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 1580,
        "wires": [
            []
        ]
    },
    {
        "id": "4966671ebb5bb8d5",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "Input_AIR_Supply_Press_AI",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Input_AIR_Supply_Press_AI;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "7aa524751416d126",
        "type": "inject",
        "z": "69e94d4e8116b018",
        "name": "Input_Vac_Pump_Level_DI",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Input_Vac_Pump_Level_DI;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1700,
        "wires": [
            []
        ]
    },
    {
        "id": "d61da20a4db933ab",
        "type": "function",
        "z": "69e94d4e8116b018",
        "name": "Remote Database",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: String(\"MoniconPLC-1\")\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[msg.topic]: msg.payload\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 220,
        "wires": [
            [
                "4959fe5f4add5e40"
            ]
        ]
    },
    {
        "id": "ee363e8a3d6aa915",
        "type": "OpcUa-Client",
        "z": "69e94d4e8116b018",
        "endpoint": "cf8a3eb46e5c3bb7",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 580,
        "y": 600,
        "wires": [
            [
                "f8ad775a5693753d"
            ]
        ]
    },
    {
        "id": "ca82eec34743c867",
        "type": "OpcUa-Client",
        "z": "69e94d4e8116b018",
        "endpoint": "cf8a3eb46e5c3bb7",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 580,
        "y": 1040,
        "wires": [
            [
                "7c60471fa12bab80"
            ]
        ]
    },
    {
        "id": "a65dce1205e2685c",
        "type": "OpcUa-Client",
        "z": "69e94d4e8116b018",
        "endpoint": "cf8a3eb46e5c3bb7",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 560,
        "y": 220,
        "wires": [
            [
                "d61da20a4db933ab"
            ]
        ]
    },
    {
        "id": "4959fe5f4add5e40",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "69e94d4e8116b018",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 1110,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "f8ad775a5693753d",
        "type": "function",
        "z": "69e94d4e8116b018",
        "name": "Remote Database",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: String(\"MoniconPLC-1\")\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[msg.topic]: msg.payload\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 600,
        "wires": [
            [
                "6a04e909952e315f"
            ]
        ]
    },
    {
        "id": "6a04e909952e315f",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "69e94d4e8116b018",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 1110,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "7c60471fa12bab80",
        "type": "function",
        "z": "69e94d4e8116b018",
        "name": "Remote Database",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: String(\"MoniconPLC-1\")\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[msg.topic]: msg.payload\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1040,
        "wires": [
            [
                "c21609c4e7de36f7"
            ]
        ]
    },
    {
        "id": "c21609c4e7de36f7",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "69e94d4e8116b018",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 1110,
        "y": 1040,
        "wires": [
            []
        ]
    }
]