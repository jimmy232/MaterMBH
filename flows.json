[
    {
        "id": "6b1264ad42661ce6",
        "type": "tab",
        "label": "Digitals",
        "disabled": false,
        "info": ""
    },
    {
        "id": "77dcc259164b475f",
        "type": "tab",
        "label": "Analog Alarms",
        "disabled": false,
        "info": ""
    },
    {
        "id": "cc05c00c17b512ba",
        "type": "tab",
        "label": "Analog Scale",
        "disabled": false,
        "info": ""
    },
    {
        "id": "3e9ce4f7b8528be4",
        "type": "tab",
        "label": "Control Panel",
        "disabled": false,
        "info": ""
    },
    {
        "id": "710285b7c318af7d",
        "type": "tab",
        "label": "DB Connections",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d3096a2fd8b67aef",
        "type": "tab",
        "label": "OS",
        "disabled": false,
        "info": ""
    },
    {
        "id": "dd961a666a1b7968",
        "type": "tab",
        "label": "System",
        "disabled": false,
        "info": ""
    },
    {
        "id": "764a5a1cb67617a0",
        "type": "tab",
        "label": "Firmware",
        "disabled": false,
        "info": ""
    },
    {
        "id": "750f8d5dc8268f79",
        "type": "tab",
        "label": "Remote",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ec5948ee92a007a8",
        "type": "tab",
        "label": "Accumulators",
        "disabled": false,
        "info": ""
    },
    {
        "id": "06dea7ae138dea9a",
        "type": "tab",
        "label": "IO Control",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a52664f9dd7d4400",
        "type": "tab",
        "label": "Timers",
        "disabled": false,
        "info": ""
    },
    {
        "id": "8b6df10d77edfd01",
        "type": "tab",
        "label": "OMRON",
        "disabled": false,
        "info": ""
    },
    {
        "id": "da535876.280af8",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "",
        "host": "us-central1-1.gcp.cloud2.influxdata.com",
        "port": "443",
        "tls": true
    },
    {
        "id": "4d64fa3d.ad0334",
        "type": "mqtt-broker",
        "name": "",
        "broker": "driver.cloudmqtt.com",
        "port": "18748",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "5fca9504.17508c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": ""
    },
    {
        "id": "1e88062a.770d7a",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "dba358e0.ff7ca8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "closeTopic": "",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": ""
    },
    {
        "id": "d508e07e.f4bc",
        "type": "modbus-client",
        "name": "LOCAL MODBUS SERVER",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "192.168.1.222",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "996e483573dc275b",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8086",
        "protocol": "http",
        "database": "monicon_sess",
        "name": "",
        "usetls": false,
        "tls": "",
        "influxdbVersion": "1.x"
    },
    {
        "id": "c107adfea4f87e80",
        "type": "tls-config",
        "name": "local-tls",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "https://us-central1-1.gcp.cloud2.influxdata.com",
        "verifyservercert": true
    },
    {
        "id": "b5ca804a171a5d4a",
        "type": "OpcUa-Endpoint",
        "endpoint": "opc.tcp://192.168.1.35:4840",
        "secpol": "None",
        "secmode": "None",
        "none": false,
        "login": true,
        "usercert": false,
        "usercertificate": "",
        "userprivatekey": ""
    },
    {
        "id": "54ad63646cf3b88d",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_00/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "26c901e178064dae",
                "828d43ea1128985c",
                "a54415b184410994"
            ]
        ]
    },
    {
        "id": "73f90dbb40d6bba2",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_01/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 140,
        "wires": [
            [
                "26c901e178064dae",
                "828d43ea1128985c",
                "a54415b184410994"
            ]
        ]
    },
    {
        "id": "db429a7bb903256d",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_02/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 200,
        "wires": [
            [
                "26c901e178064dae",
                "828d43ea1128985c",
                "a54415b184410994"
            ]
        ]
    },
    {
        "id": "51c78683d1f1ae71",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_03/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 260,
        "wires": [
            [
                "26c901e178064dae",
                "828d43ea1128985c",
                "a54415b184410994"
            ]
        ]
    },
    {
        "id": "e64da95db7984741",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_04/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 320,
        "wires": [
            [
                "26c901e178064dae",
                "828d43ea1128985c",
                "a54415b184410994"
            ]
        ]
    },
    {
        "id": "312e823d3038673a",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_05/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 380,
        "wires": [
            [
                "26c901e178064dae",
                "828d43ea1128985c",
                "a54415b184410994"
            ]
        ]
    },
    {
        "id": "f1a1bfe50eeb3193",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_06/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 440,
        "wires": [
            [
                "26c901e178064dae",
                "828d43ea1128985c",
                "a54415b184410994"
            ]
        ]
    },
    {
        "id": "26862d1ed8f4da16",
        "type": "comment",
        "z": "6b1264ad42661ce6",
        "name": "Digital Input - Request",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "26c901e178064dae",
        "type": "function",
        "z": "6b1264ad42661ce6",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 80,
        "wires": [
            [
                "1ed41e3ddfd2cd75"
            ]
        ]
    },
    {
        "id": "1ed41e3ddfd2cd75",
        "type": "link out",
        "z": "6b1264ad42661ce6",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 795,
        "y": 80,
        "wires": []
    },
    {
        "id": "f09c798d975f7958",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalOutputStatus/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 580,
        "wires": [
            [
                "bb9c01fa5c48e4df",
                "e0f95b7fa02961c4",
                "6ec17ae7cc30a368"
            ]
        ]
    },
    {
        "id": "40b6f7a350eed07c",
        "type": "comment",
        "z": "6b1264ad42661ce6",
        "name": "Digital Output Status",
        "info": "",
        "x": 110,
        "y": 540,
        "wires": []
    },
    {
        "id": "bb9c01fa5c48e4df",
        "type": "function",
        "z": "6b1264ad42661ce6",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 580,
        "wires": [
            [
                "5fcb5665c1951308"
            ]
        ]
    },
    {
        "id": "5fcb5665c1951308",
        "type": "link out",
        "z": "6b1264ad42661ce6",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 795,
        "y": 580,
        "wires": []
    },
    {
        "id": "c18fc5fbd3a7b74a",
        "type": "inject",
        "z": "6b1264ad42661ce6",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0,1",
        "payloadType": "str",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "6da656f49c984fee",
                "4d842dabe955bfba"
            ]
        ]
    },
    {
        "id": "6da656f49c984fee",
        "type": "mqtt out",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/CMD/pubDigitalInputsEnable/4164319659",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 630,
        "y": 860,
        "wires": []
    },
    {
        "id": "fb7ae77abc6793f8",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_00/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 1280,
        "y": 80,
        "wires": [
            [
                "1ce99239ca4d2578",
                "50d313d45f390a4f",
                "e58f78883ef72b5c"
            ]
        ]
    },
    {
        "id": "2a5d8843e153bdbc",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_01/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 1280,
        "y": 140,
        "wires": [
            [
                "1ce99239ca4d2578",
                "50d313d45f390a4f",
                "e58f78883ef72b5c"
            ]
        ]
    },
    {
        "id": "31dfd2a17faf7dae",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_02/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 1280,
        "y": 200,
        "wires": [
            [
                "1ce99239ca4d2578",
                "50d313d45f390a4f",
                "e58f78883ef72b5c"
            ]
        ]
    },
    {
        "id": "c1af97d525cce2be",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_03/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 1280,
        "y": 260,
        "wires": [
            [
                "1ce99239ca4d2578",
                "50d313d45f390a4f",
                "e58f78883ef72b5c"
            ]
        ]
    },
    {
        "id": "a6047c231bf6bce5",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_04/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 1280,
        "y": 320,
        "wires": [
            [
                "1ce99239ca4d2578",
                "50d313d45f390a4f",
                "e58f78883ef72b5c"
            ]
        ]
    },
    {
        "id": "d2697228acc2b1ef",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_05/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 1280,
        "y": 380,
        "wires": [
            [
                "1ce99239ca4d2578",
                "50d313d45f390a4f",
                "e58f78883ef72b5c"
            ]
        ]
    },
    {
        "id": "7cbe2b95dcdd7537",
        "type": "mqtt in",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_06/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 1280,
        "y": 440,
        "wires": [
            [
                "1ce99239ca4d2578",
                "50d313d45f390a4f",
                "e58f78883ef72b5c"
            ]
        ]
    },
    {
        "id": "0df9a85961fc56d1",
        "type": "comment",
        "z": "6b1264ad42661ce6",
        "name": "Digital Input - Status Change",
        "info": "",
        "x": 1220,
        "y": 40,
        "wires": []
    },
    {
        "id": "1ce99239ca4d2578",
        "type": "function",
        "z": "6b1264ad42661ce6",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nmsg.topic = msg.topic.replace(\"DigitalInputStatus\", \"DigitalInputs\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 80,
        "wires": [
            [
                "ea6e0df42ddd55bf"
            ]
        ]
    },
    {
        "id": "ea6e0df42ddd55bf",
        "type": "link out",
        "z": "6b1264ad42661ce6",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 1875,
        "y": 80,
        "wires": []
    },
    {
        "id": "4d842dabe955bfba",
        "type": "mqtt out",
        "z": "6b1264ad42661ce6",
        "name": "",
        "topic": "MONICON-PLC/CMD/pubDigitalInputsEnable/1010989483",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 630,
        "y": 800,
        "wires": []
    },
    {
        "id": "f85c4c6d7f76a7de",
        "type": "comment",
        "z": "6b1264ad42661ce6",
        "name": "Enable Digital Status Change Publishing",
        "info": "",
        "x": 180,
        "y": 760,
        "wires": []
    },
    {
        "id": "6ec17ae7cc30a368",
        "type": "function",
        "z": "6b1264ad42661ce6",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[3]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tDigital_00: parseFloat(output[0]),\n\t\t\t\tDigital_01: parseFloat(output[1]),\n\t\t\t\tDigital_02: parseFloat(output[2])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 660,
        "wires": [
            [
                "95d545a9a782b5a9"
            ]
        ]
    },
    {
        "id": "e0f95b7fa02961c4",
        "type": "function",
        "z": "6b1264ad42661ce6",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\tDigitalOutput_00: parseFloat(output[0]),\n\t\t\tDigitalOutput_01: parseFloat(output[1]),\n\t\t\tDigitalOutput_02: parseFloat(output[2])\n\t\t},\n        tags:{\n            PLC: output[3] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 620,
        "wires": [
            [
                "1f72a51f99a36ca7"
            ]
        ]
    },
    {
        "id": "1f72a51f99a36ca7",
        "type": "link out",
        "z": "6b1264ad42661ce6",
        "name": "",
        "links": [
            "9621ef347f99598b"
        ],
        "x": 795,
        "y": 620,
        "wires": []
    },
    {
        "id": "95d545a9a782b5a9",
        "type": "link out",
        "z": "6b1264ad42661ce6",
        "name": "",
        "links": [
            "f45ee5a9d828f33f"
        ],
        "x": 795,
        "y": 660,
        "wires": []
    },
    {
        "id": "60895b4e888319e0",
        "type": "comment",
        "z": "6b1264ad42661ce6",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 940,
        "y": 580,
        "wires": []
    },
    {
        "id": "9fde5899178aa2d4",
        "type": "comment",
        "z": "6b1264ad42661ce6",
        "name": "Database | Local",
        "info": "",
        "x": 900,
        "y": 620,
        "wires": []
    },
    {
        "id": "ba8c0d7f603bf1bc",
        "type": "comment",
        "z": "6b1264ad42661ce6",
        "name": "Database | Remote",
        "info": "",
        "x": 910,
        "y": 660,
        "wires": []
    },
    {
        "id": "e58f78883ef72b5c",
        "type": "function",
        "z": "6b1264ad42661ce6",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[1]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1750,
        "y": 440,
        "wires": [
            [
                "8b38b70a05725e73"
            ]
        ]
    },
    {
        "id": "50d313d45f390a4f",
        "type": "function",
        "z": "6b1264ad42661ce6",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            PLC: output[1] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 260,
        "wires": [
            [
                "5d5d307e8c9679d5"
            ]
        ]
    },
    {
        "id": "5d5d307e8c9679d5",
        "type": "link out",
        "z": "6b1264ad42661ce6",
        "name": "",
        "links": [
            "9621ef347f99598b"
        ],
        "x": 1875,
        "y": 260,
        "wires": []
    },
    {
        "id": "8b38b70a05725e73",
        "type": "link out",
        "z": "6b1264ad42661ce6",
        "name": "",
        "links": [
            "f45ee5a9d828f33f"
        ],
        "x": 1875,
        "y": 440,
        "wires": []
    },
    {
        "id": "2755127b4b522c86",
        "type": "comment",
        "z": "6b1264ad42661ce6",
        "name": "Database | Local",
        "info": "",
        "x": 1980,
        "y": 260,
        "wires": []
    },
    {
        "id": "5da4f3419f251479",
        "type": "comment",
        "z": "6b1264ad42661ce6",
        "name": "Database | Remote",
        "info": "",
        "x": 1990,
        "y": 440,
        "wires": []
    },
    {
        "id": "fe338ad7872fed9e",
        "type": "comment",
        "z": "6b1264ad42661ce6",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 2020,
        "y": 80,
        "wires": []
    },
    {
        "id": "828d43ea1128985c",
        "type": "function",
        "z": "6b1264ad42661ce6",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[1]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 440,
        "wires": [
            [
                "73dcd344b8317fe8"
            ]
        ]
    },
    {
        "id": "a54415b184410994",
        "type": "function",
        "z": "6b1264ad42661ce6",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            PLC: output[1] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 260,
        "wires": [
            [
                "df0081dd209b84f1"
            ]
        ]
    },
    {
        "id": "df0081dd209b84f1",
        "type": "link out",
        "z": "6b1264ad42661ce6",
        "name": "",
        "links": [
            "9621ef347f99598b"
        ],
        "x": 795,
        "y": 260,
        "wires": []
    },
    {
        "id": "73dcd344b8317fe8",
        "type": "link out",
        "z": "6b1264ad42661ce6",
        "name": "",
        "links": [
            "f45ee5a9d828f33f"
        ],
        "x": 795,
        "y": 440,
        "wires": []
    },
    {
        "id": "155b93932553036e",
        "type": "comment",
        "z": "6b1264ad42661ce6",
        "name": "Database | Local",
        "info": "",
        "x": 900,
        "y": 260,
        "wires": []
    },
    {
        "id": "6e51e4d1cc915586",
        "type": "comment",
        "z": "6b1264ad42661ce6",
        "name": "Database | Remote",
        "info": "",
        "x": 910,
        "y": 440,
        "wires": []
    },
    {
        "id": "a89c0074ee837890",
        "type": "comment",
        "z": "6b1264ad42661ce6",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 940,
        "y": 80,
        "wires": []
    },
    {
        "id": "49919a010d440f69",
        "type": "mqtt in",
        "z": "77dcc259164b475f",
        "name": "",
        "topic": "MONICON-PLC/Device/4n20_Flags/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 170,
        "y": 200,
        "wires": [
            [
                "d220305d49f68b33",
                "14a39f7cb8decffd"
            ]
        ]
    },
    {
        "id": "cb41bdefd7f87258",
        "type": "mqtt in",
        "z": "77dcc259164b475f",
        "name": "",
        "topic": "MONICON-PLC/Device/PT100_Flags/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 170,
        "y": 80,
        "wires": [
            [
                "9bf22bc4c3635aaa",
                "14a39f7cb8decffd"
            ]
        ]
    },
    {
        "id": "58771b6265a3a270",
        "type": "comment",
        "z": "77dcc259164b475f",
        "name": "Analog Alarms 1st <8x PT100 LOW Alarms> | 2nd <8x PT100 HIGH Alarms>",
        "info": "",
        "x": 290,
        "y": 40,
        "wires": []
    },
    {
        "id": "1786498662c4db51",
        "type": "mqtt in",
        "z": "77dcc259164b475f",
        "name": "",
        "topic": "MONICON-PLC/Device/Alarm_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 170,
        "y": 420,
        "wires": [
            [
                "060ce833fbaec6a4"
            ]
        ]
    },
    {
        "id": "d3a7ece6c03b4f35",
        "type": "mqtt in",
        "z": "77dcc259164b475f",
        "name": "",
        "topic": "MONICON-PLC/Device/Alarm_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 170,
        "y": 340,
        "wires": [
            [
                "060ce833fbaec6a4"
            ]
        ]
    },
    {
        "id": "5fff3f67a9af88d8",
        "type": "comment",
        "z": "77dcc259164b475f",
        "name": "4n20mA Low Alarm - Rising Edge Trigger | <AI-ID> | <Limit-Type> | <Equip-Name>",
        "info": "",
        "x": 310,
        "y": 300,
        "wires": []
    },
    {
        "id": "9bf22bc4c3635aaa",
        "type": "link out",
        "z": "77dcc259164b475f",
        "name": "L-PT100-ALM_FLAGS",
        "links": [
            "3184a127.75ebfe",
            "a10bac4a.3ef4b",
            "b4007e9b.4946c"
        ],
        "x": 475,
        "y": 80,
        "wires": []
    },
    {
        "id": "d220305d49f68b33",
        "type": "link out",
        "z": "77dcc259164b475f",
        "name": "L-4n20-ALM_FLAGS",
        "links": [
            "35875a5a.263686"
        ],
        "x": 475,
        "y": 200,
        "wires": []
    },
    {
        "id": "14a39f7cb8decffd",
        "type": "function",
        "z": "77dcc259164b475f",
        "name": "Check MQTT Timer Enable",
        "func": "var AlarmTimer = global.get(\"AlarmTimer\") || \"0\";\nif(AlarmTimer == \"1\")\n{\nmsg.topic = msg.topic.replace(\"Device\", \"STAT\");\n    msg.topic = \"sess/\" + msg.topic;\n    return msg;\n} else {\n    return;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 140,
        "wires": [
            [
                "a7c64e98d7685208"
            ]
        ]
    },
    {
        "id": "1198c1bbd759a351",
        "type": "mqtt in",
        "z": "77dcc259164b475f",
        "name": "",
        "topic": "MONICON-PLC/STAT/Alarm_En_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 520,
        "wires": [
            [
                "060ce833fbaec6a4"
            ]
        ]
    },
    {
        "id": "8da6b445560c0202",
        "type": "mqtt in",
        "z": "77dcc259164b475f",
        "name": "",
        "topic": "MONICON-PLC/STAT/Alarm_En_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 600,
        "wires": [
            [
                "060ce833fbaec6a4"
            ]
        ]
    },
    {
        "id": "060ce833fbaec6a4",
        "type": "function",
        "z": "77dcc259164b475f",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 560,
        "wires": [
            [
                "a7c64e98d7685208"
            ]
        ]
    },
    {
        "id": "a7c64e98d7685208",
        "type": "link out",
        "z": "77dcc259164b475f",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 935,
        "y": 420,
        "wires": []
    },
    {
        "id": "2ed87190951bcc58",
        "type": "mqtt in",
        "z": "77dcc259164b475f",
        "name": "",
        "topic": "MONICON-PLC/STAT/Thresholds_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 680,
        "wires": [
            [
                "b26f33c9c66f095d",
                "08e3074b47cd9fcd"
            ]
        ]
    },
    {
        "id": "90c38ccc69486594",
        "type": "mqtt in",
        "z": "77dcc259164b475f",
        "name": "",
        "topic": "MONICON-PLC/STAT/Thresholds_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 800,
        "wires": [
            [
                "fdf40a82131f77cf",
                "08e3074b47cd9fcd"
            ]
        ]
    },
    {
        "id": "b26f33c9c66f095d",
        "type": "link out",
        "z": "77dcc259164b475f",
        "name": "L-Thres_PT100-Para",
        "links": [],
        "x": 475,
        "y": 680,
        "wires": []
    },
    {
        "id": "fdf40a82131f77cf",
        "type": "link out",
        "z": "77dcc259164b475f",
        "name": "L-Thres_4n20-Para",
        "links": [
            "7010bf18.67104"
        ],
        "x": 475,
        "y": 800,
        "wires": []
    },
    {
        "id": "08e3074b47cd9fcd",
        "type": "function",
        "z": "77dcc259164b475f",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 740,
        "wires": [
            [
                "a7c64e98d7685208"
            ]
        ]
    },
    {
        "id": "9a54e792053256f9",
        "type": "mqtt in",
        "z": "cc05c00c17b512ba",
        "name": "",
        "topic": "MONICON-PLC/Device/AI_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 160,
        "y": 80,
        "wires": [
            [
                "0b50c5a3f956dccf",
                "6b29403cf07b6d8c"
            ]
        ]
    },
    {
        "id": "c2aeb1a47a160f83",
        "type": "mqtt in",
        "z": "cc05c00c17b512ba",
        "name": "",
        "topic": "MONICON-PLC/Device/AI_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 160,
        "y": 160,
        "wires": [
            [
                "4e4f6a7080179d2b",
                "6b29403cf07b6d8c"
            ]
        ]
    },
    {
        "id": "0b50c5a3f956dccf",
        "type": "link out",
        "z": "cc05c00c17b512ba",
        "name": "L-OUT-AI_4n20",
        "links": [
            "311cc9da.295866",
            "3e649a44.6ae766",
            "3313984e33902b59",
            "fb825d88.14935",
            "e4b05cb6.755b4",
            "61980d7c.a4f6f4",
            "88c2d23c.6ec84"
        ],
        "x": 655,
        "y": 80,
        "wires": []
    },
    {
        "id": "4e4f6a7080179d2b",
        "type": "link out",
        "z": "cc05c00c17b512ba",
        "name": "L-OUT-AI_PT100",
        "links": [
            "d40653c7.effc4",
            "a4a638727282c856",
            "86a52f8.d751fd",
            "809e3c8c.14b8c",
            "88c2d23c.6ec84"
        ],
        "x": 655,
        "y": 160,
        "wires": []
    },
    {
        "id": "6b29403cf07b6d8c",
        "type": "function",
        "z": "cc05c00c17b512ba",
        "name": "Check MQTT Timer Enable",
        "func": "var AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(AnalogTimer == \"1\")\n{\nmsg.topic = msg.topic.replace(\"Device\", \"STAT\");\n    msg.topic = \"sess/\" + msg.topic;\n    return msg;\n} else {\n    return;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 120,
        "wires": [
            [
                "8c8b7f30cd313678"
            ]
        ]
    },
    {
        "id": "d603c2fddd743725",
        "type": "mqtt in",
        "z": "cc05c00c17b512ba",
        "name": "",
        "topic": "MONICON-PLC/STAT/Scale_Single_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 300,
        "wires": [
            [
                "c870f8d98c4ebe08"
            ]
        ]
    },
    {
        "id": "3e8a66392f184392",
        "type": "mqtt in",
        "z": "cc05c00c17b512ba",
        "name": "",
        "topic": "MONICON-PLC/STAT/Scale_Single_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 380,
        "wires": [
            [
                "c870f8d98c4ebe08"
            ]
        ]
    },
    {
        "id": "3daf2252f53e6486",
        "type": "comment",
        "z": "cc05c00c17b512ba",
        "name": "Scale Parameters",
        "info": "",
        "x": 110,
        "y": 260,
        "wires": []
    },
    {
        "id": "6b1e3e3407a3eacf",
        "type": "comment",
        "z": "cc05c00c17b512ba",
        "name": "Analog Input Values",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "c870f8d98c4ebe08",
        "type": "function",
        "z": "cc05c00c17b512ba",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 340,
        "wires": [
            [
                "8c8b7f30cd313678"
            ]
        ]
    },
    {
        "id": "8c8b7f30cd313678",
        "type": "link out",
        "z": "cc05c00c17b512ba",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 835,
        "y": 240,
        "wires": []
    },
    {
        "id": "3a341dbd37a70862",
        "type": "mqtt in",
        "z": "cc05c00c17b512ba",
        "name": "",
        "topic": "MONICON-PLC/STAT/CaliPub_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 170,
        "y": 500,
        "wires": [
            [
                "a30be234369c561b"
            ]
        ]
    },
    {
        "id": "4d61482119c5c4e8",
        "type": "mqtt in",
        "z": "cc05c00c17b512ba",
        "name": "",
        "topic": "MONICON-PLC/STAT/CaliPub_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 580,
        "wires": [
            [
                "a30be234369c561b"
            ]
        ]
    },
    {
        "id": "8958e2d0d6eff74f",
        "type": "comment",
        "z": "cc05c00c17b512ba",
        "name": "Scale Parameters",
        "info": "",
        "x": 110,
        "y": 460,
        "wires": []
    },
    {
        "id": "a30be234369c561b",
        "type": "function",
        "z": "cc05c00c17b512ba",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 540,
        "wires": [
            [
                "8c8b7f30cd313678"
            ]
        ]
    },
    {
        "id": "58219fd276c60256",
        "type": "comment",
        "z": "3e9ce4f7b8528be4",
        "name": "Send Email Notification",
        "info": "",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "8647b3431e5c48fb",
        "type": "link in",
        "z": "3e9ce4f7b8528be4",
        "name": "",
        "links": [
            "356d9b5a.3c3144"
        ],
        "x": 75,
        "y": 120,
        "wires": [
            [
                "977f73ab3ead97e9"
            ]
        ]
    },
    {
        "id": "22afd22eac6042e5",
        "type": "comment",
        "z": "3e9ce4f7b8528be4",
        "name": "Alarm PT100",
        "info": "",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "c29680e336f1ec72",
        "type": "comment",
        "z": "3e9ce4f7b8528be4",
        "name": "Alarm 4n20",
        "info": "",
        "x": 110,
        "y": 180,
        "wires": []
    },
    {
        "id": "f776ee5085ba32f7",
        "type": "link in",
        "z": "3e9ce4f7b8528be4",
        "name": "",
        "links": [
            "d6eb1a78.b65638"
        ],
        "x": 75,
        "y": 240,
        "wires": [
            [
                "9c86777843bcd4cb"
            ]
        ]
    },
    {
        "id": "977f73ab3ead97e9",
        "type": "function",
        "z": "3e9ce4f7b8528be4",
        "name": "Email Setup - PT100 Alarms",
        "func": "/*\ndata[0] = PIN_ID\ndata[1] = Alarm Status\ndata[2] = PV\ndata[3] = Threshold Parameter\ndata[4] = Equipment ID\ndata[5] = Software Version\n\ntopic[0] = PLC_ID\ntopic[1] = CMD\ntopic[2] = Subject\ntopic[3] = Serial_ID\n*/\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nlet subjectMSg_PT100 = global.get(\"subjectMSg_PT100\") || \"null\";                    //String\nlet bodyMSg_PT100 = global.get(\"bodyMSg_PT100\") || \"null\";                          //String\nlet addrTo_PT100 = global.get(\"addrTo_PT100\") || \"monicon.sess@gmail.com\";                            //String\nlet addrCc_PT100 = global.get(\"addrCc_PT100\") || \"\";                            //Strng\nlet addrBcc_PT100 = global.get(\"addrBcc_PT100\") || \"\";                          //String\nlet subjectParameters_PT100 = global.get(\"subjectParameters_PT100\") || \"null\";      //String of bools\nlet bodyParameters_PT100 = global.get(\"bodyParameters_PT100\") || \"null\";            //String of bools\n\n// Data splitting\nvar data = msg.payload.split(',')\nvar topic = msg.topic.split('/')\nlet subPara = subjectParameters_PT100.split('=');\nlet bodyPara = bodyParameters_PT100.split('=');\n\n// Subject Concatenation\nvar subject = subjectMSg_PT100;\nsubject += subPara[5] == \"1\" ? \" | Sensor Type - PT100 Alm\" : \"\";\nsubject += subPara[4] == \"1\" ? \" | Alarm Status - \" + data[1] : \"\";\nsubject += subPara[1] == \"1\" ? \" | Analog No. - \" + data[0] : \"\";\nsubject += subPara[2] == \"1\" ? \" | Site ID - \" + siteID : \"\";\nsubject += subPara[3] == \"1\" ? \" | Equipment ID - \" + data[4] : \"\";\nsubject += subPara[0] == \"1\" ? \" | Date & Time - \" + Date().toString() : \"\";\n\n// Subject Concatenation\nvar body = bodyMSg_PT100 + \"\\n\";\nbody += bodyPara[0] == \"1\" ? \"\\nDate & Time -\\t \" + Date().toString() : \"\";\nbody += bodyPara[5] == \"1\" ? \"\\nSensor Type -\\t PT100 Alm\" : \"\";\nbody += bodyPara[4] == \"1\" ? \"\\nAlarm Status -\\t \" + data[1] : \"\";\nbody += bodyPara[1] == \"1\" ? \"\\nAnalog No. -\\t \" + data[0] : \"\";\nbody += bodyPara[2] == \"1\" ? \"\\nSite ID -\\t \" + siteID : \"\";\nbody += bodyPara[3] == \"1\" ? \"\\nEquipment ID -\\t \" + data[4] : \"\";\nbody += bodyPara[9] == \"1\" ? \"\\nProcess Value -\\t \" + data[2] : \"\";\nbody += bodyPara[6] == \"1\" ? \"\\nThreshold Parameter -\\t \" + data[3] : \"\";\nbody += bodyPara[7] == \"1\" ? \"\\nSerial No. -\\t \" + topic[3] : \"\";\nbody += bodyPara[8] == \"1\" ? \"\\nSoftware Version -\\t \" + data[5] : \"\";\n\n// New Email Message\nmsg = {\n    payload: body,\n    topic: subject,\n    to: addrTo_PT100,\n    cc: addrCc_PT100,\n    bcc: addrBcc_PT100\n}\n\n// Old Email Message\n// msg = {\n//     payload : \"PT100 Alarm has been triggered.\\n\" +\n//     \"Equipment ID[\" + data[4] + \"]\\n\" + \n//     \"PT100 Sensor - AI[\" + data[0] + \"]\\n\" +\n//     \"Alarm Status[\" + data[1] +\"]\\n\" +\n//     \"Timestamp[\" + Date().toString() + \"]\" + \n//     \"Site_BS001\\n\" +\n//     \"AI Process Value[\" + data[2] + \"]\\n\" +\n//     \"Threshold Parameter[\" + data[3] + \"]\\n\" + \n//     \"Equipment ID[\" + data[4] + \"]\\n\\n\" +\n//     \"PLC_Model[\" + topic[0] + \"]\\n\" + \n//     \"Command Header[\" + topic[1] + \"]\\n\" +\n//     \"Command Subject[\" + topic[2] + \"]\\n\" +\n//     \"Device Serial No.[\" + topic[3] + \"]\\n\\n\" , // Body\n//     topic : \"Alarm Notification | PT100 Sensor - AI[\" + data[0] + \"] | Status[\" + data[1] +\"] | \" + \"Timestamp[\" + Date().toString() + \"]\", //Subject\n//     to : \"monicon.sess@gmail.com\",\n//     bcc : \"monicon.sys@gmail.com\"\n// };\n\nreturn msg;\n\n// let parameters = msg.payload.split('+');\n\n// if (parameters[5] == \"1\") // PT100 Configuration Parameters\n// {\n//     global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n//     global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n//     global.set(\"addrTo_PT100\", parameters[2]);                //String\n//     global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_PT100\", parameters[4]);               //String\n//     global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n// } else {\n//     global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n//     global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n//     global.set(\"addrTo_4n20\", parameters[2]);                //String\n//     global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_4n20\", parameters[4]);               //String\n//     global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 120,
        "wires": [
            []
        ]
    },
    {
        "id": "9c86777843bcd4cb",
        "type": "function",
        "z": "3e9ce4f7b8528be4",
        "name": "Email Setup - 4..20mA Alarms",
        "func": "/*\ndata[0] = PIN_ID\ndata[1] = Alarm Status\ndata[2] = PV\ndata[3] = Threshold Parameter\ndata[4] = Equipment ID\ndata[5] = Software Version\n\ntopic[0] = PLC_ID\ntopic[1] = CMD\ntopic[2] = Subject\ntopic[3] = Serial_ID\n*/\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nlet subjectMSg_4n20 = global.get(\"subjectMSg_4n20\") || \"null\";                    //String\nlet bodyMSg_4n20 = global.get(\"bodyMSg_4n20\") || \"null\";                          //String\nlet addrTo_4n20 = global.get(\"addrTo_4n20\") || \"monicon.sess@gmail.com\";                            //String\nlet addrCc_4n20 = global.get(\"addrCc_4n20\") || \"\";                            //Strng\nlet addrBcc_4n20 = global.get(\"addrBcc_4n20\") || \"\";                          //String\nlet subjectParameters_4n20 = global.get(\"subjectParameters_4n20\") || \"null\";      //String of bools\nlet bodyParameters_4n20 = global.get(\"bodyParameters_4n20\") || \"null\";            //String of bools\n\n// Data splitting\nvar data = msg.payload.split(',')\nvar topic = msg.topic.split('/')\nlet subPara = subjectParameters_4n20.split('=');\nlet bodyPara = bodyParameters_4n20.split('=');\n\n// Subject Concatenation\nvar subject = subjectMSg_4n20;\nsubject += subPara[5] == \"1\" ? \" | Sensor Type - 4n20 Alm\" : \"\";\nsubject += subPara[4] == \"1\" ? \" | Alarm Status - \" + data[1] : \"\";\nsubject += subPara[1] == \"1\" ? \" | Analog No. - \" + data[0] : \"\";\nsubject += subPara[2] == \"1\" ? \" | Site ID - \" + siteID : \"\";\nsubject += subPara[3] == \"1\" ? \" | Equipment ID - \" + data[4] : \"\";\nsubject += subPara[0] == \"1\" ? \" | Date & Time - \" + Date().toString() : \"\";\n\n// Subject Concatenation\nvar body = bodyMSg_4n20 + \"\\n\";\nbody += bodyPara[0] == \"1\" ? \"\\nDate & Time -\\t \" + Date().toString() : \"\";\nbody += bodyPara[5] == \"1\" ? \"\\nSensor Type -\\t 4n20 Alm\" : \"\";\nbody += bodyPara[4] == \"1\" ? \"\\nAlarm Status -\\t \" + data[1] : \"\";\nbody += bodyPara[1] == \"1\" ? \"\\nAnalog No. -\\t \" + data[0] : \"\";\nbody += bodyPara[2] == \"1\" ? \"\\nSite ID -\\t \" + siteID : \"\";\nbody += bodyPara[3] == \"1\" ? \"\\nEquipment ID -\\t \" + data[4] : \"\";\nbody += bodyPara[9] == \"1\" ? \"\\nProcess Value -\\t \" + data[2] : \"\";\nbody += bodyPara[6] == \"1\" ? \"\\nThreshold Parameter -\\t \" + data[3] : \"\";\nbody += bodyPara[7] == \"1\" ? \"\\nSerial No. -\\t \" + topic[3] : \"\";\nbody += bodyPara[8] == \"1\" ? \"\\nSoftware Version -\\t \" + data[5] : \"\";\n\n// New Email Message\nmsg = {\n    payload: body,\n    topic: subject,\n    to: addrTo_4n20,\n    cc: addrCc_4n20,\n    bcc: addrBcc_4n20\n}\n\n// Old Email Message\n// msg = {\n//     payload : \"PT100 Alarm has been triggered.\\n\" +\n//     \"Equipment ID[\" + data[4] + \"]\\n\" + \n//     \"PT100 Sensor - AI[\" + data[0] + \"]\\n\" +\n//     \"Alarm Status[\" + data[1] +\"]\\n\" +\n//     \"Timestamp[\" + Date().toString() + \"]\" + \n//     \"Site_BS001\\n\" +\n//     \"AI Process Value[\" + data[2] + \"]\\n\" +\n//     \"Threshold Parameter[\" + data[3] + \"]\\n\" + \n//     \"Equipment ID[\" + data[4] + \"]\\n\\n\" +\n//     \"PLC_Model[\" + topic[0] + \"]\\n\" + \n//     \"Command Header[\" + topic[1] + \"]\\n\" +\n//     \"Command Subject[\" + topic[2] + \"]\\n\" +\n//     \"Device Serial No.[\" + topic[3] + \"]\\n\\n\" , // Body\n//     topic : \"Alarm Notification | PT100 Sensor - AI[\" + data[0] + \"] | Status[\" + data[1] +\"] | \" + \"Timestamp[\" + Date().toString() + \"]\", //Subject\n//     to : \"monicon.sess@gmail.com\",\n//     bcc : \"monicon.sys@gmail.com\"\n// };\n\nreturn msg;\n\n// let parameters = msg.payload.split('+');\n\n// if (parameters[5] == \"1\") // PT100 Configuration Parameters\n// {\n//     global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n//     global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n//     global.set(\"addrTo_PT100\", parameters[2]);                //String\n//     global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_PT100\", parameters[4]);               //String\n//     global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n// } else {\n//     global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n//     global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n//     global.set(\"addrTo_4n20\", parameters[2]);                //String\n//     global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_4n20\", parameters[4]);               //String\n//     global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "de4f352861d26ee4",
        "type": "inject",
        "z": "3e9ce4f7b8528be4",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 360,
        "wires": [
            [
                "8a4586af627e0745"
            ]
        ]
    },
    {
        "id": "8a4586af627e0745",
        "type": "function",
        "z": "3e9ce4f7b8528be4",
        "name": "Dumy Email",
        "func": "msg = {\n    payload: \"48hr activity notification email.\",\n    topic: \"Ignore\",\n    to: \"monicon.sess@gmail.com\",\n    cc: \"\",\n    bcc: \"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "b57c1897b3f2a919",
        "type": "inject",
        "z": "710285b7c318af7d",
        "name": "Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "db234fae08b8dda2",
        "type": "inject",
        "z": "710285b7c318af7d",
        "name": "Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "2438daaecb3ed9e3",
        "type": "comment",
        "z": "710285b7c318af7d",
        "name": "RESET DATABASES",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "e7856d545eeeeebb",
        "type": "comment",
        "z": "710285b7c318af7d",
        "name": "CREATES DATABASES",
        "info": "",
        "x": 130,
        "y": 260,
        "wires": []
    },
    {
        "id": "24fbdbc7eb351ce1",
        "type": "comment",
        "z": "710285b7c318af7d",
        "name": "PT100 Analog Signals",
        "info": "",
        "x": 120,
        "y": 500,
        "wires": []
    },
    {
        "id": "e82b5eee808ccb34",
        "type": "function",
        "z": "710285b7c318af7d",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n/*\noutput[0] = AI-0 // PT100\noutput[1] = AI-1 // PT100\noutput[2] = AI-2 // PT100\noutput[3] = AI-3 // PT100\noutput[4] = AI-4 // 4..20mA\noutput[5] = AI-5 // 4..20mA\noutput[6] = AI-6 // 4..20mA\noutput[7] = AI-7 // 4..20mA \noutput[8] = Device ID\noutput[9] = Location \n*/\n\n// Lighting\n//if (output.length > 4) {\n//    if (output[3].includes(\"Light\")) {\n//        output[4] = output[4].replace(/\\s+/g, '_')\n//        output[4] = output[4].concat(\".Lt\")\n//\t} else if (output[3].includes(\"Power\")) {\n//\t\toutput[4] = output[4].replace(/\\s+/g, '_')\n//\t\toutput[4] = output[4].concat(\".Pwr\")\n//\t}\n//}\n\n//output[1] = (output[1] / 1000).toFixed(2);\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: output[9]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t_4n20_7: parseFloat(output[0]),\n\t\t\t\t_4n20_6: parseFloat(output[1]),\n\t\t\t\t_4n20_5: parseFloat(output[2]),\n\t\t\t\t_4n20_4: parseFloat(output[3]),\n\t\t\t\t_4n20_3: parseFloat(output[4]),\n\t\t\t\t_4n20_2: parseFloat(output[5]),\n\t\t\t\t_4n20_1: parseFloat(output[6]),\n\t\t\t\t_4n20_0: parseFloat(output[7]),\n\t\t\t\tTRUC_VERSION: String(output[8]),\n\t\t\t\tdatabaseID: String(output[9])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 460,
        "wires": [
            [
                "aec49aa8119a79bc"
            ]
        ]
    },
    {
        "id": "748eb3868c5ab5c3",
        "type": "function",
        "z": "710285b7c318af7d",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t_4n20_7: parseFloat(output[0]),\n\t\t\t_4n20_6: parseFloat(output[1]),\n\t\t\t_4n20_5: parseFloat(output[2]),\n\t\t\t_4n20_4: parseFloat(output[3]),\n\t\t\t_4n20_3: parseFloat(output[4]),\n\t\t\t_4n20_2: parseFloat(output[5]),\n\t\t\t_4n20_1: parseFloat(output[6]),\n\t\t\t_4n20_0: parseFloat(output[7]),\n\t\t\t_ID: output[8],\n\t\t\tdatabaseID: output[9]\n\t\t},\n\t\t\n        tags:{\n            PLC: output[9] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "aec49aa8119a79bc",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "710285b7c318af7d",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e8ae146fbb072823",
        "type": "influxdb out",
        "z": "710285b7c318af7d",
        "influxdb": "996e483573dc275b",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 1010,
        "y": 80,
        "wires": []
    },
    {
        "id": "ef8b93aa6060f288",
        "type": "influxdb out",
        "z": "710285b7c318af7d",
        "influxdb": "996e483573dc275b",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "database": "",
        "retentionPolicyV18Flux": "",
        "org": "",
        "bucket": "",
        "x": 990,
        "y": 300,
        "wires": []
    },
    {
        "id": "9ef5c96001b6b024",
        "type": "influxdb batch",
        "z": "710285b7c318af7d",
        "influxdb": "996e483573dc275b",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 420,
        "wires": []
    },
    {
        "id": "ce6ffa9280096a4d",
        "type": "influxdb in",
        "z": "710285b7c318af7d",
        "influxdb": "996e483573dc275b",
        "name": "monicon.sess",
        "query": "DROP DATABASE monicon_sess",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 760,
        "y": 80,
        "wires": [
            [
                "e8ae146fbb072823"
            ]
        ]
    },
    {
        "id": "c2c11161b2a82dad",
        "type": "influxdb in",
        "z": "710285b7c318af7d",
        "influxdb": "996e483573dc275b",
        "name": "monicon.sess",
        "query": "CREATE DATABASE monicon_sess",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "org": "",
        "x": 740,
        "y": 300,
        "wires": [
            [
                "ef8b93aa6060f288"
            ]
        ]
    },
    {
        "id": "190b528cf662dc40",
        "type": "string",
        "z": "710285b7c318af7d",
        "name": "Sectionaliser ",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "ProPower-ESP/Device/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 290,
        "y": 420,
        "wires": [
            [
                "e82b5eee808ccb34",
                "748eb3868c5ab5c3"
            ]
        ]
    },
    {
        "id": "01a97b8e1d3885a6",
        "type": "comment",
        "z": "710285b7c318af7d",
        "name": "4n20 Analog Signals",
        "info": "",
        "x": 110,
        "y": 380,
        "wires": []
    },
    {
        "id": "2694f9a8f07123de",
        "type": "function",
        "z": "710285b7c318af7d",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\n/*\noutput[0] = AI-0 // PT100\noutput[1] = AI-1 // PT100\noutput[2] = AI-2 // PT100\noutput[3] = AI-3 // PT100\noutput[4] = AI-4 // 4..20mA\noutput[5] = AI-5 // 4..20mA\noutput[6] = AI-6 // 4..20mA\noutput[7] = AI-7 // 4..20mA \noutput[8] = Device ID\noutput[9] = Location \n*/\n\n// Lighting\n//if (output.length > 4) {\n//    if (output[3].includes(\"Light\")) {\n//        output[4] = output[4].replace(/\\s+/g, '_')\n//        output[4] = output[4].concat(\".Lt\")\n//\t} else if (output[3].includes(\"Power\")) {\n//\t\toutput[4] = output[4].replace(/\\s+/g, '_')\n//\t\toutput[4] = output[4].concat(\".Pwr\")\n//\t}\n//}\n\n//output[1] = (output[1] / 1000).toFixed(2);\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: output[9]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t_PT100_7: parseFloat(output[0]),\n\t\t\t\t_PT100_6: parseFloat(output[1]),\n\t\t\t\t_PT100_5: parseFloat(output[2]),\n\t\t\t\t_PT100_4: parseFloat(output[3]),\n\t\t\t\t_PT100_3: parseFloat(output[4]),\n\t\t\t\t_PT100_2: parseFloat(output[5]),\n\t\t\t\t_PT100_1: parseFloat(output[6]),\n\t\t\t\t_PT100_0: parseFloat(output[7]),\n\t\t\t\tTRUC_VERSION: String(output[8]),\n\t\t\t\tdatabaseID: String(output[9])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 580,
        "wires": [
            [
                "c3c7054718ade9eb"
            ]
        ]
    },
    {
        "id": "07f9dde10f4687e8",
        "type": "function",
        "z": "710285b7c318af7d",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t_PT100_7: parseFloat(output[0]),\n\t\t\t_PT100_6: parseFloat(output[1]),\n\t\t\t_PT100_5: parseFloat(output[2]),\n\t\t\t_PT100_4: parseFloat(output[3]),\n\t\t\t_PT100_3: parseFloat(output[4]),\n\t\t\t_PT100_2: parseFloat(output[5]),\n\t\t\t_PT100_1: parseFloat(output[6]),\n\t\t\t_PT100_0: parseFloat(output[7]),\n\t\t\t_ID: output[8],\n\t\t\tdatabaseID: output[9]\n\t\t},\n        tags:{\n            PLC: output[9] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "c3c7054718ade9eb",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "710285b7c318af7d",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "a7625b1d5eac887b",
        "type": "influxdb batch",
        "z": "710285b7c318af7d",
        "influxdb": "996e483573dc275b",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 540,
        "wires": []
    },
    {
        "id": "01a5d0fadcfbf092",
        "type": "string",
        "z": "710285b7c318af7d",
        "name": "Sectionaliser ",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "ProPower-ESP/Device/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 290,
        "y": 540,
        "wires": [
            [
                "2694f9a8f07123de",
                "07f9dde10f4687e8"
            ]
        ]
    },
    {
        "id": "3313984e33902b59",
        "type": "link in",
        "z": "710285b7c318af7d",
        "name": "",
        "links": [
            "0b50c5a3f956dccf"
        ],
        "x": 35,
        "y": 420,
        "wires": [
            [
                "190b528cf662dc40"
            ]
        ]
    },
    {
        "id": "a4a638727282c856",
        "type": "link in",
        "z": "710285b7c318af7d",
        "name": "",
        "links": [
            "4e4f6a7080179d2b"
        ],
        "x": 35,
        "y": 540,
        "wires": [
            [
                "01a5d0fadcfbf092"
            ]
        ]
    },
    {
        "id": "57935cf8acf7dcb1",
        "type": "function",
        "z": "710285b7c318af7d",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet depolys = global.get(\"depolys\") || 0\n\n// var msg1 = { payload : data[0] };   // RSSI\n// var msg2 = { payload : data[1] };   // WiFi Diconnection Counter\n// var msg3 = { payload : data[2] };   // MQTT Diconnection Counter\n// var msg4 = { payload : data[3] };   // Device IP\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[7]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tRSSI: parseFloat(output[0]),\n\t\t\t\tWIFI_DC: parseFloat(output[1]),\n    \t\t\tMQTT_DC: parseFloat(output[2]),\n    \t\t\tDEVICE_IP: \" + output[3] + \",\n    \t\t\tserialNo: parseFloat(topic[3]),\n    \t\t\tESP_Temp: parseFloat(output[4]),\n    \t\t\ttwentySecLoop: parseFloat(output[5]),\n    \t\t\tTRUC_VERSION: String(output[6]),\n    \t\t\tdatabaseID: String(output[7]),\n    \t\t\tEquipmentID: String(output[8])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 700,
        "wires": [
            [
                "7a6a9ab7e23c81f8"
            ]
        ]
    },
    {
        "id": "cb4ded1a44c9a63a",
        "type": "function",
        "z": "710285b7c318af7d",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet depolys = global.get(\"depolys\") || 0\n// Display data\n// var data = msg.payload.split(',')\n// var msg1 = { payload : data[0] };   // RSSI\n// var msg2 = { payload : data[1] };   // WiFi Diconnection Counter\n// var msg3 = { payload : data[2] };   // MQTT Diconnection Counter\n// var msg4 = { payload : data[3] };   // Device IP\n\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\tRSSI: parseFloat(output[0]),\n\t\t\tWIFI_DC: parseFloat(output[1]),\n\t\t\tMQTT_DC: parseFloat(output[2]),\n\t\t\tDEVICE_IP: String(output[3]),\n\t\t\tSerialNo: String(topic[3]),\n\t\t\tESP_Temp: parseFloat(output[4]),\n\t\t\ttwentySecLoop: parseFloat(output[5]),\n\t\t\tTRUC_VERSION: output[6],\n\t\t\tdatabaseID: output[7],\n\t\t\tEquipmentID: output[8]\n\n\t\t},\n        tags:{\n            PLC: output[7] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "7a6a9ab7e23c81f8",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "710285b7c318af7d",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "3cb97b4cdaa149aa",
        "type": "influxdb batch",
        "z": "710285b7c318af7d",
        "influxdb": "996e483573dc275b",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 660,
        "wires": []
    },
    {
        "id": "29b292cd93e19691",
        "type": "mqtt in",
        "z": "710285b7c318af7d",
        "name": "",
        "topic": "MONICON-PLC/Device/Status/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 150,
        "y": 660,
        "wires": [
            [
                "cb4ded1a44c9a63a",
                "57935cf8acf7dcb1"
            ]
        ]
    },
    {
        "id": "47edcfb241d10879",
        "type": "influxdb batch",
        "z": "710285b7c318af7d",
        "influxdb": "996e483573dc275b",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 960,
        "wires": []
    },
    {
        "id": "9621ef347f99598b",
        "type": "link in",
        "z": "710285b7c318af7d",
        "name": "Local InfluxDB",
        "links": [
            "c00e74f8f15aa8b0",
            "afbf283442933e98",
            "931843690f89e4b2",
            "1f72a51f99a36ca7",
            "5d5d307e8c9679d5",
            "df0081dd209b84f1",
            "2df71e1.2d013e2",
            "1628eea3.8519d1",
            "bc68bc8a28df9617"
        ],
        "x": 35,
        "y": 960,
        "wires": [
            []
        ]
    },
    {
        "id": "c09d545b6df16396",
        "type": "comment",
        "z": "710285b7c318af7d",
        "name": "Local InfluxDb Link",
        "info": "",
        "x": 150,
        "y": 940,
        "wires": []
    },
    {
        "id": "2bd118531100b81a",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "710285b7c318af7d",
        "server": "da535876.280af8",
        "name": "SESS",
        "x": 930,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "f45ee5a9d828f33f",
        "type": "link in",
        "z": "710285b7c318af7d",
        "name": "Remote FluxDB",
        "links": [
            "73dcd344b8317fe8",
            "bb6704860e47250f",
            "59dbffea8f877b0c",
            "8b38b70a05725e73",
            "a20e9d00398c743d",
            "0650889699c6bc1a",
            "95d545a9a782b5a9",
            "e61f97b8f9e3ef74"
        ],
        "x": 35,
        "y": 1040,
        "wires": [
            [
                "2bd118531100b81a"
            ]
        ]
    },
    {
        "id": "389c0fb2db991eef",
        "type": "mqtt in",
        "z": "710285b7c318af7d",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/DeleteCreateLocalDB/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 210,
        "y": 160,
        "wires": [
            [
                "fe90598f9a660241"
            ]
        ]
    },
    {
        "id": "5bb39ff48d6f2de3",
        "type": "delay",
        "z": "710285b7c318af7d",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 560,
        "y": 240,
        "wires": [
            [
                "c2c11161b2a82dad"
            ]
        ]
    },
    {
        "id": "fe90598f9a660241",
        "type": "function",
        "z": "710285b7c318af7d",
        "name": "Check Server macAddr",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Local Database has been reset.\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 160,
        "wires": [
            [
                "ce6ffa9280096a4d",
                "5bb39ff48d6f2de3",
                "0833333ea93a007e"
            ]
        ]
    },
    {
        "id": "0833333ea93a007e",
        "type": "link out",
        "z": "710285b7c318af7d",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 815,
        "y": 160,
        "wires": []
    },
    {
        "id": "c7e24ecbbb6c7369",
        "type": "link in",
        "z": "710285b7c318af7d",
        "name": "",
        "links": [
            "f54935426e1c4484"
        ],
        "x": 35,
        "y": 780,
        "wires": [
            [
                "7f4d14714f83fdcd",
                "37c7d204e64f9634"
            ]
        ]
    },
    {
        "id": "37c7d204e64f9634",
        "type": "function",
        "z": "710285b7c318af7d",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[0]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[2]]: parseFloat(output[1])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 820,
        "wires": [
            [
                "6faa46410ce1b572"
            ]
        ]
    },
    {
        "id": "7f4d14714f83fdcd",
        "type": "function",
        "z": "710285b7c318af7d",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[2]]: parseFloat(output[1])\n\t\t},\n        tags:{\n            PLC: output[0] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 780,
        "wires": [
            []
        ]
    },
    {
        "id": "6faa46410ce1b572",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "710285b7c318af7d",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "ea4ee3e654d337b5",
        "type": "influxdb batch",
        "z": "710285b7c318af7d",
        "influxdb": "996e483573dc275b",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 780,
        "wires": []
    },
    {
        "id": "3f1962defcdc7be8",
        "type": "comment",
        "z": "710285b7c318af7d",
        "name": "Accumulators Link",
        "info": "",
        "x": 110,
        "y": 740,
        "wires": []
    },
    {
        "id": "20f0eda91166c622",
        "type": "comment",
        "z": "710285b7c318af7d",
        "name": "------- Global Logging Connection ------- ",
        "info": "",
        "x": 170,
        "y": 900,
        "wires": []
    },
    {
        "id": "b9043f3beae0092d",
        "type": "comment",
        "z": "710285b7c318af7d",
        "name": "Remote FluxDb Link",
        "info": "",
        "x": 150,
        "y": 1020,
        "wires": []
    },
    {
        "id": "4739bd48d318829a",
        "type": "mqtt in",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "topic": "MONICON/CMD/OS/",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 140,
        "y": 160,
        "wires": [
            [
                "dbb06e97027fb681",
                "7ab571bb22872868",
                "ea457041a26c01ca",
                "e5066fdb33bf468f",
                "08c9da798daa0b01",
                "1b6bfdf90cd7277f"
            ]
        ]
    },
    {
        "id": "3596a58e556d28e1",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "IP Addr",
        "func": "if (typeof msg.payload.networkInterfaces.wlan0[0].address !=\"undefined\" ){\n    var data = msg.payload.networkInterfaces.wlan0[0].address\n    var msg1 = { payload: data, topic: \"MONICON/STAT/OS/IP\" };\n    return msg1;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 320,
        "wires": [
            [
                "6f1dafcf097f71aa",
                "b906f697432c5a54"
            ]
        ]
    },
    {
        "id": "aff6968353e35e4f",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Uptime",
        "func": "var data = msg.payload.uptime\n\nlet days = parseInt(data / 86400)\nlet hours = parseInt((data % 86400) / 3600)\nlet minutes = parseInt(((data % 86400) % 3600) / 60)\nlet secs = parseInt(((data % 86400) % 3600) % 60)\n\nlet msg1 = {payload: \"Days[\" + days + \"] Hours[\" + hours + \"] Mins[\" + minutes + \"] Sec[\" + secs + \"]\", topic: \"MONICON/STAT/OS/UPTIME\"}\n\nreturn msg1\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 360,
        "wires": [
            [
                "6f1dafcf097f71aa",
                "6bb03d4ba550ca6f"
            ]
        ]
    },
    {
        "id": "6f1dafcf097f71aa",
        "type": "mqtt out",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 870,
        "y": 60,
        "wires": []
    },
    {
        "id": "0d15b00edd8f483a",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Model",
        "func": "var data = msg.payload.cpus[0].model\nvar msg1 = { payload: data, topic: \"MONICON/STAT/OS/MODEL\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 280,
        "wires": [
            [
                "6f1dafcf097f71aa",
                "96e6fa0ff0b3184f"
            ]
        ]
    },
    {
        "id": "ec5ad5a6ac618cc3",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Disk Size (GB)",
        "func": "var data = msg.payload[0]\n\nvar diskSize = String((data.size / 1000000).toFixed(2)) + \",\" + String((data.used / 1000000).toFixed(2)) + \",\" + String((data.available / 1000000).toFixed(2)) + \",\" + String((data.capacity * 100).toFixed(0))\n\nvar msg1 = { payload: diskSize, topic: \"MONICON/STAT/OS/DISK\" }\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 200,
        "wires": [
            [
                "6f1dafcf097f71aa",
                "2ca76bae575eda7b"
            ]
        ]
    },
    {
        "id": "223480b457a6743c",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "RAM (MB)",
        "func": "var data = msg.payload\n\nvar ramSize = String((data.totalmem / 1000000).toFixed(2)) + \",\" + String((data.freemem / 1000000).toFixed(2)) + \",\" + String(parseFloat(data.memusage).toFixed(0))\n\nvar msg1 = { payload: ramSize, topic: \"MONICON/STAT/OS/RAM\" }\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 120,
        "wires": [
            [
                "6f1dafcf097f71aa",
                "01001c49047552f2"
            ]
        ]
    },
    {
        "id": "2ca76bae575eda7b",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar output = msg.payload.split(\",\");\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\n        \n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            TotalMem: parseFloat(output[0]),\n            UsedMem: parseFloat(output[1]),\n            FreeMem: parseFloat(output[2]),\n            PercentMem: parseFloat(output[3])\n        },\n        tags:{\n            System: \"HDD\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"HDD\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTotalMem: parseFloat(output[0]),\n                UsedMem: parseFloat(output[1]),\n                FreeMem: parseFloat(output[2]),\n                PercentMem: parseFloat(output[3])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 200,
        "wires": [
            [
                "c00e74f8f15aa8b0"
            ],
            [
                "59dbffea8f877b0c"
            ]
        ]
    },
    {
        "id": "0dc325f8d6dadab6",
        "type": "inject",
        "z": "d3096a2fd8b67aef",
        "name": "30sec Cycle",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "96c8fad9a907b892"
            ]
        ]
    },
    {
        "id": "96e6fa0ff0b3184f",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    //msg.payload = msg.payload.replace(/\\s+/g, '_')\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Model: msg.payload\n        },\n        tags:{\n            System: \"Model\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Model\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tModel: String(msg.payload[0].fields.Model)\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 280,
        "wires": [
            [
                "931843690f89e4b2"
            ],
            [
                "0650889699c6bc1a"
            ]
        ]
    },
    {
        "id": "b906f697432c5a54",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            IPAddr: msg.payload\n        },\n        tags:{\n            System: \"IP\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"IP\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tIPAddr: String(msg.payload[0].fields.IPAddr)\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 320,
        "wires": [
            [
                "931843690f89e4b2"
            ],
            [
                "0650889699c6bc1a"
            ]
        ]
    },
    {
        "id": "6bb03d4ba550ca6f",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet deploys = global.get(\"deploys\") || 0;\n\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Uptime: msg.payload,\n            Deploys: parseFloat(deploys)\n        },\n        tags:{\n            System: \"UPTIME\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n    let uptime = String(msg.payload[0].fields.Uptime);\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"UPTIME\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tUptime: uptime,\n\t\t\t\tDeploys: parseFloat(deploys)\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 360,
        "wires": [
            [
                "931843690f89e4b2"
            ],
            [
                "0650889699c6bc1a"
            ]
        ]
    },
    {
        "id": "e8fb261aea8a73d6",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Hostname: msg.payload,\n        },\n        tags:{\n            System: \"Hostname\",\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Hostname\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tHostname: String(msg.payload[0].fields.Hostname),\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 240,
        "wires": [
            [
                "931843690f89e4b2"
            ],
            [
                "0650889699c6bc1a"
            ]
        ]
    },
    {
        "id": "01001c49047552f2",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar output = msg.payload.split(\",\");\n\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            TotalRam: parseFloat(output[0]),\n            FreeRam: parseFloat(output[1]),\n            PercentRam: parseFloat(output[2])\n        },\n        tags:{\n            System: \"RAM\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"RAM\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTotalRam: parseFloat(output[0]),\n                FreeRam: parseFloat(output[1]),\n                PercentRam: parseFloat(output[2])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 120,
        "wires": [
            [
                "c00e74f8f15aa8b0"
            ],
            [
                "59dbffea8f877b0c"
            ]
        ]
    },
    {
        "id": "97800be0e5b7685c",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Hostname",
        "func": "var data = msg.payload.hostname\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/Hostname\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 240,
        "wires": [
            [
                "e8fb261aea8a73d6"
            ]
        ]
    },
    {
        "id": "d4b13034d9783d3d",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Temperature",
        "func": "var data = msg.payload\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/Temperature\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 400,
        "wires": [
            [
                "1604c194fd73c55b",
                "6f1dafcf097f71aa",
                "0d23a6ebcb9cc84a"
            ]
        ]
    },
    {
        "id": "1604c194fd73c55b",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"  \n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Temperature: msg.payload,\n        },\n        tags:{\n            System: \"Temperature\",\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Temperature\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTemperature: parseFloat(msg.payload[0].fields.Temperature),\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 400,
        "wires": [
            [
                "afbf283442933e98"
            ],
            [
                "bb6704860e47250f"
            ]
        ]
    },
    {
        "id": "ea457041a26c01ca",
        "type": "OS",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "x": 370,
        "y": 240,
        "wires": [
            [
                "97800be0e5b7685c"
            ]
        ]
    },
    {
        "id": "e5066fdb33bf468f",
        "type": "Drives",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "ec5ad5a6ac618cc3"
            ]
        ]
    },
    {
        "id": "1b6bfdf90cd7277f",
        "type": "Uptime",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "x": 380,
        "y": 360,
        "wires": [
            [
                "aff6968353e35e4f"
            ]
        ]
    },
    {
        "id": "7ab571bb22872868",
        "type": "CPUs",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "x": 370,
        "y": 280,
        "wires": [
            [
                "0d15b00edd8f483a"
            ]
        ]
    },
    {
        "id": "08c9da798daa0b01",
        "type": "Memory",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "x": 380,
        "y": 120,
        "wires": [
            [
                "223480b457a6743c"
            ]
        ]
    },
    {
        "id": "dbb06e97027fb681",
        "type": "NetworkIntf",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "x": 390,
        "y": 320,
        "wires": [
            [
                "3596a58e556d28e1"
            ]
        ]
    },
    {
        "id": "8d78fbea0370cf24",
        "type": "cpu",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "msgCore": false,
        "msgOverall": false,
        "msgArray": false,
        "msgTemp": true,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "d4b13034d9783d3d"
            ]
        ]
    },
    {
        "id": "b4f30e43233377f5",
        "type": "exec",
        "z": "d3096a2fd8b67aef",
        "command": "iw dev | grep -m1 ssid | awk '{print $2}'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "SSID",
        "x": 370,
        "y": 540,
        "wires": [
            [
                "7d12109f415a19c2"
            ],
            [],
            []
        ]
    },
    {
        "id": "4d28743afafcffe2",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar msg1 = {};\n\n    msg1.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            SSID: msg.payload,\n            SiteID: siteID\n        },\n        tags:{\n            System: \"SSID\",\n        }\n    }];\n    \nvar msg2 = {};\n\nstructureObject();\n\nreturn [[msg1], [msg2]];\n        \nfunction structureObject() {\n\tmsg2.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"SSID\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tSSID: String(msg.payload),\n\t\t\t\tSiteID: String(siteID),\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 520,
        "wires": [
            [
                "afbf283442933e98"
            ],
            [
                "bb6704860e47250f"
            ]
        ]
    },
    {
        "id": "7d12109f415a19c2",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "SSID",
        "func": "var data = String(msg.payload.replace(/[\\n\\r]+/g, ' ').replace(/\\s{2,}/g,' ').replace(/^\\s+|\\s+$/,'') )\nmsg.payload = data\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 520,
        "wires": [
            [
                "4d28743afafcffe2"
            ]
        ]
    },
    {
        "id": "6ad05e41d5fb6151",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Used mem(SSD)",
        "func": "let msg1 = {payload : \"df -h | grep -i sda1 | awk '{print $3\\\"/\\\"}';df -h | grep -i sda1 | awk '{print $2}'\", topic :\"Used mem(SSD)\"}\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 600,
        "wires": [
            [
                "32ee49f6e8884ce3"
            ]
        ]
    },
    {
        "id": "32ee49f6e8884ce3",
        "type": "exec",
        "z": "d3096a2fd8b67aef",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 590,
        "y": 600,
        "wires": [
            [
                "6f1f7c378d043fe6"
            ],
            [],
            []
        ]
    },
    {
        "id": "6f1f7c378d043fe6",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Used mem(SSD)",
        "func": "if(msg.topic != \"Used mem(SSD)\") {\n    return\n}\n\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet data = msg.payload.split('/')\n\n//return msg;\n\nvar msg1 = {};\n\n    msg1.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            SSD_Used: data[0],//.replace(/\\D/g,'')), //removes non numerical characters\n            SSD_Total: data[1],//.replace(/\\D/g,'')), //removes non numerical characters\n        },\n        tags:{\n            System: \"SSD\",\n        }\n    }];\n    \nvar msg2 = {};\n\nstructureObject();\n\nreturn [[msg1], [msg2]];\n        \nfunction structureObject() {\n    let usedMem = String(data[0].replace(/\\s+/g, ' ').trim());\n    let totMem = String(data[1].replace(/\\s+/g, ' ').trim());\n\tmsg2.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"SSD\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tSSD_Used: usedMem,\n\t\t\t\tSSD_Total: totMem,\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 910,
        "y": 600,
        "wires": [
            [
                "afbf283442933e98"
            ],
            [
                "bb6704860e47250f"
            ]
        ]
    },
    {
        "id": "581395e34fd72d1c",
        "type": "link in",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "links": [
            "e97d7f45c569a121"
        ],
        "x": 135,
        "y": 360,
        "wires": [
            [
                "08c9da798daa0b01",
                "e5066fdb33bf468f",
                "ea457041a26c01ca",
                "7ab571bb22872868",
                "dbb06e97027fb681",
                "1b6bfdf90cd7277f",
                "8d78fbea0370cf24",
                "b4f30e43233377f5",
                "10d348dae61e1a2a"
            ]
        ]
    },
    {
        "id": "e97d7f45c569a121",
        "type": "link out",
        "z": "d3096a2fd8b67aef",
        "name": "30SecCycle",
        "links": [
            "581395e34fd72d1c"
        ],
        "x": 615,
        "y": 80,
        "wires": []
    },
    {
        "id": "c00e74f8f15aa8b0",
        "type": "link out",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "links": [
            "9621ef347f99598b"
        ],
        "x": 1115,
        "y": 80,
        "wires": []
    },
    {
        "id": "59dbffea8f877b0c",
        "type": "link out",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "links": [
            "f45ee5a9d828f33f"
        ],
        "x": 1115,
        "y": 160,
        "wires": []
    },
    {
        "id": "931843690f89e4b2",
        "type": "link out",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "links": [
            "9621ef347f99598b"
        ],
        "x": 1115,
        "y": 240,
        "wires": []
    },
    {
        "id": "afbf283442933e98",
        "type": "link out",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "links": [
            "9621ef347f99598b"
        ],
        "x": 1115,
        "y": 400,
        "wires": []
    },
    {
        "id": "0650889699c6bc1a",
        "type": "link out",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "links": [
            "f45ee5a9d828f33f"
        ],
        "x": 1115,
        "y": 360,
        "wires": []
    },
    {
        "id": "bb6704860e47250f",
        "type": "link out",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "links": [
            "f45ee5a9d828f33f"
        ],
        "x": 1115,
        "y": 600,
        "wires": []
    },
    {
        "id": "10d348dae61e1a2a",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "System & Device Info",
        "func": "let macAddr = global.get(\"macAddr\") || \"NotSet\";\n\nif (macAddr === \"NotSet\") {\n    return [msg, null];\n} else {\n    msg.payload = macAddr;\n    return [null, msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 760,
        "wires": [
            [
                "db814d4b92591469"
            ],
            [
                "e819ade4bad40992"
            ]
        ]
    },
    {
        "id": "db814d4b92591469",
        "type": "exec",
        "z": "d3096a2fd8b67aef",
        "command": "cat /sys/class/net/eth0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 630,
        "y": 700,
        "wires": [
            [
                "2b31093c53e6322b"
            ],
            [],
            []
        ]
    },
    {
        "id": "2b31093c53e6322b",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nmsg.payload = macAddr;\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 700,
        "wires": [
            [
                "e819ade4bad40992"
            ]
        ]
    },
    {
        "id": "96c8fad9a907b892",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Developer macAddr Block",
        "func": "let macAddr = global.get(\"macAddr\") || \"nSet\";\nif(macAddr == \"b827ebf15f4e\" || macAddr == \"b827eba5dff3\") {\n    return\n} \nelse if (macAddr == \"nSet\") {\n    return [[msg], [null]];\n} else {\n    return [[null], [msg]];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 40,
        "wires": [
            [
                "2528d414182a33fd"
            ],
            [
                "e97d7f45c569a121"
            ]
        ]
    },
    {
        "id": "1df94b0489844d13",
        "type": "comment",
        "z": "d3096a2fd8b67aef",
        "name": "Get local macaddr",
        "info": "",
        "x": 410,
        "y": 720,
        "wires": []
    },
    {
        "id": "2528d414182a33fd",
        "type": "link out",
        "z": "d3096a2fd8b67aef",
        "name": "Get macAddr if Not Defined",
        "links": [
            "11c74579.3eeadb"
        ],
        "x": 615,
        "y": 40,
        "wires": []
    },
    {
        "id": "0d23a6ebcb9cc84a",
        "type": "link out",
        "z": "d3096a2fd8b67aef",
        "name": "",
        "links": [
            "c049b51024e24a9d"
        ],
        "x": 835,
        "y": 460,
        "wires": []
    },
    {
        "id": "e819ade4bad40992",
        "type": "function",
        "z": "d3096a2fd8b67aef",
        "name": "Remote Database",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tSystem: \"macAddr\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tmacAddr: String(msg.payload)\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 760,
        "wires": [
            [
                "bb6704860e47250f"
            ]
        ]
    },
    {
        "id": "5fd69b1dfb10a161",
        "type": "exec",
        "z": "dd961a666a1b7968",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 810,
        "y": 300,
        "wires": [
            [],
            [
                "571c9530be2d8da2"
            ],
            []
        ]
    },
    {
        "id": "26b350362cd5a238",
        "type": "inject",
        "z": "dd961a666a1b7968",
        "name": "48hr Interval",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "172800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "5fd69b1dfb10a161"
            ]
        ]
    },
    {
        "id": "a0f4a69a367bf82a",
        "type": "function",
        "z": "dd961a666a1b7968",
        "name": "Deploy Counter",
        "func": "var deploys = global.get(\"deploys\") || 0;\ndeploys = deploys + 1;\nglobal.set(\"deploys\", deploys);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "52fa38974e2b9ea8",
        "type": "inject",
        "z": "dd961a666a1b7968",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "a0f4a69a367bf82a"
            ]
        ]
    },
    {
        "id": "89f9a392ce930f3a",
        "type": "function",
        "z": "dd961a666a1b7968",
        "name": "Check Server Address",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 420,
        "wires": [
            [
                "5fd69b1dfb10a161",
                "d50227d0c023b312"
            ]
        ]
    },
    {
        "id": "cbb5686291cee1a2",
        "type": "mqtt in",
        "z": "dd961a666a1b7968",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Reboot/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 160,
        "y": 420,
        "wires": [
            [
                "89f9a392ce930f3a"
            ]
        ]
    },
    {
        "id": "f3b8adc5e9e8ec29",
        "type": "comment",
        "z": "dd961a666a1b7968",
        "name": "Deploy Counter",
        "info": "",
        "x": 100,
        "y": 140,
        "wires": []
    },
    {
        "id": "7cb2562d49f9259c",
        "type": "comment",
        "z": "dd961a666a1b7968",
        "name": "System Reboot every 48hrs",
        "info": "",
        "x": 140,
        "y": 260,
        "wires": []
    },
    {
        "id": "1de2ea3cf2de32aa",
        "type": "comment",
        "z": "dd961a666a1b7968",
        "name": "Remote Reboot",
        "info": "",
        "x": 100,
        "y": 380,
        "wires": []
    },
    {
        "id": "d50227d0c023b312",
        "type": "function",
        "z": "dd961a666a1b7968",
        "name": "Return Message",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Server Reboot was Successful.\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 420,
        "wires": [
            [
                "60380f36704ab25d"
            ]
        ]
    },
    {
        "id": "60380f36704ab25d",
        "type": "link out",
        "z": "dd961a666a1b7968",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 1255,
        "y": 420,
        "wires": []
    },
    {
        "id": "dbf0f3d7bcc12218",
        "type": "inject",
        "z": "dd961a666a1b7968",
        "name": "MoniconPLC-Server004V0.2.1",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "MoniconPLC-Server004V0.2.1",
        "payloadType": "str",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "61f11ca9ac065cb4"
            ]
        ]
    },
    {
        "id": "8a47b3bf92baa281",
        "type": "comment",
        "z": "dd961a666a1b7968",
        "name": "Set Server Version",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "571c9530be2d8da2",
        "type": "function",
        "z": "dd961a666a1b7968",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "60380f36704ab25d"
            ]
        ]
    },
    {
        "id": "8399f729427e3d7f",
        "type": "comment",
        "z": "dd961a666a1b7968",
        "name": "Download Scripts",
        "info": "",
        "x": 100,
        "y": 640,
        "wires": []
    },
    {
        "id": "39f64f80b6321d9e",
        "type": "mqtt in",
        "z": "dd961a666a1b7968",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Scripts/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 160,
        "y": 680,
        "wires": [
            [
                "e43a2e0115728288"
            ]
        ]
    },
    {
        "id": "e43a2e0115728288",
        "type": "function",
        "z": "dd961a666a1b7968",
        "name": "Scripting",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\n//let directory = \"MONICON\";\n\n//var data = \"sudo find /home/pi/ -type d -name 'MONICON/Scripts' -exec rm -r {} +;\"\nvar data = \"sudo rm -r /home/pi/MONICON/Scripts;\"\ndata = data.concat(\"sudo git clone https://github.com/jimmy232/MoniconPLC_Scripts.git /home/pi/MONICON/Scripts/;\");\ndata = data.concat(\"sudo chmod +x /home/pi/MONICON/Scripts/*.sh;\");\ndata = data.concat(\"sudo /home/pi/MONICON/Scripts/\" + msg.payload + \";\");\nmsg.payload = data;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 680,
        "wires": [
            [
                "ec7635ab59b18c6c",
                "7daa293ff2601489",
                "6eee7991687d72e8"
            ]
        ]
    },
    {
        "id": "ec7635ab59b18c6c",
        "type": "exec",
        "z": "dd961a666a1b7968",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 790,
        "y": 680,
        "wires": [
            [
                "8808c403e86fc6e5"
            ],
            [
                "8808c403e86fc6e5"
            ],
            [
                "8808c403e86fc6e5",
                "59a89846e4b9a9eb"
            ]
        ]
    },
    {
        "id": "8808c403e86fc6e5",
        "type": "function",
        "z": "dd961a666a1b7968",
        "name": "Logs",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/LogMessages/\" + macAddr;\nif(msg.payload === null || msg.payload.length == 0) {\n    msg.payload == \"Empty Msg\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 680,
        "wires": [
            [
                "8f6f9afb87076fd8"
            ]
        ]
    },
    {
        "id": "59a89846e4b9a9eb",
        "type": "function",
        "z": "dd961a666a1b7968",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nif(msg.payload.code === 0) {\n    msg.payload = \"Script-Finished\";\n} else {\n    msg.payload = \"Script-Failed\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 720,
        "wires": [
            [
                "8f6f9afb87076fd8"
            ]
        ]
    },
    {
        "id": "8f6f9afb87076fd8",
        "type": "link out",
        "z": "dd961a666a1b7968",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 1195,
        "y": 840,
        "wires": []
    },
    {
        "id": "7daa293ff2601489",
        "type": "function",
        "z": "dd961a666a1b7968",
        "name": "Logs",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/LogMessages/\" + macAddr;\nif(msg.payload === null || msg.payload.length === 0) {\n    msg.payload == \"Empty Msg\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 800,
        "wires": [
            [
                "8f6f9afb87076fd8"
            ]
        ]
    },
    {
        "id": "6eee7991687d72e8",
        "type": "function",
        "z": "dd961a666a1b7968",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Running Scripts...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 840,
        "wires": [
            [
                "8f6f9afb87076fd8"
            ]
        ]
    },
    {
        "id": "ea2f209d675dfc1a",
        "type": "trigger",
        "z": "dd961a666a1b7968",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 800,
        "y": 540,
        "wires": [
            [
                "9ddbcb3577e17ebc"
            ]
        ]
    },
    {
        "id": "a722ad35f269afbe",
        "type": "comment",
        "z": "dd961a666a1b7968",
        "name": "Remote Reboot CMD - Esp32 Physical Reboot",
        "info": "",
        "x": 200,
        "y": 520,
        "wires": []
    },
    {
        "id": "f8ab72519a27af71",
        "type": "mqtt in",
        "z": "dd961a666a1b7968",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/APM/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "dba358e0.ff7ca8",
        "inputs": 0,
        "x": 160,
        "y": 560,
        "wires": [
            [
                "4b673c0dd55ce507"
            ]
        ]
    },
    {
        "id": "4b673c0dd55ce507",
        "type": "function",
        "z": "dd961a666a1b7968",
        "name": "Check Server macAddr",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar msg1 = {payload: \"*\", topic: \"MONICON-PLC/CMD/APM/\" + msg.payload};\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"PLC Reboot was Successful.\"\n\nreturn [msg, msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 560,
        "wires": [
            [
                "ea2f209d675dfc1a"
            ],
            [
                "fb78c9312dcfec4c"
            ]
        ]
    },
    {
        "id": "9ddbcb3577e17ebc",
        "type": "link out",
        "z": "dd961a666a1b7968",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 1015,
        "y": 540,
        "wires": []
    },
    {
        "id": "fb78c9312dcfec4c",
        "type": "mqtt out",
        "z": "dd961a666a1b7968",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "dba358e0.ff7ca8",
        "x": 810,
        "y": 580,
        "wires": []
    },
    {
        "id": "61f11ca9ac065cb4",
        "type": "function",
        "z": "dd961a666a1b7968",
        "name": "Set Server Version",
        "func": "// eg. \"MONICON-PLC_ServerV0.1.1\"\nglobal.set(\"serverVersion\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 80,
        "wires": [
            [
                "18a41cd30f310b9e"
            ]
        ]
    },
    {
        "id": "1d9dfeb067fb5806",
        "type": "function",
        "z": "dd961a666a1b7968",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nreturn\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 970,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "18a41cd30f310b9e",
        "type": "exec",
        "z": "dd961a666a1b7968",
        "command": "cat /sys/class/net/eth0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 770,
        "y": 80,
        "wires": [
            [
                "1d9dfeb067fb5806"
            ],
            [],
            []
        ]
    },
    {
        "id": "d6e873f6f7881c4c",
        "type": "comment",
        "z": "dd961a666a1b7968",
        "name": "Initialise InfluxDB",
        "info": "",
        "x": 100,
        "y": 920,
        "wires": []
    },
    {
        "id": "32970e13bca29347",
        "type": "exec",
        "z": "dd961a666a1b7968",
        "command": "sudo influxd -config /etc/influxdb/influxdb.conf",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "InfluxDB Start",
        "x": 1080,
        "y": 960,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "40d5421e32663832",
        "type": "inject",
        "z": "dd961a666a1b7968",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 110,
        "y": 960,
        "wires": [
            [
                "32970e13bca29347"
            ]
        ]
    },
    {
        "id": "d95a948c628a7b1c",
        "type": "file in",
        "z": "764a5a1cb67617a0",
        "name": "",
        "filename": "",
        "format": "",
        "sendError": true,
        "x": 950,
        "y": 40,
        "wires": [
            [
                "88620cf64e9cc948",
                "d2b03a582c3dcb48"
            ]
        ]
    },
    {
        "id": "3c2e954a886e2e39",
        "type": "switch",
        "z": "764a5a1cb67617a0",
        "name": "Check user agent",
        "property": "req.headers.user-agent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "ESP32-http-Update",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 40,
        "wires": [
            [],
            [
                "94c11ae7328c0cc0"
            ]
        ]
    },
    {
        "id": "e6928c24c4db9c32",
        "type": "http in",
        "z": "764a5a1cb67617a0",
        "name": "OTA Request",
        "url": "/firmwareUpdate",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "3c2e954a886e2e39"
            ]
        ]
    },
    {
        "id": "1cb373c81356ef89",
        "type": "debug",
        "z": "764a5a1cb67617a0",
        "name": "msg.mostRecentFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "mostRecentFile",
        "x": 1000,
        "y": 260,
        "wires": []
    },
    {
        "id": "88620cf64e9cc948",
        "type": "http response",
        "z": "764a5a1cb67617a0",
        "name": "OTA Response",
        "statusCode": "",
        "headers": {},
        "x": 1120,
        "y": 40,
        "wires": []
    },
    {
        "id": "f3fe34598d8fc779",
        "type": "function",
        "z": "764a5a1cb67617a0",
        "name": "",
        "func": "///// \n\n\n//msg.filename = \"/home/pi/Firmware/PowerProV2.3.2.ino.nodemcu.bin\"\n//return msg\n\n//List of files from RPI Github\nvar firmwares = msg.files;\n//TRUC_VERSION DATA from ESP\nvar version = msg.req.headers;\n//Version Data\nvar currentFile = version[\"x-esp32-version\"];\n//Extract Device Type PowerPro or LightPro\nvar deviceType = currentFile.substring(0,currentFile.indexOf(\"V\")+1)\nmsg.deviceType = deviceType;\n\n//Extracts Github file that matches current ESP version ID\nvar existingFile = firmwares.filter(item=> item.includes(currentFile)).pop();\n//Filters out any incorrect device types ie PowerPro or LightPro\nvar firmwareNames = firmwares.filter(item=> item.includes(msg.deviceType));\n//Sorts out list of files\nvar comparer = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});\nfirmwareNames.sort(comparer.compare)[firmwareNames.length-1];\n\nvar mostRecentFile;\n//Pops off most recent file\nmsg.mostRecentFile = firmwareNames.pop();\nmsg.existingFile = existingFile;\n//Compares ESP version to most recent developed file\n//if((msg.existingFile.localeCompare(msg.mostRecentFile)) < 0)\n//{\n    msg.filename = \"/home/pi/Firmware/\" + msg.mostRecentFile;\n// }\n// else\n// {\n//     msg.filename = undefined;\n//     msg.payload = \"No New File Exists\"\n// }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 710,
        "y": 40,
        "wires": [
            [
                "1cb373c81356ef89",
                "d29cf1421607dd2c",
                "d95a948c628a7b1c"
            ]
        ]
    },
    {
        "id": "d29cf1421607dd2c",
        "type": "debug",
        "z": "764a5a1cb67617a0",
        "name": "msg.existingFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "existingFile",
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "94c11ae7328c0cc0",
        "type": "fs-ops-dir",
        "z": "764a5a1cb67617a0",
        "name": "",
        "path": "/home/pi/Firmware",
        "pathType": "str",
        "filter": ".bin",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 540,
        "y": 40,
        "wires": [
            [
                "f3fe34598d8fc779",
                "c0b5850297267f60"
            ]
        ]
    },
    {
        "id": "d2b03a582c3dcb48",
        "type": "function",
        "z": "764a5a1cb67617a0",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Uploading Outstation with new File: <\" + msg.filename + \">\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1090,
        "y": 120,
        "wires": [
            [
                "90551216a497fd63"
            ]
        ]
    },
    {
        "id": "90551216a497fd63",
        "type": "link out",
        "z": "764a5a1cb67617a0",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 1175,
        "y": 120,
        "wires": []
    },
    {
        "id": "c0b5850297267f60",
        "type": "debug",
        "z": "764a5a1cb67617a0",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 140,
        "wires": []
    },
    {
        "id": "79018b3aef89efb3",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "MQTTCloud => MONICON.LOCAL",
        "info": "",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "4dd66e5d097a2bed",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 260,
        "wires": [
            [
                "0c99bad628fc677e"
            ]
        ]
    },
    {
        "id": "0c99bad628fc677e",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "System & Device Info",
        "func": "let macAddr = global.get(\"macAddr\") || \"NotSet\";\n\nif (macAddr === \"NotSet\") {\n    return [msg, null];\n} else {\n    return [null, msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 260,
        "wires": [
            [
                "8599b5e8b0ab52fb"
            ],
            [
                "e5345968f4264a8c"
            ]
        ]
    },
    {
        "id": "2cfb22f3634ef678",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "MONICON-PLC/STAT/System/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 150,
        "y": 80,
        "wires": [
            [
                "bfa1b207a04f1c5a"
            ]
        ]
    },
    {
        "id": "13db8175ca78be13",
        "type": "string",
        "z": "750f8d5dc8268f79",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 420,
        "y": 200,
        "wires": [
            [
                "0c99bad628fc677e"
            ]
        ]
    },
    {
        "id": "8599b5e8b0ab52fb",
        "type": "exec",
        "z": "750f8d5dc8268f79",
        "command": "cat /sys/class/net/wlan0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 950,
        "y": 220,
        "wires": [
            [
                "6fa5ebcbc8c49d99"
            ],
            [
                "6fda4ac62bb047e6"
            ],
            []
        ]
    },
    {
        "id": "6fa5ebcbc8c49d99",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nlet siteID = global.get(\"siteID\") || \"SiteIDxxx\";\n\nvar data = macAddr + \",\" + siteID + \",\" + msg.payload + \",\";\n\nmsg.payload = data;\nmsg.topic = \"sess/\" + msg.topic;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1150,
        "y": 220,
        "wires": [
            [
                "e5345968f4264a8c"
            ]
        ]
    },
    {
        "id": "11f76adb941c3419",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "Set MacAddress if NOT already Set",
        "info": "",
        "x": 1080,
        "y": 160,
        "wires": []
    },
    {
        "id": "bfa1b207a04f1c5a",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "System Data",
        "func": "let siteID = global.get(\"siteID\") || \"SiteIDxxx\";\nlet macAddr = global.get(\"macAddr\") || \"NotSet\";\nlet serverVersion = global.get(\"serverVersion\") || \"MONICON-PLC_ServerV0.0.0\"\n\nvar data = macAddr + \",\" + siteID + \",\" + msg.payload;\n\nmsg.payload = data + \",\" + serverVersion;\nmsg.topic = \"sess/\" + msg.topic;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 80,
        "wires": [
            [
                "1192fe026f4dd156"
            ]
        ]
    },
    {
        "id": "e5345968f4264a8c",
        "type": "mqtt out",
        "z": "750f8d5dc8268f79",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 1330,
        "y": 260,
        "wires": []
    },
    {
        "id": "44de1bbc2c4ce017",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Add to Query",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\n\nlet siteID = global.get(\"siteID\");\n\nlet macAddr = global.get(\"macAddr\") || \"nSet\";\nmsg.topic = \"sess/MONICON-PLC/STAT/Query/\" + macAddr;\n\nif(serialID != macAddr) {\n    return\n}\nlet uptime = flow.get(\"uptime\") || \"N/A\"\nlet deploys = global.get(\"deploys\") || 0;\nvar data = flow.get(\"diskSize\")\nlet diskSize = data.split(\",\");\n\nlet msg1 = { topic: msg.topic, payload: uptime + \",\" + diskSize[1] + \",\" + diskSize[0] +\",N/A,N/A,\" + deploys};\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 500,
        "wires": [
            [
                "18a47161fb4f9076",
                "b6435a4ffde91469"
            ]
        ]
    },
    {
        "id": "b2bf9e8f30aa55e3",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "Remote System Status Query",
        "info": "",
        "x": 140,
        "y": 480,
        "wires": []
    },
    {
        "id": "24174fb6305b9d77",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Set Site ID",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nlet siteID = msg.payload;\nglobal.set(\"siteID\", siteID);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 680,
        "wires": [
            [
                "ed3e22124c0bd84b"
            ]
        ]
    },
    {
        "id": "46182793b531c1b8",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "Remote Set Site ID",
        "info": "",
        "x": 110,
        "y": 640,
        "wires": []
    },
    {
        "id": "1f3ff66952b56398",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "Remote Set Equipment ID",
        "info": "",
        "x": 130,
        "y": 800,
        "wires": []
    },
    {
        "id": "64779b973c1e6e2f",
        "type": "string",
        "z": "750f8d5dc8268f79",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 700,
        "y": 840,
        "wires": [
            [
                "7adb142d89602830",
                "852a9f0b827ee6e5"
            ]
        ]
    },
    {
        "id": "852a9f0b827ee6e5",
        "type": "mqtt out",
        "z": "750f8d5dc8268f79",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 950,
        "y": 920,
        "wires": []
    },
    {
        "id": "d6d3bfb6f2f96f99",
        "type": "string",
        "z": "750f8d5dc8268f79",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 700,
        "y": 1000,
        "wires": [
            [
                "852a9f0b827ee6e5",
                "7309d16b9ff62246"
            ]
        ]
    },
    {
        "id": "029a2e9235a47386",
        "type": "exec",
        "z": "750f8d5dc8268f79",
        "command": "sudo rm /home/pi/Firmware -r",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Delete Firmware Dir",
        "x": 900,
        "y": 1180,
        "wires": [
            [
                "d5a9b62c09c01d14",
                "7b37e39a4ceffc87"
            ],
            [
                "17d3bac2a627175b"
            ],
            []
        ]
    },
    {
        "id": "d5a9b62c09c01d14",
        "type": "exec",
        "z": "750f8d5dc8268f79",
        "command": " sudo git clone https://github.com/jimmy232/Firmware.git",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Download github bin files",
        "x": 1210,
        "y": 1180,
        "wires": [
            [
                "c3073db0d8a22d80"
            ],
            [
                "8cd52186e6871213"
            ],
            []
        ]
    },
    {
        "id": "a980936e71901125",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "MONICON-PLC/CMD/DownloadUploadFirmware/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 210,
        "y": 1180,
        "wires": [
            [
                "df6527f2c54e817b"
            ]
        ]
    },
    {
        "id": "df6527f2c54e817b",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Alt Topic",
        "func": "var data = msg.topic\ndata = data.replace(\"DownloadUploadFirmware\", \"UploadFirmware\");\nmsg.topic = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1180,
        "wires": [
            [
                "029a2e9235a47386",
                "31b23f42f1603371"
            ]
        ]
    },
    {
        "id": "72e81696944f4834",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "Download new ESP32 Firmware and Upload to Device on request",
        "info": "",
        "x": 250,
        "y": 1140,
        "wires": []
    },
    {
        "id": "111ef772d3e74cd4",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "Download new ESP32 Firmware and Upload to Device on request",
        "info": "",
        "x": 250,
        "y": 960,
        "wires": []
    },
    {
        "id": "2dc10453a6a9f777",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Set Timer Enable",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AnalogTimer\", \"0\");\n    AnalogTimer = \"0\";\n    msg.payload = \"Analog Timer Inactive\";\n} else {\n    global.set(\"AnalogTimer\", \"1\");\n    AnalogTimer = \"1\";\n    msg.payload = \"Analog Timer Active\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1380,
        "wires": [
            [
                "f27ab89bb47a34f7"
            ]
        ]
    },
    {
        "id": "6c97cbe941e5b11a",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Global Overide Timer Off",
        "func": "var AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AnalogTimer\", \"0\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "9a04b346d70f8b39",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Set Timer Enable",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar AlarmTimer = global.get(\"AlarmTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AlarmTimer\", \"0\");\n    AlarmTimer = \"0\";\n    msg.payload = \"Alarm Timer Inactive\";\n} else {\n    global.set(\"AlarmTimer\", \"1\");\n    AlarmTimer = \"1\";\n    msg.payload = \"Alarm Timer Active\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 1520,
        "wires": [
            [
                "775f72e0c1df2969"
            ]
        ]
    },
    {
        "id": "faaf4cd720dd2a54",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Global Overide Timer Off",
        "func": "var AnalogTimer = global.get(\"AlarmTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AlarmTimer\", \"0\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "6304bed808abeaf6",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "Define Email Parameters",
        "info": "",
        "x": 130,
        "y": 1620,
        "wires": []
    },
    {
        "id": "ffd196c2b5439f7d",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Email Parameters",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nlet parameters = msg.payload.split('+');\n\nif (parameters[5] == \"1\") // PT100 Configuration Parameters\n{\n    global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n    global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n    global.set(\"addrTo_PT100\", parameters[2]);                //String\n    global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n    global.set(\"addrBcc_PT100\", parameters[4]);               //String\n    global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n    global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n} else {\n    global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n    global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n    global.set(\"addrTo_4n20\", parameters[2]);                //String\n    global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n    global.set(\"addrBcc_4n20\", parameters[4]);               //String\n    global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n    global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1660,
        "wires": [
            [
                "9a108a6234f716b4"
            ]
        ]
    },
    {
        "id": "614d01abf49dbe77",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 200,
        "wires": [
            [
                "13db8175ca78be13"
            ]
        ]
    },
    {
        "id": "e3fad264796ca040",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Query/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 160,
        "y": 520,
        "wires": [
            [
                "917392f47690b337",
                "4af66c32f56466f4",
                "d7554251378049f8"
            ]
        ]
    },
    {
        "id": "641aaa753e0167ad",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/SiteID/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 160,
        "y": 680,
        "wires": [
            [
                "24174fb6305b9d77"
            ]
        ]
    },
    {
        "id": "9b0c90166c38a310",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpdateEquipID/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 190,
        "y": 840,
        "wires": [
            [
                "64779b973c1e6e2f"
            ]
        ]
    },
    {
        "id": "200e9bd61dd01fd9",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UploadFirmware/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "d6d3bfb6f2f96f99"
            ]
        ]
    },
    {
        "id": "76c7c51a66db8ba9",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "Enable Analog Timer to Stream values to Broker",
        "info": "",
        "x": 200,
        "y": 1340,
        "wires": []
    },
    {
        "id": "31e69edc0405ae9c",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/AnalogTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 1380,
        "wires": [
            [
                "2dc10453a6a9f777",
                "6c97cbe941e5b11a"
            ]
        ]
    },
    {
        "id": "abb3d5bec91f3955",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "Enable Alarm Timer to Stream values to Broker",
        "info": "",
        "x": 200,
        "y": 1480,
        "wires": []
    },
    {
        "id": "6e99da715bc88e4b",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/AlarmTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 1520,
        "wires": [
            [
                "9a04b346d70f8b39",
                "faaf4cd720dd2a54"
            ]
        ]
    },
    {
        "id": "a35a197ac246960d",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/EmailDefinition/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 190,
        "y": 1660,
        "wires": [
            [
                "ffd196c2b5439f7d"
            ]
        ]
    },
    {
        "id": "ced9fbe97716d3ee",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "Search Email Parameters",
        "info": "",
        "x": 130,
        "y": 1720,
        "wires": []
    },
    {
        "id": "bf25f6f4923a9863",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/EmailSearch/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 1760,
        "wires": [
            [
                "bf44f49debbb927b"
            ]
        ]
    },
    {
        "id": "bf44f49debbb927b",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Email Parameters Template",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nmsg.topic = msg.topic.replace(\"CMD\", \"STAT\");\n\nlet message = \"\";\n\nif (msg.payload == \"PT100SensorType\") // PT100 Configuration Parameters\n{\n    message = global.get(\"subjectMSg_PT100\");            //String\n    message += \",\";\n    message += global.get(\"bodyMSg_PT100\");               //String\n    message += \",\";\n    message += global.get(\"addrTo_PT100\");                //String\n    message += \",\";\n    message += global.get(\"addrCc_PT100\");                //Strng\n    message += \",\";\n    message += global.get(\"addrBcc_PT100\");               //String\n    message += \",\";\n    message += global.get(\"subjectParameters_PT100\");     //String of bools\n    message += \",\";\n    message += global.get(\"bodyParameters_PT100\");        //String of bools\n} else {\n    message = global.get(\"subjectMSg_4n20\");            //String\n    message += \",\";\n    message += global.get(\"bodyMSg_4n20\");               //String\n    message += \",\";\n    message += global.get(\"addrTo_4n20\");                //String\n    message += \",\";\n    message += global.get(\"addrCc_4n20\");                //Strng\n    message += \",\";\n    message += global.get(\"addrBcc_4n20\");               //String\n    message += \",\";\n    message += global.get(\"subjectParameters_4n20\");     //String of bools\n    message += \",\";\n    message += global.get(\"bodyParameters_4n20\");        //String of bools    \n}\nmsg.payload = message;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 1760,
        "wires": [
            [
                "c3073db0d8a22d80"
            ]
        ]
    },
    {
        "id": "9a108a6234f716b4",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Email template loaded successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1660,
        "wires": [
            [
                "c3073db0d8a22d80"
            ]
        ]
    },
    {
        "id": "31b23f42f1603371",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Clearing Server File Directory...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1320,
        "wires": [
            [
                "c3073db0d8a22d80"
            ]
        ]
    },
    {
        "id": "7b37e39a4ceffc87",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Downloading new Firmware...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1240,
        "wires": [
            [
                "c3073db0d8a22d80"
            ]
        ]
    },
    {
        "id": "7309d16b9ff62246",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Uploading new Firmware...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 1000,
        "wires": [
            [
                "da95df5b8f255552"
            ]
        ]
    },
    {
        "id": "775f72e0c1df2969",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\") || \"\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1520,
        "wires": [
            [
                "c3073db0d8a22d80"
            ]
        ]
    },
    {
        "id": "ed3e22124c0bd84b",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nlet siteID = global.get(\"siteID\", siteID);\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"SiteID updated <\" + siteID + \">\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 680,
        "wires": [
            [
                "f57be1321b8f34fa"
            ]
        ]
    },
    {
        "id": "f27ab89bb47a34f7",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\") || \"\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1380,
        "wires": [
            [
                "c3073db0d8a22d80"
            ]
        ]
    },
    {
        "id": "b6435a4ffde91469",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Query on Local Database Executed Successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 580,
        "wires": [
            [
                "18a47161fb4f9076"
            ]
        ]
    },
    {
        "id": "7adb142d89602830",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"New Equipment ID has been issued to Outstation.\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 840,
        "wires": [
            [
                "da95df5b8f255552"
            ]
        ]
    },
    {
        "id": "7e3c29ceb160205c",
        "type": "mqtt out",
        "z": "750f8d5dc8268f79",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 330,
        "y": 2280,
        "wires": []
    },
    {
        "id": "a10b8030843e9c45",
        "type": "mqtt out",
        "z": "750f8d5dc8268f79",
        "name": "MQTT Cloud",
        "topic": "",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "4d64fa3d.ad0334",
        "x": 330,
        "y": 2340,
        "wires": []
    },
    {
        "id": "1c9b883da5d3a8be",
        "type": "link in",
        "z": "750f8d5dc8268f79",
        "name": "MQTT Local | Remote",
        "links": [
            "1ed41e3ddfd2cd75",
            "ea6e0df42ddd55bf",
            "8f6f9afb87076fd8",
            "be4358bb48f1538b",
            "90551216a497fd63",
            "18a47161fb4f9076",
            "1192fe026f4dd156",
            "60380f36704ab25d",
            "a7c64e98d7685208",
            "14afe408efa1894a",
            "ba83d8b1617ff00a",
            "5fcb5665c1951308",
            "eb1b627ae4d8680e",
            "c3073db0d8a22d80",
            "8c8b7f30cd313678",
            "da95df5b8f255552",
            "0833333ea93a007e",
            "e25579c6.4f04d8",
            "9ddbcb3577e17ebc",
            "699294a4.9b178c",
            "0ede75408f4b5451",
            "f57be1321b8f34fa"
        ],
        "x": 195,
        "y": 2300,
        "wires": [
            [
                "a10b8030843e9c45",
                "7e3c29ceb160205c"
            ]
        ]
    },
    {
        "id": "c3073db0d8a22d80",
        "type": "link out",
        "z": "750f8d5dc8268f79",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 1575,
        "y": 1400,
        "wires": []
    },
    {
        "id": "da95df5b8f255552",
        "type": "link out",
        "z": "750f8d5dc8268f79",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 1375,
        "y": 920,
        "wires": []
    },
    {
        "id": "18a47161fb4f9076",
        "type": "link out",
        "z": "750f8d5dc8268f79",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 1375,
        "y": 500,
        "wires": []
    },
    {
        "id": "1192fe026f4dd156",
        "type": "link out",
        "z": "750f8d5dc8268f79",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 575,
        "y": 80,
        "wires": []
    },
    {
        "id": "4f87496316af3c99",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "GLOBAL DEVICE SEARCH",
        "info": "",
        "x": 140,
        "y": 140,
        "wires": []
    },
    {
        "id": "4006f8afbda57049",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "Poll Cycle Times",
        "info": "",
        "x": 120,
        "y": 1840,
        "wires": []
    },
    {
        "id": "f83233824199b277",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "MONICON-PLC/STAT/TenSecondLoopLimit/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 210,
        "y": 1880,
        "wires": [
            [
                "3a1db24cfd2fee47"
            ]
        ]
    },
    {
        "id": "3a1db24cfd2fee47",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 1880,
        "wires": [
            [
                "eb1b627ae4d8680e"
            ]
        ]
    },
    {
        "id": "eb1b627ae4d8680e",
        "type": "link out",
        "z": "750f8d5dc8268f79",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 735,
        "y": 1880,
        "wires": []
    },
    {
        "id": "347691e260032d61",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "Task Complete Messages",
        "info": "",
        "x": 150,
        "y": 1940,
        "wires": []
    },
    {
        "id": "4f2deba15bd14252",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "MONICON-PLC/STAT/RespondMessages/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 210,
        "y": 1980,
        "wires": [
            [
                "20b58eedded5d373"
            ]
        ]
    },
    {
        "id": "20b58eedded5d373",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 1980,
        "wires": [
            [
                "be4358bb48f1538b"
            ]
        ]
    },
    {
        "id": "be4358bb48f1538b",
        "type": "link out",
        "z": "750f8d5dc8268f79",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 735,
        "y": 1980,
        "wires": []
    },
    {
        "id": "a085a2b01375a7da",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "Enable Analog Timer to Stream values to Broker",
        "info": "",
        "x": 220,
        "y": 2040,
        "wires": []
    },
    {
        "id": "0b08bd4140ef4cae",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpgradeGrafana/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "inputs": 0,
        "x": 210,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "2b73be0ba7c34e59",
        "type": "exec",
        "z": "750f8d5dc8268f79",
        "command": "sudo /home/pi/JC/grafanaGithubSetup.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Update Local Grafana Dashboard ",
        "x": 840,
        "y": 2080,
        "wires": [
            [
                "e5a1256a34bafe84"
            ],
            [
                "53eec8d4ca9afe28"
            ],
            []
        ]
    },
    {
        "id": "2351210cf224ef7e",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Check Server",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 2080,
        "wires": [
            [
                "2b73be0ba7c34e59"
            ]
        ]
    },
    {
        "id": "e5a1256a34bafe84",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Local Grafana Updated Successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 2100,
        "wires": [
            [
                "14afe408efa1894a"
            ]
        ]
    },
    {
        "id": "14afe408efa1894a",
        "type": "link out",
        "z": "750f8d5dc8268f79",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 1255,
        "y": 2100,
        "wires": []
    },
    {
        "id": "d61040256e712955",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpgradeGrafana/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 210,
        "y": 2140,
        "wires": [
            [
                "2351210cf224ef7e"
            ]
        ]
    },
    {
        "id": "53eec8d4ca9afe28",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 2160,
        "wires": [
            [
                "14afe408efa1894a"
            ]
        ]
    },
    {
        "id": "17d3bac2a627175b",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1280,
        "wires": [
            [
                "c3073db0d8a22d80"
            ]
        ]
    },
    {
        "id": "8cd52186e6871213",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1450,
        "y": 1180,
        "wires": [
            [
                "c3073db0d8a22d80"
            ]
        ]
    },
    {
        "id": "6fda4ac62bb047e6",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1130,
        "y": 320,
        "wires": [
            [
                "0ede75408f4b5451"
            ]
        ]
    },
    {
        "id": "244186c59caa27cb",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "sess/MONICON-PLC/ENG/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 320,
        "wires": [
            [
                "bb3ad695fac36eaf"
            ]
        ]
    },
    {
        "id": "bb3ad695fac36eaf",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "ENG => CMD",
        "func": "msg.topic = msg.topic.replace(\"ENG\", \"CMD\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 320,
        "wires": [
            [
                "0c99bad628fc677e"
            ]
        ]
    },
    {
        "id": "b482a8326e63245b",
        "type": "mqtt in",
        "z": "750f8d5dc8268f79",
        "name": "",
        "topic": "sess/MONICON-PLC/PUB/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "nl": false,
        "rap": false,
        "inputs": 0,
        "x": 140,
        "y": 380,
        "wires": [
            [
                "32841b0be747ed61"
            ]
        ]
    },
    {
        "id": "32841b0be747ed61",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "PUB => CMD",
        "func": "msg.topic = msg.topic.replace(\"PUB\", \"CMD\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 380,
        "wires": [
            [
                "0c99bad628fc677e"
            ]
        ]
    },
    {
        "id": "9e52e8d5940ed788",
        "type": "comment",
        "z": "750f8d5dc8268f79",
        "name": "MASTER MQTT LINK",
        "info": "",
        "x": 140,
        "y": 2220,
        "wires": []
    },
    {
        "id": "917392f47690b337",
        "type": "Uptime",
        "z": "750f8d5dc8268f79",
        "name": "",
        "x": 420,
        "y": 580,
        "wires": [
            [
                "8c600ceaa3342a3c"
            ]
        ]
    },
    {
        "id": "8c600ceaa3342a3c",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Uptime",
        "func": "var data = msg.payload.uptime\n\nlet days = parseInt(data / 86400)\nlet hours = parseInt((data % 86400) / 3600)\nlet minutes = parseInt(((data % 86400) % 3600) / 60)\nlet secs = parseInt(((data % 86400) % 3600) % 60)\n\nlet msg1 = {payload: \"Days[\" + days + \"] Hours[\" + hours + \"] Mins[\" + minutes + \"] Sec[\" + secs + \"]\", topic: \"MONICON/STAT/OS/UPTIME\"};\nmsg1.topic = msg.topic;\nflow.set(\"uptime\",msg1.payload);\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "4af66c32f56466f4",
        "type": "delay",
        "z": "750f8d5dc8268f79",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 420,
        "y": 500,
        "wires": [
            [
                "44de1bbc2c4ce017"
            ]
        ]
    },
    {
        "id": "d7554251378049f8",
        "type": "Drives",
        "z": "750f8d5dc8268f79",
        "name": "",
        "x": 410,
        "y": 620,
        "wires": [
            [
                "b5ec30d4631fa08f"
            ]
        ]
    },
    {
        "id": "b5ec30d4631fa08f",
        "type": "function",
        "z": "750f8d5dc8268f79",
        "name": "Disk Size (GB)",
        "func": "var data = msg.payload[0]\n\nvar diskSize = String((data.size / 1000000).toFixed(2)) + \",\" + String((data.used / 1000000).toFixed(2)) + \",\" + String((data.available / 1000000).toFixed(2)) + \",\" + String((data.capacity * 100).toFixed(0))\n\nvar msg1 = { payload: diskSize, topic: \"MONICON/STAT/OS/DISK\" }\n\nflow.set(\"diskSize\", msg1.payload);\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "0ede75408f4b5451",
        "type": "link out",
        "z": "750f8d5dc8268f79",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 1375,
        "y": 320,
        "wires": []
    },
    {
        "id": "f57be1321b8f34fa",
        "type": "link out",
        "z": "750f8d5dc8268f79",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 1375,
        "y": 680,
        "wires": []
    },
    {
        "id": "c1addddb71e7f28a",
        "type": "inject",
        "z": "ec5948ee92a007a8",
        "name": "Accumulator",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "12390954dbbcd328"
            ]
        ]
    },
    {
        "id": "12390954dbbcd328",
        "type": "function",
        "z": "ec5948ee92a007a8",
        "name": "AccumulatorRequest 24hr",
        "func": "//var hour = new Date().getHours();\n//if (hour === 0) {\n    for (var r = 0; r < 7; r++) {\n            msg.topic = \"MONICON-PLC/CMD/AccumulatorRequest/\";\n            msg.payload = String(r);\n            node.send(msg);\n       \n    }\n    // for (var c = 0; c < 7; c++) {\n    //         msg.topic = \"MONICON-PLC/CMD/AccumulatorClear/\";\n    //         msg.payload = String(c);\n    //         node.send(msg);\n       \n    // }\n//}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 100,
        "wires": [
            [
                "f73e60ae5cb9023e"
            ]
        ]
    },
    {
        "id": "b9f41a6d557f036a",
        "type": "mqtt in",
        "z": "ec5948ee92a007a8",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorOne/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 240,
        "y": 240,
        "wires": [
            [
                "f54935426e1c4484"
            ]
        ]
    },
    {
        "id": "0059aaa786546d8d",
        "type": "mqtt in",
        "z": "ec5948ee92a007a8",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorTwo/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 240,
        "y": 280,
        "wires": [
            [
                "f54935426e1c4484"
            ]
        ]
    },
    {
        "id": "0ff812565d118fb3",
        "type": "mqtt in",
        "z": "ec5948ee92a007a8",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorThree/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 240,
        "y": 320,
        "wires": [
            [
                "f54935426e1c4484"
            ]
        ]
    },
    {
        "id": "8fdeef123b9e3119",
        "type": "mqtt in",
        "z": "ec5948ee92a007a8",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorFour/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 240,
        "y": 360,
        "wires": [
            [
                "f54935426e1c4484"
            ]
        ]
    },
    {
        "id": "7c0283ad921e1de1",
        "type": "mqtt in",
        "z": "ec5948ee92a007a8",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorFive/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 240,
        "y": 400,
        "wires": [
            [
                "f54935426e1c4484"
            ]
        ]
    },
    {
        "id": "9587d75a716c9bba",
        "type": "mqtt in",
        "z": "ec5948ee92a007a8",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorSix/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 250,
        "y": 440,
        "wires": [
            [
                "f54935426e1c4484"
            ]
        ]
    },
    {
        "id": "bfbeaf6643e12f72",
        "type": "mqtt in",
        "z": "ec5948ee92a007a8",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorSeven/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 240,
        "y": 480,
        "wires": [
            [
                "f54935426e1c4484"
            ]
        ]
    },
    {
        "id": "f73e60ae5cb9023e",
        "type": "mqtt out",
        "z": "ec5948ee92a007a8",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 830,
        "y": 100,
        "wires": []
    },
    {
        "id": "f54935426e1c4484",
        "type": "link out",
        "z": "ec5948ee92a007a8",
        "name": "Accumulators",
        "links": [
            "c7e24ecbbb6c7369"
        ],
        "x": 795,
        "y": 240,
        "wires": []
    },
    {
        "id": "52f2b06e28064258",
        "type": "inject",
        "z": "06dea7ae138dea9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "Server_Heartbeat",
        "payload": "*",
        "payloadType": "str",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "1c6853b840465d62",
                "e6dee90eb9a62edb"
            ]
        ]
    },
    {
        "id": "1c6853b840465d62",
        "type": "trigger",
        "z": "06dea7ae138dea9a",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0.250",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 600,
        "y": 180,
        "wires": [
            [
                "f86b5b3fbf08228f",
                "fa75ba76830dd4a8"
            ]
        ]
    },
    {
        "id": "f86b5b3fbf08228f",
        "type": "rpi-gpio out",
        "z": "06dea7ae138dea9a",
        "name": "Heartbeat Server - GPIO18",
        "pin": "18",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1040,
        "y": 180,
        "wires": []
    },
    {
        "id": "b4950953d1b4c698",
        "type": "mqtt in",
        "z": "06dea7ae138dea9a",
        "name": "",
        "topic": "MONICON-PLC/CMD/Heartbeat/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 180,
        "y": 300,
        "wires": [
            [
                "a65aa4f16e96d615"
            ]
        ]
    },
    {
        "id": "f7d89d5748c5a3a3",
        "type": "trigger",
        "z": "06dea7ae138dea9a",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "2.5",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 590,
        "y": 300,
        "wires": [
            [
                "c02a69228b9d4b7c"
            ]
        ]
    },
    {
        "id": "4bf303c3b3ae0f7f",
        "type": "comment",
        "z": "06dea7ae138dea9a",
        "name": "Watchdog Timer Supervisor - Server Heartbeat",
        "info": "",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "bd0e1d9b5184d92b",
        "type": "comment",
        "z": "06dea7ae138dea9a",
        "name": "Watchdog Timer Supervisor - Server Heartbeat",
        "info": "",
        "x": 220,
        "y": 260,
        "wires": []
    },
    {
        "id": "68bb2851a7f1fea0",
        "type": "function",
        "z": "06dea7ae138dea9a",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tSystem: \"Heartbeat\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[0]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "a20e9d00398c743d"
            ]
        ]
    },
    {
        "id": "184110ae8e46aaaa",
        "type": "function",
        "z": "06dea7ae138dea9a",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"OS\",\n\n        fields: {\n\t\t\t[topic[0]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            System: \"Heartbeat\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "e1cba44245d870d3"
            ]
        ]
    },
    {
        "id": "e1cba44245d870d3",
        "type": "link out",
        "z": "06dea7ae138dea9a",
        "name": "",
        "links": [
            "9621ef347f99598b"
        ],
        "x": 1135,
        "y": 240,
        "wires": []
    },
    {
        "id": "a20e9d00398c743d",
        "type": "link out",
        "z": "06dea7ae138dea9a",
        "name": "",
        "links": [
            "f45ee5a9d828f33f"
        ],
        "x": 1135,
        "y": 300,
        "wires": []
    },
    {
        "id": "77f8b49ad3f763c0",
        "type": "comment",
        "z": "06dea7ae138dea9a",
        "name": "Database | Local",
        "info": "",
        "x": 1240,
        "y": 240,
        "wires": []
    },
    {
        "id": "98d36193ec5d5d24",
        "type": "comment",
        "z": "06dea7ae138dea9a",
        "name": "Database | Remote",
        "info": "",
        "x": 1250,
        "y": 300,
        "wires": []
    },
    {
        "id": "c02a69228b9d4b7c",
        "type": "function",
        "z": "06dea7ae138dea9a",
        "name": "Formatting",
        "func": "msg.topic = \"PLC_Heartbeat\";\nflow.set(\"PLC_Heartbeat\", \"1\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 300,
        "wires": [
            [
                "184110ae8e46aaaa",
                "68bb2851a7f1fea0"
            ]
        ]
    },
    {
        "id": "fa75ba76830dd4a8",
        "type": "function",
        "z": "06dea7ae138dea9a",
        "name": "Formatting",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 240,
        "wires": [
            [
                "68bb2851a7f1fea0",
                "184110ae8e46aaaa"
            ]
        ]
    },
    {
        "id": "a65aa4f16e96d615",
        "type": "function",
        "z": "06dea7ae138dea9a",
        "name": "MoniconPLC-1",
        "func": "if(msg.payload == \"MoniconPLC-1\") {\n    return msg;\n} else {\n    return;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 300,
        "wires": [
            [
                "f7d89d5748c5a3a3"
            ]
        ]
    },
    {
        "id": "609915092fbe5971",
        "type": "trigger",
        "z": "06dea7ae138dea9a",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0.250",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 780,
        "y": 80,
        "wires": [
            [
                "f86b5b3fbf08228f"
            ]
        ]
    },
    {
        "id": "e6dee90eb9a62edb",
        "type": "delay",
        "z": "06dea7ae138dea9a",
        "name": "",
        "pauseType": "delay",
        "timeout": "750",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 590,
        "y": 140,
        "wires": [
            [
                "609915092fbe5971"
            ]
        ]
    },
    {
        "id": "f12cdf0e68915998",
        "type": "rpi-gpio out",
        "z": "06dea7ae138dea9a",
        "name": "Heartbeat Server - GPIO18",
        "pin": "18",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1240,
        "y": 560,
        "wires": []
    },
    {
        "id": "f13eafaeb8305e9d",
        "type": "trigger",
        "z": "06dea7ae138dea9a",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "10",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 560,
        "wires": [
            [
                "f12cdf0e68915998",
                "f06d9ecbddd26f6f",
                "acb6c641a809bc16"
            ]
        ]
    },
    {
        "id": "188d81a13fd420df",
        "type": "rpi-gpio in",
        "z": "06dea7ae138dea9a",
        "name": "Safe Shutdown - Panel Button GPIO16",
        "pin": "16",
        "intype": "up",
        "debounce": "25",
        "read": false,
        "bcm": true,
        "x": 190,
        "y": 640,
        "wires": [
            [
                "b86b161a9e935cf3",
                "b94dcc8cfde02228"
            ]
        ]
    },
    {
        "id": "b86b161a9e935cf3",
        "type": "delay",
        "z": "06dea7ae138dea9a",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 640,
        "y": 560,
        "wires": [
            [
                "f13eafaeb8305e9d"
            ]
        ]
    },
    {
        "id": "c58acd9b28906a9e",
        "type": "function",
        "z": "06dea7ae138dea9a",
        "name": "Reset",
        "func": "msg.reset = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 560,
        "wires": [
            [
                "b86b161a9e935cf3"
            ]
        ]
    },
    {
        "id": "23dea8d7904b6f4a",
        "type": "delay",
        "z": "06dea7ae138dea9a",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 280,
        "y": 560,
        "wires": [
            [
                "c58acd9b28906a9e"
            ]
        ]
    },
    {
        "id": "b94dcc8cfde02228",
        "type": "function",
        "z": "06dea7ae138dea9a",
        "name": "Reset",
        "func": "if (msg.payload === 0) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "23dea8d7904b6f4a"
            ]
        ]
    },
    {
        "id": "e201d898faf565d1",
        "type": "exec",
        "z": "06dea7ae138dea9a",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Shutdown Pi",
        "x": 1190,
        "y": 640,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "f06d9ecbddd26f6f",
        "type": "delay",
        "z": "06dea7ae138dea9a",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 1020,
        "y": 640,
        "wires": [
            [
                "e201d898faf565d1"
            ]
        ]
    },
    {
        "id": "16a3341e9c08f425",
        "type": "link out",
        "z": "06dea7ae138dea9a",
        "name": "Reset",
        "links": [
            "5538bb69e8b4a51c"
        ],
        "x": 1135,
        "y": 500,
        "wires": []
    },
    {
        "id": "acb6c641a809bc16",
        "type": "function",
        "z": "06dea7ae138dea9a",
        "name": "Reset",
        "func": "msg.reset = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 500,
        "wires": [
            [
                "16a3341e9c08f425"
            ]
        ]
    },
    {
        "id": "5538bb69e8b4a51c",
        "type": "link in",
        "z": "06dea7ae138dea9a",
        "name": "",
        "links": [
            "16a3341e9c08f425"
        ],
        "x": 255,
        "y": 80,
        "wires": [
            [
                "e6dee90eb9a62edb",
                "1c6853b840465d62",
                "609915092fbe5971"
            ]
        ]
    },
    {
        "id": "af9a611292b084b6",
        "type": "comment",
        "z": "06dea7ae138dea9a",
        "name": "Reset",
        "info": "",
        "x": 170,
        "y": 80,
        "wires": []
    },
    {
        "id": "4fc4f841e1d1478c",
        "type": "comment",
        "z": "06dea7ae138dea9a",
        "name": "Reset",
        "info": "",
        "x": 1210,
        "y": 500,
        "wires": []
    },
    {
        "id": "02a4444762ecb45f",
        "type": "rpi-gpio out",
        "z": "06dea7ae138dea9a",
        "name": "Fan - GPIO12",
        "pin": "12",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 1200,
        "y": 780,
        "wires": []
    },
    {
        "id": "5a41d0510313921d",
        "type": "comment",
        "z": "06dea7ae138dea9a",
        "name": "Fan Temperature Control - OS Output",
        "info": "",
        "x": 190,
        "y": 740,
        "wires": []
    },
    {
        "id": "c049b51024e24a9d",
        "type": "link in",
        "z": "06dea7ae138dea9a",
        "name": "Fan Controller",
        "links": [
            "0d23a6ebcb9cc84a"
        ],
        "x": 55,
        "y": 780,
        "wires": [
            [
                "e4f9deaeb75188b3"
            ]
        ]
    },
    {
        "id": "e4f9deaeb75188b3",
        "type": "function",
        "z": "06dea7ae138dea9a",
        "name": "Temperature Threshold",
        "func": "// Check Temperature Thresholds\nif (msg.payload > 55) {\n    msg.payload = 1;\n    return msg;\n} else if (msg.payload < 50) {\n    msg.payload = 0; \n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 780,
        "wires": [
            [
                "02a4444762ecb45f"
            ]
        ]
    },
    {
        "id": "6192c17fde59f37f",
        "type": "rpi-gpio out",
        "z": "06dea7ae138dea9a",
        "name": "SIXFAB HAT POWER PIN - GPIO26",
        "pin": "26",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "bcm": true,
        "x": 770,
        "y": 960,
        "wires": []
    },
    {
        "id": "f734fbddf96df25d",
        "type": "http request",
        "z": "06dea7ae138dea9a",
        "name": "Internet Check",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://gogle.com",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 280,
        "y": 900,
        "wires": [
            [
                "5d1d582c1a086e58"
            ]
        ]
    },
    {
        "id": "d0c28ad7dcb1aad7",
        "type": "inject",
        "z": "06dea7ae138dea9a",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 110,
        "y": 900,
        "wires": [
            [
                "f734fbddf96df25d"
            ]
        ]
    },
    {
        "id": "5d1d582c1a086e58",
        "type": "function",
        "z": "06dea7ae138dea9a",
        "name": "Reset SIXFAB HAT",
        "func": "if(msg.statusCode != 200) {\n    msg.payload = 1;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 900,
        "wires": [
            [
                "6192c17fde59f37f",
                "28d72e29463a5f3e"
            ]
        ]
    },
    {
        "id": "d6faa6d2d2767044",
        "type": "exec",
        "z": "06dea7ae138dea9a",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Reboot",
        "x": 1180,
        "y": 900,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "659f3d353058d86d",
        "type": "comment",
        "z": "06dea7ae138dea9a",
        "name": "Check Internet Connection every Hour",
        "info": "",
        "x": 190,
        "y": 860,
        "wires": []
    },
    {
        "id": "28d72e29463a5f3e",
        "type": "delay",
        "z": "06dea7ae138dea9a",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 680,
        "y": 900,
        "wires": [
            [
                "a961615bc45d1fe4"
            ]
        ]
    },
    {
        "id": "a961615bc45d1fe4",
        "type": "exec",
        "z": "06dea7ae138dea9a",
        "command": "echo '1-1' |sudo tee /sys/bus/usb/drivers/usb/unbind",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Unbind",
        "x": 860,
        "y": 900,
        "wires": [
            [
                "2b8e6e19d8ac2ef7"
            ],
            [],
            []
        ]
    },
    {
        "id": "2b8e6e19d8ac2ef7",
        "type": "exec",
        "z": "06dea7ae138dea9a",
        "command": "echo '1-1' |sudo tee /sys/bus/usb/drivers/usb/bind",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Bind",
        "x": 1010,
        "y": 900,
        "wires": [
            [
                "d6faa6d2d2767044"
            ],
            [],
            []
        ]
    },
    {
        "id": "df1f038947f5fd89",
        "type": "comment",
        "z": "06dea7ae138dea9a",
        "name": "Safe Shutdown - Button Input",
        "info": "",
        "x": 160,
        "y": 380,
        "wires": []
    },
    {
        "id": "b00bd5e250f2e9df",
        "type": "inject",
        "z": "06dea7ae138dea9a",
        "name": "Check Heartbeat else Reboot",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 190,
        "y": 420,
        "wires": [
            [
                "49a22c7e6a46af9b"
            ]
        ]
    },
    {
        "id": "49a22c7e6a46af9b",
        "type": "function",
        "z": "06dea7ae138dea9a",
        "name": "Formatting",
        "func": "var HB = flow.get(\"PLC_Heartbeat\");\nif (HB === \"1\") {\n    flow.set(\"PLC_Heartbeat\", \"0\");\n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 770,
        "y": 420,
        "wires": [
            [
                "b047ce99d3df9ce2"
            ]
        ]
    },
    {
        "id": "b047ce99d3df9ce2",
        "type": "exec",
        "z": "06dea7ae138dea9a",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Shutdown Pi",
        "x": 1190,
        "y": 420,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "676bde83c877178d",
        "type": "function",
        "z": "a52664f9dd7d4400",
        "name": "Check Timers",
        "func": "/////////////// Splict message into an array ///////////////\n//var data = msg.payload.split(\",\");\n//data[0] = id\n//data[1] = sw\n//data[2] = type\n//data[3] = index\n//data[4] = action\n//data[5] = milliseconds(onTime)\n//data[6] = milliseconds(offTime)\n//data[7] = repeat\n//data[8] = enable\n//data[9] = RoomName/SwitchName\n\nvar digitalOutputID = 0;\n\nvar timerArray = flow.get(\"timers\") || null;\n\nif(timerArray === null) {\n    return;\n}\n\nif (Object.keys(timerArray).length === 0 ) {\n    return;\n}\n\n\nvar currentTime = new Date().getTime();\n\n/////////////// Action Manifold ///////////////\nfor (let [key, value] of Object.entries(timerArray.id)) {\n    let serial = key;\n    \n    //msg.payload = key;\n    //node.send(msg);\n    \n    for (let [key, value] of Object.entries(timerArray.id[serial].index)) {\n\n        actionSelection(value, serial);\n        \n        // msg.payload = value;\n        // node.send(msg);\n    }\n}\n\nfunction actionSelection(value, serial) {\n    if (value.action == \"On\" ) {\n    } \n    else if (value.action == \"Off\") {\n    }\n    else if (value.action == \"ON/OFF\" ) {\n        timerList(value, serial);\n    }\n}\n\nfunction timerList(value, serial) {\n    \n    if(value.type == \"LightPro\") {\n        if(value.sw == \"sw0\") {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial;\n            digitalOutputID = 0;\n        } \n        else if (value.sw == \"sw1\") {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial; \n            digitalOutputID = 1;\n        } else {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial;\n            digitalOutputID = 2;\n        }\n    } else {\n        msg.topic = \"sess/MONICON-PLC/CMD/RELAY/\" + serial;\n    }\n\n    if (value.on.trig == \"1\" && checkTime(value.on.time)) {\n        if (value.repeat == \"1\") {\n            value.on.trig = \"1\";\n            value.on.time = DateCalculator(value.on.time); // Add 60 seconds\n            value.on.seconds = String(new Date(value.on.time).getTime());\n            msg.date = value.on.time;\n        } else {\n            value.on.trig = \"0\";\n        }\n        msg.id = value.id;\n        msg.name = value.name;\n        msg.payload = String(digitalOutputID) + \",\" + 1;\n        \n        flow.set(\"timers\", timerArray);\n        node.send(msg);\n    } \n    if (value.off.trig == \"1\" && checkTime(value.off.time)) {\n        if (value.repeat == \"1\") {\n            value.off.trig = \"1\";\n            value.off.time = DateCalculator(value.off.time); // Add 60 seconds\n            value.off.seconds = String(new Date(value.off.time).getTime());\n            msg.date = value.off.time;\n        } else {\n            value.off.trig = \"0\";\n        }\n        msg.id = value.id;\n        msg.name = value.name;\n        msg.payload = String(digitalOutputID) + \",\" + 0;\n\n        flow.set(\"timers\", timerArray);\n        node.send(msg);\n    } \n}\n\nfunction DateCalculator(time) {\n    //msg.payload = time\n    //return msg\n    var thisTime = new Date(time);\n    \n    thisTime.setHours(thisTime.getHours());\n    thisTime.setMinutes(thisTime.getMinutes());\n    thisTime.setSeconds(0);\n\n    //thisTime.setDate(new Date().getDate() + 1);\n    thisTime.setDate(new Date().getDate())\n    thisTime.setMonth(new Date().getMonth());\n    thisTime.setFullYear(new Date().getFullYear());\n    \n    var milliSeconds = thisTime.getTime() + 86400000;\n    \n    thisTime = new Date(milliSeconds);\n    \n    return thisTime;\n}\n\nfunction checkTime(time) {\n    if (new Date(time).getTime() < new Date().getTime()) {\n        return true\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 120,
        "wires": [
            [
                "55ea174ee0e4bb2c"
            ]
        ]
    },
    {
        "id": "6f075593c37a48aa",
        "type": "inject",
        "z": "a52664f9dd7d4400",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "676bde83c877178d"
            ]
        ]
    },
    {
        "id": "435840bd1a55763f",
        "type": "comment",
        "z": "a52664f9dd7d4400",
        "name": "Check Existing Alarms",
        "info": "",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "957d8a39dcb0d62d",
        "type": "function",
        "z": "a52664f9dd7d4400",
        "name": "Create",
        "func": "/////////////// Splict message into an array ///////////////\nvar data = msg.payload.split(\",\");\n// var data = [];\n// data[0] = \"9020802\"                     //id\n// data[1] = \"sw1\"                         //sw\n// data[2] = \"LightPro\"                    //type\n// data[3] = \"0\"                           //index\n// data[4] = \"On/Off\"                      //action\n// data[5] = \"2020/04/16 19:30\"            //milliseconds(onTime)\n// data[6] = \"2020/04/16 19:32\"            //milliseconds(offTime)\n// data[7] = \"1\"                           //repeat\n// data[8] = \"1\"                           //enable\n// data[9] = \"Master Bedroom/Light\"        //RoomName/SwitchName\n\nlet t1 = new Date(new Date(parseInt(data[5])));\nlet t2 = new Date(new Date(parseInt(data[6])));\n\n// let t1 = new Date(new Date().getTime() + 300000);\n// let t2 = new Date(new Date().getTime() + 30000);\n\nvar timer = flow.get(\"timers.id[\\\"\" + data[0] + \"\\\"].index[\\\"\" + data[3] + \"\\\"]\") || { id: data[0], sw: data[1], type: data[2], index: data[3], action: data[4], on:{trig:data[8], time: t1, seconds: data[6] }, off:{trig:data[8], time: t2, seconds: data[5] }, repeat: data[7], state: data[8], name: data[9] } ; \n\ntimer = { id: data[0], sw: data[1], type: data[2], index: data[3], action: data[4], on:{trig:data[8], time: t1, seconds: data[5] }, off:{trig:data[8], time: t2, seconds: data[6] }, repeat: data[7], state: data[8], name: data[9] } ; \n\nflow.set(\"timers.id[\\\"\" + data[0] + \"\\\"].index[\\\"\" + data[3] + \"\\\"]\", timer);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "f5381c4f157369c0",
        "type": "function",
        "z": "a52664f9dd7d4400",
        "name": "Delete",
        "func": "/////////////// Splict message into an array ///////////////\nvar data = msg.payload.split(\",\");\nlet id = String(data[0])\nlet sw = data[1]\nlet index = String(data[2])\n\n/////////////// Get Timers ///////////////\nvar timer = flow.get(\"timers\") ;\n\n/////////////// Get Timer Object ///////////////\ndelete timer.id[id].index[index]\n",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "d9f94765f5860b48",
        "type": "function",
        "z": "a52664f9dd7d4400",
        "name": "",
        "func": "/////////////// Get Timers ///////////////\nvar timer = flow.get(\"timers\") ;\n\n/////////////// Get Timer Object ///////////////\nvar obj = timer.id[msg.payload];\nmsg.topic = \"sess/MONICON-PLC/STAT/GetTimers/\" + msg.payload;\n\n/////////////// If Object doesn't exist, send empty object ///////////////\n// if(obj === undefined) {\n//     msg = {payload: {  }, topic: msg.topic};\n//     msg.topic = \"\"\n//     return ;\n// }\n// /////////////// Send Timer Object ///////////////\n// else {\n    var msg1 = { payload: obj, topic: msg.topic };\n\n    return msg1;\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 840,
        "y": 300,
        "wires": [
            [
                "458954c35b0f7958"
            ]
        ]
    },
    {
        "id": "b96d15ebe347e8c3",
        "type": "mqtt in",
        "z": "a52664f9dd7d4400",
        "name": "",
        "topic": "MONICON-PLC/CMD/setTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 150,
        "y": 180,
        "wires": [
            [
                "ac930775dac04cfd"
            ]
        ]
    },
    {
        "id": "55ea174ee0e4bb2c",
        "type": "function",
        "z": "a52664f9dd7d4400",
        "name": "Return Timers",
        "func": "var cmd = msg.payload.split(\",\");\nif(cmd[1] === \"1\" || cmd[1] === \"0\") {\n    // Update iOS device timer list\nvar msg1 = { payload: msg.id, topic: \"sess/MONICON-PLC/CMD/GetTimers/\" };\n    // Send Notification to user\nvar msg2 = { payload: msg.id + \",MONICON,\" + msg.name + \",\" + msg.payload, topic: \"sess/MONICON-PLC/STAT/Timers/Alert/\" };\n    // Send Command to Monicon device\nvar msg3 = { payload: msg.payload, topic: msg.topic };\n\nreturn [msg1, msg2, msg3]\n\n}\n\nreturn",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 120,
        "wires": [
            [
                "ba83d8b1617ff00a"
            ],
            [
                "ba83d8b1617ff00a"
            ],
            [
                "ba83d8b1617ff00a"
            ]
        ]
    },
    {
        "id": "eac8955d9115f1af",
        "type": "mqtt in",
        "z": "a52664f9dd7d4400",
        "name": "",
        "topic": "MONICON-PLC/CMD/DeleteTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 160,
        "y": 240,
        "wires": [
            [
                "710249fa1c431edc"
            ]
        ]
    },
    {
        "id": "031fdc5dd7389c0e",
        "type": "mqtt in",
        "z": "a52664f9dd7d4400",
        "name": "",
        "topic": "MONICON-PLC/CMD/GetTimers/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "inputs": 0,
        "x": 170,
        "y": 300,
        "wires": [
            [
                "16af2b1e6146e8f9"
            ]
        ]
    },
    {
        "id": "20788a8b1076de57",
        "type": "delay",
        "z": "a52664f9dd7d4400",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "outputs": 1,
        "x": 660,
        "y": 300,
        "wires": [
            [
                "d9f94765f5860b48"
            ]
        ]
    },
    {
        "id": "458954c35b0f7958",
        "type": "json",
        "z": "a52664f9dd7d4400",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 970,
        "y": 300,
        "wires": [
            [
                "ba83d8b1617ff00a"
            ]
        ]
    },
    {
        "id": "ba83d8b1617ff00a",
        "type": "link out",
        "z": "a52664f9dd7d4400",
        "name": "",
        "links": [
            "1c9b883da5d3a8be"
        ],
        "x": 1135,
        "y": 120,
        "wires": []
    },
    {
        "id": "16af2b1e6146e8f9",
        "type": "function",
        "z": "a52664f9dd7d4400",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "20788a8b1076de57"
            ]
        ]
    },
    {
        "id": "710249fa1c431edc",
        "type": "function",
        "z": "a52664f9dd7d4400",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 240,
        "wires": [
            [
                "f5381c4f157369c0"
            ]
        ]
    },
    {
        "id": "ac930775dac04cfd",
        "type": "function",
        "z": "a52664f9dd7d4400",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 180,
        "wires": [
            [
                "957d8a39dcb0d62d"
            ]
        ]
    },
    {
        "id": "e16199613d31c5a6",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_Fault_On_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Fault_On_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 80,
        "wires": [
            [
                "d316f604b6378e03"
            ]
        ]
    },
    {
        "id": "b7e180f980728a10",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "Input_Pressure_Jacket_rl",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Input_Pressure_Jacket_rl;datatype=INT",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 860,
        "wires": [
            [
                "bb8f1cca31786607"
            ]
        ]
    },
    {
        "id": "ec1ff7543ca1936e",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "Input_GEN_Level_rl",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Input_GEN_Level_rl;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 920,
        "wires": [
            [
                "bb8f1cca31786607"
            ]
        ]
    },
    {
        "id": "3279d4a36fef9fa7",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_Cyc_Abort_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Cyc_Abort_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 120,
        "wires": [
            [
                "d316f604b6378e03"
            ]
        ]
    },
    {
        "id": "7f3ac1246e1ff211",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_Cyc_ON_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Cyc_ON_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 160,
        "wires": [
            [
                "d316f604b6378e03"
            ]
        ]
    },
    {
        "id": "7ca8aebe53769208",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_Low_Steam_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Low_Steam_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 200,
        "wires": [
            [
                "d316f604b6378e03"
            ]
        ]
    },
    {
        "id": "f50949432611c11e",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_Low_Air_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Low_Air_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 310,
        "y": 240,
        "wires": [
            [
                "d316f604b6378e03"
            ]
        ]
    },
    {
        "id": "c8d1e722c6f57fcd",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_Low_Water_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Low_Water_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 280,
        "wires": [
            [
                "d316f604b6378e03"
            ]
        ]
    },
    {
        "id": "4f4e1c083e43515c",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_Low_Gask_Press_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Low_Gask_Press_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 320,
        "wires": [
            [
                "d316f604b6378e03"
            ]
        ]
    },
    {
        "id": "eb74277cdfc0815b",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_Low_Steri_Temp_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Low_Steri_Temp_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 460,
        "wires": [
            [
                "28d42b9635fd3285"
            ]
        ]
    },
    {
        "id": "e878b57e0519560a",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_Over_Temp_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Over_Temp_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 500,
        "wires": [
            [
                "28d42b9635fd3285"
            ]
        ]
    },
    {
        "id": "c1bda2a945d7cab2",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_Power_Interrupt_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Power_Interrupt_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 540,
        "wires": [
            [
                "28d42b9635fd3285"
            ]
        ]
    },
    {
        "id": "422bc2edc9909c09",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_Generator_Fault_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Generator_Fault_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 580,
        "wires": [
            [
                "28d42b9635fd3285"
            ]
        ]
    },
    {
        "id": "bc252c069d5b35cb",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_Door_Fault_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Door_Fault_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 620,
        "wires": [
            [
                "28d42b9635fd3285"
            ]
        ]
    },
    {
        "id": "35d10400fed6b26c",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_SteamCharge_TO_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_SteamCharge_TO_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 660,
        "wires": [
            [
                "28d42b9635fd3285"
            ]
        ]
    },
    {
        "id": "05db9f2328ffb565",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_Pulsing_TO_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Pulsing_TO_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 700,
        "wires": [
            [
                "28d42b9635fd3285"
            ]
        ]
    },
    {
        "id": "9c32819927d9240b",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "BMS_Excessive_Leak_DO_bool",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=BMS_Excessive_Leak_DO_bool;datatype=Boolean",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 740,
        "wires": [
            [
                "28d42b9635fd3285"
            ]
        ]
    },
    {
        "id": "fc1f499686d32517",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "Temp_Water_Flow_rl",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Temp_Water_Flow_rl;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 980,
        "wires": [
            [
                "bb8f1cca31786607"
            ]
        ]
    },
    {
        "id": "86024d65ea68749a",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "Input_Water_Flow_Temp_raw_rl",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Input_Water_Flow_Temp_raw_rl;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 280,
        "y": 1040,
        "wires": [
            [
                "bb8f1cca31786607"
            ]
        ]
    },
    {
        "id": "a5a99d8eaad12498",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "Temp_Vac_Pump_Work_rl",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Temp_Vac_Pump_Work_rl;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1100,
        "wires": [
            [
                "bb8f1cca31786607"
            ]
        ]
    },
    {
        "id": "4dab296186a8abb3",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "Press_Generator_Work_rl",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Press_Generator_Work_rl;datatype=Int16",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 1160,
        "wires": [
            [
                "bb8f1cca31786607"
            ]
        ]
    },
    {
        "id": "ddc9b5e3899b48d0",
        "type": "inject",
        "z": "8b6df10d77edfd01",
        "name": "Temp_Drain_Work_rl",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "ns=4;s=Temp_Drain_Work_rl;datatype=REAL",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 1220,
        "wires": [
            [
                "bb8f1cca31786607"
            ]
        ]
    },
    {
        "id": "21e5d30a397a808f",
        "type": "function",
        "z": "8b6df10d77edfd01",
        "name": "Remote Database",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet topic = msg.topic\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: String(\"MoniconPLC-1\")\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic]: msg.payload\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 220,
        "wires": [
            [
                "f4466b441851b590"
            ]
        ]
    },
    {
        "id": "28d42b9635fd3285",
        "type": "OpcUa-Client",
        "z": "8b6df10d77edfd01",
        "endpoint": "b5ca804a171a5d4a",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 580,
        "y": 600,
        "wires": [
            [
                "aa7ed6ae423ea6f4"
            ]
        ]
    },
    {
        "id": "bb8f1cca31786607",
        "type": "OpcUa-Client",
        "z": "8b6df10d77edfd01",
        "endpoint": "b5ca804a171a5d4a",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 580,
        "y": 1040,
        "wires": [
            [
                "c8a5f85a31c0075d"
            ]
        ]
    },
    {
        "id": "d316f604b6378e03",
        "type": "OpcUa-Client",
        "z": "8b6df10d77edfd01",
        "endpoint": "b5ca804a171a5d4a",
        "action": "read",
        "deadbandtype": "a",
        "deadbandvalue": 1,
        "time": 10,
        "timeUnit": "s",
        "certificate": "n",
        "localfile": "",
        "localkeyfile": "",
        "securitymode": "None",
        "securitypolicy": "None",
        "folderName4PKI": "",
        "name": "",
        "x": 560,
        "y": 220,
        "wires": [
            [
                "21e5d30a397a808f"
            ]
        ]
    },
    {
        "id": "bdefb7415534e0c9",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "8b6df10d77edfd01",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 1090,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "2c459778995d48d1",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "8b6df10d77edfd01",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 1090,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "f4466b441851b590",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "8b6df10d77edfd01",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 1090,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "aa7ed6ae423ea6f4",
        "type": "function",
        "z": "8b6df10d77edfd01",
        "name": "Remote Database",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet topic = msg.topic\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: String(\"MoniconPLC-1\")\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic]: msg.payload\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 600,
        "wires": [
            [
                "2c459778995d48d1"
            ]
        ]
    },
    {
        "id": "c8a5f85a31c0075d",
        "type": "function",
        "z": "8b6df10d77edfd01",
        "name": "Remote Database",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet topic = msg.topic\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: String(\"MoniconPLC-1\")\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic]: msg.payload\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 1040,
        "wires": [
            [
                "bdefb7415534e0c9"
            ]
        ]
    }
]