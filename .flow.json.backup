[
    {
        "id": "ae5e2d49.68e0c",
        "type": "tab",
        "label": "Digitals",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ce1b30ab.c2319",
        "type": "tab",
        "label": "Analog Alarms",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6fe84e1f.eadf8",
        "type": "tab",
        "label": "Analog Scale",
        "disabled": false,
        "info": ""
    },
    {
        "id": "7887b7b3.70ac08",
        "type": "tab",
        "label": "Control Panel",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e7563fe0.8c458",
        "type": "tab",
        "label": "DB Connections",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d5b77494.f7aea8",
        "type": "tab",
        "label": "OS",
        "disabled": false,
        "info": ""
    },
    {
        "id": "35eb0e0e.decd62",
        "type": "tab",
        "label": "System",
        "disabled": false,
        "info": ""
    },
    {
        "id": "fca1ea39.ff1f18",
        "type": "tab",
        "label": "Firmware",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d365aa34.8aef88",
        "type": "tab",
        "label": "Remote",
        "disabled": false,
        "info": ""
    },
    {
        "id": "70a1e52.9588f1c",
        "type": "tab",
        "label": "Accumulators",
        "disabled": false,
        "info": ""
    },
    {
        "id": "ece5ea71.278258",
        "type": "tab",
        "label": "IO Control",
        "disabled": false,
        "info": ""
    },
    {
        "id": "e0f0fa16.5e06f8",
        "type": "tab",
        "label": "Timers",
        "disabled": false,
        "info": ""
    },
    {
        "id": "d85313a8.b3b8e",
        "type": "tab",
        "label": "Modbus",
        "disabled": false,
        "info": ""
    },
    {
        "id": "a27eb0d8.3c2fa",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8886",
        "protocol": "http",
        "database": "monicon_sess",
        "name": "",
        "usetls": false,
        "tls": ""
    },
    {
        "id": "cb1b82bc.a26ae",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "",
        "host": "us-central1-1.gcp.cloud2.influxdata.com",
        "port": "443",
        "tls": true
    },
    {
        "id": "4da4ea34.630684",
        "type": "influxdb",
        "hostname": "localhost",
        "port": "8086",
        "protocol": "http",
        "database": "monicon_sess",
        "name": "",
        "usetls": false,
        "tls": ""
    },
    {
        "id": "da535876.280af8",
        "type": "Stackhero-InfluxDB-v2-Server",
        "name": "",
        "host": "us-central1-1.gcp.cloud2.influxdata.com",
        "port": "443",
        "tls": true
    },
    {
        "id": "4d64fa3d.ad0334",
        "type": "mqtt-broker",
        "name": "",
        "broker": "driver.cloudmqtt.com",
        "port": "18748",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "7e73cdd4.e0b814",
        "type": "tls-config",
        "name": "local-tls",
        "cert": "",
        "key": "",
        "ca": "",
        "certname": "",
        "keyname": "",
        "caname": "",
        "servername": "https://us-central1-1.gcp.cloud2.influxdata.com",
        "verifyservercert": true
    },
    {
        "id": "5fca9504.17508c",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1e88062a.770d7a",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "45a7d85a.401588",
        "type": "ui_tab",
        "name": "Control Panel",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "da91f024.78ee3",
        "type": "ui_tab",
        "name": "IO Measurements",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "d8647c59.12493",
        "type": "ui_tab",
        "name": "Alarms",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1c5e7bce.dafe64",
        "type": "ui_tab",
        "name": "Parameters",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "1140bc77.403c34",
        "type": "ui_tab",
        "name": "Alarm Config",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "87e78a20.98ffc8",
        "type": "ui_tab",
        "name": "Control Panel",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "e30c5524.3b03b8",
        "type": "ui_tab",
        "name": "IO Measurements",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c287c0e5.10e9b",
        "type": "ui_tab",
        "name": "Alarms",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "5e5f0080.da32c",
        "type": "ui_tab",
        "name": "Parameters",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "2543fd32.5de642",
        "type": "ui_tab",
        "name": "Alarm Config",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f63880d3.c40ef",
        "type": "ui_tab",
        "name": "Config",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "83bb7073.89674",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 6,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "4fe51183.62334",
        "type": "ui_group",
        "name": "Equipment Identification",
        "tab": "45a7d85a.401588",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5d3de38b.30602c",
        "type": "ui_group",
        "name": "Scale Factor (k)",
        "tab": "45a7d85a.401588",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ea8e7f4c.f8bcc",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "45a7d85a.401588",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "22362b2b.e9a1e4",
        "type": "ui_group",
        "name": "Digital Inputs",
        "tab": "da91f024.78ee3",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "682affd.438e7",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "da91f024.78ee3",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8f5898a7.07fa48",
        "type": "ui_group",
        "name": "4..20mA Signals - 20sec Updates",
        "tab": "da91f024.78ee3",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "bf96246c.d919c8",
        "type": "ui_group",
        "name": "PT100 Signals - 20sec Updates",
        "tab": "da91f024.78ee3",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2753fe30.136152",
        "type": "ui_group",
        "name": "Digital Outputs",
        "tab": "da91f024.78ee3",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d342ae97.3b2ec",
        "type": "ui_group",
        "name": "Thresholds",
        "tab": "45a7d85a.401588",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "18b9ac28.263ce4",
        "type": "ui_group",
        "name": "4n20mA HIGH Alarms",
        "tab": "d8647c59.12493",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "25e1adcb.525a02",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "d8647c59.12493",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "bbe1e6e.c044218",
        "type": "ui_group",
        "name": "4n20mA LOW Alarms",
        "tab": "d8647c59.12493",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "a0ab591e.494fc8",
        "type": "ui_group",
        "name": "PT100 LOW Alarms",
        "tab": "d8647c59.12493",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5a0ef1e2.ddb77",
        "type": "ui_group",
        "name": "PT100 HIGH Alarms",
        "tab": "d8647c59.12493",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c9c66b1f.63bdc8",
        "type": "ui_group",
        "name": "4n20mA - LOW Parameter",
        "tab": "1c5e7bce.dafe64",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d41c1003.34b84",
        "type": "ui_group",
        "name": "4n20mA - HIGH Parameter",
        "tab": "1c5e7bce.dafe64",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "64e82ef2.ffce3",
        "type": "ui_group",
        "name": "PT100 - LOW Parameter",
        "tab": "1c5e7bce.dafe64",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d6b5f6cc.ac6ab8",
        "type": "ui_group",
        "name": "PT100 - HIGH Parameter",
        "tab": "1c5e7bce.dafe64",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "4952bdf6.d526e4",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "1c5e7bce.dafe64",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "2e9493b.19b276c",
        "type": "ui_group",
        "name": "Device Info",
        "tab": "45a7d85a.401588",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "e3d48d50.fae3f",
        "type": "ui_group",
        "name": "System Info",
        "tab": "45a7d85a.401588",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1f86c7fe.575f98",
        "type": "ui_group",
        "name": "PT100 - LOW Active Alarm",
        "tab": "1140bc77.403c34",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1053e3d8.f35acc",
        "type": "ui_group",
        "name": "PT100 - HIGH Active Alarm",
        "tab": "1140bc77.403c34",
        "order": 9,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9cc24926.921388",
        "type": "ui_group",
        "name": "4n20 - LOW Active Alarm",
        "tab": "1140bc77.403c34",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1c35732b.c16ddd",
        "type": "ui_group",
        "name": "4n20 - HIGH Active Alarm",
        "tab": "1140bc77.403c34",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "97964936.2f6b58",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "1140bc77.403c34",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "5c1e3a03.f96f14",
        "type": "ui_group",
        "name": "Equipment Identification",
        "tab": "87e78a20.98ffc8",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "17102250.63705e",
        "type": "ui_group",
        "name": "Scale Factor (k)",
        "tab": "87e78a20.98ffc8",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6fb0f864.ab50a8",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "87e78a20.98ffc8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1eb39dcf.402d42",
        "type": "ui_group",
        "name": "Digital Inputs",
        "tab": "e30c5524.3b03b8",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3ccf8783.a39388",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "e30c5524.3b03b8",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "c272663b.a14478",
        "type": "ui_group",
        "name": "4..20mA Signals - 20sec Updates",
        "tab": "e30c5524.3b03b8",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "72834d19.0b2444",
        "type": "ui_group",
        "name": "PT100 Signals - 20sec Updates",
        "tab": "e30c5524.3b03b8",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7c778399.916a2c",
        "type": "ui_group",
        "name": "Digital Outputs",
        "tab": "e30c5524.3b03b8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "cc99a385.0e3b2",
        "type": "ui_group",
        "name": "Thresholds",
        "tab": "87e78a20.98ffc8",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "b237d978.a14268",
        "type": "ui_group",
        "name": "4n20mA HIGH Alarms",
        "tab": "c287c0e5.10e9b",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ddf1255a.a41838",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "c287c0e5.10e9b",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d2b9ab7b.2c0768",
        "type": "ui_group",
        "name": "4n20mA LOW Alarms",
        "tab": "c287c0e5.10e9b",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "6d37b4c5.91432c",
        "type": "ui_group",
        "name": "PT100 LOW Alarms",
        "tab": "c287c0e5.10e9b",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "7374f39a.81f2fc",
        "type": "ui_group",
        "name": "PT100 HIGH Alarms",
        "tab": "c287c0e5.10e9b",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "100a187b.33f1a8",
        "type": "ui_group",
        "name": "4n20mA - LOW Parameter",
        "tab": "5e5f0080.da32c",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3f923ce4.4e7424",
        "type": "ui_group",
        "name": "4n20mA - HIGH Parameter",
        "tab": "5e5f0080.da32c",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "61e2dc9d.93fca4",
        "type": "ui_group",
        "name": "PT100 - LOW Parameter",
        "tab": "5e5f0080.da32c",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "ac436fe4.bafe",
        "type": "ui_group",
        "name": "PT100 - HIGH Parameter",
        "tab": "5e5f0080.da32c",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "21a017d8.e1e498",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "5e5f0080.da32c",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "50eaefba.c2b8",
        "type": "ui_group",
        "name": "Device Info",
        "tab": "87e78a20.98ffc8",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "1865bad3.468e45",
        "type": "ui_group",
        "name": "System Info",
        "tab": "87e78a20.98ffc8",
        "order": 3,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f3836776.24a948",
        "type": "ui_group",
        "name": "PT100 - LOW Active Alarm",
        "tab": "2543fd32.5de642",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "f848f227.646ba",
        "type": "ui_group",
        "name": "PT100 - HIGH Active Alarm",
        "tab": "2543fd32.5de642",
        "order": 9,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "3680207b.60e1c",
        "type": "ui_group",
        "name": "4n20 - LOW Active Alarm",
        "tab": "2543fd32.5de642",
        "order": 6,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "8b02168c.0a4558",
        "type": "ui_group",
        "name": "4n20 - HIGH Active Alarm",
        "tab": "2543fd32.5de642",
        "order": 7,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "9e65150.45f55e8",
        "type": "ui_group",
        "name": "Device Locator",
        "tab": "2543fd32.5de642",
        "order": 5,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "d3e0d058.2c0df",
        "type": "ui_group",
        "name": "G1",
        "tab": "f63880d3.c40ef",
        "order": 1,
        "disp": true,
        "width": "3",
        "collapse": false
    },
    {
        "id": "4c053cda.6a4c04",
        "type": "ui_group",
        "name": "G1",
        "tab": "83bb7073.89674",
        "order": 1,
        "disp": true,
        "width": "3",
        "collapse": false
    },
    {
        "id": "dba358e0.ff7ca8",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "1da4179f.06e888",
        "type": "mqtt-broker",
        "name": "Stand-Alone.sys",
        "broker": "tailor.cloudmqtt.com",
        "port": "10287",
        "clientid": "",
        "usetls": false,
        "compatmode": false,
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "willTopic": "",
        "willQos": "0",
        "willPayload": ""
    },
    {
        "id": "d508e07e.f4bc",
        "type": "modbus-client",
        "name": "LOCAL MODBUS SERVER",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "tcpHost": "192.168.1.222",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true
    },
    {
        "id": "1b9bb20b.d5467e",
        "type": "influxdb",
        "hostname": "127.0.0.1",
        "port": "8086",
        "protocol": "http",
        "database": "database",
        "name": "",
        "usetls": false,
        "tls": "7e73cdd4.e0b814"
    },
    {
        "id": "64d73774.9390e8",
        "type": "inject",
        "z": "e7563fe0.8c458",
        "name": "Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 80,
        "wires": [
            [
                "c7962292.80849"
            ]
        ]
    },
    {
        "id": "2368e8b9.253c08",
        "type": "inject",
        "z": "e7563fe0.8c458",
        "name": "Trigger",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 300,
        "wires": [
            [
                "1fec9ac2.998825"
            ]
        ]
    },
    {
        "id": "64de8047.5e1a3",
        "type": "comment",
        "z": "e7563fe0.8c458",
        "name": "RESET DATABASES",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "5ca57a36.c9bc94",
        "type": "comment",
        "z": "e7563fe0.8c458",
        "name": "CREATES DATABASES",
        "info": "",
        "x": 130,
        "y": 260,
        "wires": []
    },
    {
        "id": "59afd2c4.4eb95c",
        "type": "comment",
        "z": "e7563fe0.8c458",
        "name": "PT100 Analog Signals",
        "info": "",
        "x": 120,
        "y": 500,
        "wires": []
    },
    {
        "id": "5e58c02.d86734",
        "type": "function",
        "z": "e7563fe0.8c458",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n/*\noutput[0] = AI-0 // PT100\noutput[1] = AI-1 // PT100\noutput[2] = AI-2 // PT100\noutput[3] = AI-3 // PT100\noutput[4] = AI-4 // 4..20mA\noutput[5] = AI-5 // 4..20mA\noutput[6] = AI-6 // 4..20mA\noutput[7] = AI-7 // 4..20mA \noutput[8] = Device ID\noutput[9] = Location \n*/\n\n// Lighting\n//if (output.length > 4) {\n//    if (output[3].includes(\"Light\")) {\n//        output[4] = output[4].replace(/\\s+/g, '_')\n//        output[4] = output[4].concat(\".Lt\")\n//\t} else if (output[3].includes(\"Power\")) {\n//\t\toutput[4] = output[4].replace(/\\s+/g, '_')\n//\t\toutput[4] = output[4].concat(\".Pwr\")\n//\t}\n//}\n\n//output[1] = (output[1] / 1000).toFixed(2);\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: output[9]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t_4n20_7: parseFloat(output[0]),\n\t\t\t\t_4n20_6: parseFloat(output[1]),\n\t\t\t\t_4n20_5: parseFloat(output[2]),\n\t\t\t\t_4n20_4: parseFloat(output[3]),\n\t\t\t\t_4n20_3: parseFloat(output[4]),\n\t\t\t\t_4n20_2: parseFloat(output[5]),\n\t\t\t\t_4n20_1: parseFloat(output[6]),\n\t\t\t\t_4n20_0: parseFloat(output[7]),\n\t\t\t\tTRUC_VERSION: \"\\\"\" + output[8] + \"\\\"\",\n\t\t\t\tdatabaseID: \"\\\"\" + output[9] + \"\\\"\"\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 460,
        "wires": [
            [
                "e5332dfe.c3465"
            ]
        ]
    },
    {
        "id": "56d6aa15.e2df34",
        "type": "function",
        "z": "e7563fe0.8c458",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t_4n20_7: parseFloat(output[0]),\n\t\t\t_4n20_6: parseFloat(output[1]),\n\t\t\t_4n20_5: parseFloat(output[2]),\n\t\t\t_4n20_4: parseFloat(output[3]),\n\t\t\t_4n20_3: parseFloat(output[4]),\n\t\t\t_4n20_2: parseFloat(output[5]),\n\t\t\t_4n20_1: parseFloat(output[6]),\n\t\t\t_4n20_0: parseFloat(output[7]),\n\t\t\t_ID: output[8],\n\t\t\tdatabaseID: output[9]\n\t\t},\n\t\t\n        tags:{\n            PLC: output[9] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 420,
        "wires": [
            [
                "b8a63d98.ba90f"
            ]
        ]
    },
    {
        "id": "6e89807c.06964",
        "type": "mqtt in",
        "z": "d5b77494.f7aea8",
        "name": "",
        "topic": "MONICON/CMD/OS/",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "x": 140,
        "y": 160,
        "wires": [
            [
                "c4dbff5e.7e952",
                "5851728c.81b63c",
                "fe7e1c6.70e80e",
                "2ec991a8.9bffae",
                "33ab00b1.eba83",
                "3375ee25.83a7c2"
            ]
        ]
    },
    {
        "id": "d43945d8.f8adb8",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "IP Addr",
        "func": "var data = msg.payload.networkInterfaces.wlan0[0].address\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/IP\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 320,
        "wires": [
            [
                "1abf4f43.4b1281",
                "fe07ca43.55a868"
            ]
        ]
    },
    {
        "id": "6fb4bfaa.989a",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Uptime",
        "func": "var data = msg.payload.uptime\n\nlet days = parseInt(data / 86400)\nlet hours = parseInt((data % 86400) / 3600)\nlet minutes = parseInt(((data % 86400) % 3600) / 60)\nlet secs = parseInt(((data % 86400) % 3600) % 60)\n\nlet msg1 = {payload: \"Days[\" + days + \"] Hours[\" + hours + \"] Mins[\" + minutes + \"] Sec[\" + secs + \"]\", topic: \"MONICON/STAT/OS/UPTIME\"}\n\nreturn msg1\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 360,
        "wires": [
            [
                "1abf4f43.4b1281",
                "c1abeb58.94f278"
            ]
        ]
    },
    {
        "id": "1abf4f43.4b1281",
        "type": "mqtt out",
        "z": "d5b77494.f7aea8",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 870,
        "y": 60,
        "wires": []
    },
    {
        "id": "14e736c4.c51219",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Model",
        "func": "var data = msg.payload.cpus[0].model\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/MODEL\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 280,
        "wires": [
            [
                "1abf4f43.4b1281",
                "9a70fefd.191be"
            ]
        ]
    },
    {
        "id": "3de261c.08d339e",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Disk Size (GB)",
        "func": "var data = msg.payload[0]\n\nvar diskSize = String((data.size / 1000000).toFixed(2)) + \",\" + String((data.used / 1000000).toFixed(2)) + \",\" + String((data.available / 1000000).toFixed(2)) + \",\" + String((data.capacity * 100).toFixed(0))\n\nvar msg1 = { payload: diskSize, topic: \"MONICON/STAT/OS/DISK\" }\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 200,
        "wires": [
            [
                "1abf4f43.4b1281",
                "a1f7c9dd.dd4db8"
            ]
        ]
    },
    {
        "id": "4c966ab8.124d74",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "RAM (MB)",
        "func": "var data = msg.payload\n\nvar ramSize = String((data.totalmem / 1000000).toFixed(2)) + \",\" + String((data.freemem / 1000000).toFixed(2)) + \",\" + String(parseFloat(data.memusage).toFixed(0))\n\nvar msg1 = { payload: ramSize, topic: \"MONICON/STAT/OS/RAM\" }\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 120,
        "wires": [
            [
                "1abf4f43.4b1281",
                "52cd6085.86bb1"
            ]
        ]
    },
    {
        "id": "a1f7c9dd.dd4db8",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar output = msg.payload.split(\",\");\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\n        \n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            TotalMem: parseFloat(output[0]),\n            UsedMem: parseFloat(output[1]),\n            FreeMem: parseFloat(output[2]),\n            PercentMem: parseFloat(output[3])\n        },\n        tags:{\n            System: \"HDD\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"HDD\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTotalMem: parseFloat(output[0]),\n                UsedMem: parseFloat(output[1]),\n                FreeMem: parseFloat(output[2]),\n                PercentMem: parseFloat(output[3])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 200,
        "wires": [
            [
                "ad4ac9ab.eadc88"
            ],
            [
                "9a038e99.ed9ba"
            ]
        ]
    },
    {
        "id": "45de8352.38cebc",
        "type": "inject",
        "z": "d5b77494.f7aea8",
        "name": "30sec Cycle",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "30",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 140,
        "y": 40,
        "wires": [
            [
                "bdac9192.4c3c7"
            ]
        ]
    },
    {
        "id": "9a70fefd.191be",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    //msg.payload = msg.payload.replace(/\\s+/g, '_')\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Model: msg.payload\n        },\n        tags:{\n            System: \"Model\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Model\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tModel: \"\\\"\" + msg.payload[0].fields.Model + \"\\\"\"\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 280,
        "wires": [
            [
                "8fd3e33c.936cf"
            ],
            [
                "25bd3a1a.9c8846"
            ]
        ]
    },
    {
        "id": "fe07ca43.55a868",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            IPAddr: msg.payload\n        },\n        tags:{\n            System: \"IP\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"IP\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tIPAddr: \"\\\"\" + msg.payload[0].fields.IPAddr + \"\\\"\"\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 320,
        "wires": [
            [
                "8fd3e33c.936cf"
            ],
            [
                "25bd3a1a.9c8846"
            ]
        ]
    },
    {
        "id": "c1abeb58.94f278",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet deploys = global.get(\"deploys\") || 0;\n\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Uptime: msg.payload,\n            Deploys: parseFloat(deploys)\n        },\n        tags:{\n            System: \"UPTIME\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n    let uptime = String(msg.payload[0].fields.Uptime);\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"UPTIME\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tUptime: uptime,\n\t\t\t\tDeploys: parseFloat(deploys)\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 360,
        "wires": [
            [
                "8fd3e33c.936cf"
            ],
            [
                "25bd3a1a.9c8846"
            ]
        ]
    },
    {
        "id": "d10a4781.c24f08",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Hostname: msg.payload,\n        },\n        tags:{\n            System: \"Hostname\",\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Hostname\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tHostname: \"\\\"\" + String(msg.payload[0].fields.Hostname) + \"\\\"\",\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 240,
        "wires": [
            [
                "8fd3e33c.936cf"
            ],
            [
                "25bd3a1a.9c8846"
            ]
        ]
    },
    {
        "id": "52cd6085.86bb1",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar output = msg.payload.split(\",\");\n\n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            TotalRam: parseFloat(output[0]),\n            FreeRam: parseFloat(output[1]),\n            PercentRam: parseFloat(output[2])\n        },\n        tags:{\n            System: \"RAM\"\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"RAM\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTotalRam: parseFloat(output[0]),\n                FreeRam: parseFloat(output[1]),\n                PercentRam: parseFloat(output[2])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 120,
        "wires": [
            [
                "ad4ac9ab.eadc88"
            ],
            [
                "9a038e99.ed9ba"
            ]
        ]
    },
    {
        "id": "f28f9ee2.9f608",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Hostname",
        "func": "var data = msg.payload.hostname\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/Hostname\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "x": 570,
        "y": 240,
        "wires": [
            [
                "d10a4781.c24f08"
            ]
        ]
    },
    {
        "id": "108a7f62.8117b1",
        "type": "exec",
        "z": "35eb0e0e.decd62",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 810,
        "y": 300,
        "wires": [
            [],
            [
                "37783af7.712fd6"
            ],
            []
        ]
    },
    {
        "id": "6ec3171a.1e4c18",
        "type": "inject",
        "z": "35eb0e0e.decd62",
        "name": "48hr Interval",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "172800",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 120,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "f8e72e4.7ebccd",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Temperature",
        "func": "var data = msg.payload\nmsg1 = { payload: data, topic: \"MONICON/STAT/OS/Temperature\" };\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 400,
        "wires": [
            [
                "15e96eea.328df1",
                "1abf4f43.4b1281",
                "4df6766.7dbdc88"
            ]
        ]
    },
    {
        "id": "15e96eea.328df1",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"  \n    msg.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            Temperature: msg.payload,\n        },\n        tags:{\n            System: \"Temperature\",\n        }\n    }];\n    \nvar msg1 = {};\n\nstructureObject();\n\nreturn [[msg], [msg1]];\n        \nfunction structureObject() {\n\tmsg1.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"Temperature\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tTemperature: parseFloat(msg.payload[0].fields.Temperature),\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 870,
        "y": 400,
        "wires": [
            [
                "a68fef67.18802"
            ],
            [
                "d819a2b6.7e531"
            ]
        ]
    },
    {
        "id": "e5332dfe.c3465",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "e7563fe0.8c458",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "428bc965.615878",
        "type": "influxdb out",
        "z": "e7563fe0.8c458",
        "influxdb": "4da4ea34.630684",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 1010,
        "y": 80,
        "wires": []
    },
    {
        "id": "36145524.23b08a",
        "type": "influxdb out",
        "z": "e7563fe0.8c458",
        "influxdb": "4da4ea34.630684",
        "name": "",
        "measurement": "",
        "precision": "",
        "retentionPolicy": "",
        "x": 990,
        "y": 300,
        "wires": []
    },
    {
        "id": "b8a63d98.ba90f",
        "type": "influxdb batch",
        "z": "e7563fe0.8c458",
        "influxdb": "4da4ea34.630684",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 420,
        "wires": []
    },
    {
        "id": "c7962292.80849",
        "type": "influxdb in",
        "z": "e7563fe0.8c458",
        "influxdb": "4da4ea34.630684",
        "name": "monicon.sess",
        "query": "DROP DATABASE monicon_sess",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 760,
        "y": 80,
        "wires": [
            [
                "428bc965.615878"
            ]
        ]
    },
    {
        "id": "1fec9ac2.998825",
        "type": "influxdb in",
        "z": "e7563fe0.8c458",
        "influxdb": "4da4ea34.630684",
        "name": "monicon.sess",
        "query": "CREATE DATABASE monicon_sess",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 740,
        "y": 300,
        "wires": [
            [
                "36145524.23b08a"
            ]
        ]
    },
    {
        "id": "f2cb6a55.70b108",
        "type": "string",
        "z": "e7563fe0.8c458",
        "name": "Sectionaliser ",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "ProPower-ESP/Device/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 290,
        "y": 420,
        "wires": [
            [
                "5e58c02.d86734",
                "56d6aa15.e2df34"
            ]
        ]
    },
    {
        "id": "fe7e1c6.70e80e",
        "type": "OS",
        "z": "d5b77494.f7aea8",
        "name": "",
        "x": 370,
        "y": 240,
        "wires": [
            [
                "f28f9ee2.9f608"
            ]
        ]
    },
    {
        "id": "2ec991a8.9bffae",
        "type": "Drives",
        "z": "d5b77494.f7aea8",
        "name": "",
        "x": 370,
        "y": 200,
        "wires": [
            [
                "3de261c.08d339e"
            ]
        ]
    },
    {
        "id": "3375ee25.83a7c2",
        "type": "Uptime",
        "z": "d5b77494.f7aea8",
        "name": "",
        "x": 380,
        "y": 360,
        "wires": [
            [
                "6fb4bfaa.989a"
            ]
        ]
    },
    {
        "id": "5851728c.81b63c",
        "type": "CPUs",
        "z": "d5b77494.f7aea8",
        "name": "",
        "x": 370,
        "y": 280,
        "wires": [
            [
                "14e736c4.c51219"
            ]
        ]
    },
    {
        "id": "33ab00b1.eba83",
        "type": "Memory",
        "z": "d5b77494.f7aea8",
        "name": "",
        "x": 380,
        "y": 120,
        "wires": [
            [
                "4c966ab8.124d74"
            ]
        ]
    },
    {
        "id": "c4dbff5e.7e952",
        "type": "NetworkIntf",
        "z": "d5b77494.f7aea8",
        "name": "",
        "x": 390,
        "y": 320,
        "wires": [
            [
                "d43945d8.f8adb8"
            ]
        ]
    },
    {
        "id": "7323f309.33cadc",
        "type": "cpu",
        "z": "d5b77494.f7aea8",
        "name": "",
        "msgCore": false,
        "msgOverall": false,
        "msgArray": false,
        "msgTemp": true,
        "x": 390,
        "y": 400,
        "wires": [
            [
                "f8e72e4.7ebccd"
            ]
        ]
    },
    {
        "id": "6146cbae.1bf164",
        "type": "comment",
        "z": "e7563fe0.8c458",
        "name": "4n20 Analog Signals",
        "info": "",
        "x": 110,
        "y": 380,
        "wires": []
    },
    {
        "id": "3795204c.a88e6",
        "type": "function",
        "z": "e7563fe0.8c458",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\n/*\noutput[0] = AI-0 // PT100\noutput[1] = AI-1 // PT100\noutput[2] = AI-2 // PT100\noutput[3] = AI-3 // PT100\noutput[4] = AI-4 // 4..20mA\noutput[5] = AI-5 // 4..20mA\noutput[6] = AI-6 // 4..20mA\noutput[7] = AI-7 // 4..20mA \noutput[8] = Device ID\noutput[9] = Location \n*/\n\n// Lighting\n//if (output.length > 4) {\n//    if (output[3].includes(\"Light\")) {\n//        output[4] = output[4].replace(/\\s+/g, '_')\n//        output[4] = output[4].concat(\".Lt\")\n//\t} else if (output[3].includes(\"Power\")) {\n//\t\toutput[4] = output[4].replace(/\\s+/g, '_')\n//\t\toutput[4] = output[4].concat(\".Pwr\")\n//\t}\n//}\n\n//output[1] = (output[1] / 1000).toFixed(2);\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Analogs: msg.topic,\n\t\t\t\tdatabaseID: output[9]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t_PT100_7: parseFloat(output[0]),\n\t\t\t\t_PT100_6: parseFloat(output[1]),\n\t\t\t\t_PT100_5: parseFloat(output[2]),\n\t\t\t\t_PT100_4: parseFloat(output[3]),\n\t\t\t\t_PT100_3: parseFloat(output[4]),\n\t\t\t\t_PT100_2: parseFloat(output[5]),\n\t\t\t\t_PT100_1: parseFloat(output[6]),\n\t\t\t\t_PT100_0: parseFloat(output[7]),\n\t\t\t\tTRUC_VERSION: \"\\\"\" + output[8] + \"\\\"\",\n\t\t\t\tdatabaseID: \"\\\"\" + output[9] + \"\\\"\"\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 580,
        "wires": [
            [
                "e0a0f6f1.c485b8"
            ]
        ]
    },
    {
        "id": "afe709f2.b9abd8",
        "type": "function",
        "z": "e7563fe0.8c458",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n//output[0] = Voltage\n//output[1] = Current\n//output[2] = Kilowatts\n//output[3] = type\n//output[4] = Room Name\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t_PT100_7: parseFloat(output[0]),\n\t\t\t_PT100_6: parseFloat(output[1]),\n\t\t\t_PT100_5: parseFloat(output[2]),\n\t\t\t_PT100_4: parseFloat(output[3]),\n\t\t\t_PT100_3: parseFloat(output[4]),\n\t\t\t_PT100_2: parseFloat(output[5]),\n\t\t\t_PT100_1: parseFloat(output[6]),\n\t\t\t_PT100_0: parseFloat(output[7]),\n\t\t\t_ID: output[8],\n\t\t\tdatabaseID: output[9]\n\t\t},\n        tags:{\n            PLC: output[9] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 540,
        "wires": [
            [
                "784a7a6e.a2fb64"
            ]
        ]
    },
    {
        "id": "e0a0f6f1.c485b8",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "e7563fe0.8c458",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "784a7a6e.a2fb64",
        "type": "influxdb batch",
        "z": "e7563fe0.8c458",
        "influxdb": "4da4ea34.630684",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 540,
        "wires": []
    },
    {
        "id": "b87c327.ce7fdd",
        "type": "string",
        "z": "e7563fe0.8c458",
        "name": "Sectionaliser ",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "ProPower-ESP/Device/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 290,
        "y": 540,
        "wires": [
            [
                "3795204c.a88e6",
                "afe709f2.b9abd8"
            ]
        ]
    },
    {
        "id": "19ce72d4.ee167d",
        "type": "exec",
        "z": "d5b77494.f7aea8",
        "command": "iw dev | grep -m1 ssid | awk '{print $2}'",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "SSID",
        "x": 370,
        "y": 540,
        "wires": [
            [
                "c43d26a4.2f9de8"
            ],
            [],
            []
        ]
    },
    {
        "id": "8c0af33c.fa8ce",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Scale",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar msg1 = {};\n\n    msg1.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            SSID: msg.payload,\n            SiteID: siteID\n        },\n        tags:{\n            System: \"SSID\",\n        }\n    }];\n    \nvar msg2 = {};\n\nstructureObject();\n\nreturn [[msg1], [msg2]];\n        \nfunction structureObject() {\n\tmsg2.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"SSID\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tSSID: \"\\\"\" + msg.payload + \"\\\"\",\n\t\t\t\tSiteID: \"\\\"\" + siteID + \"\\\"\",\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 520,
        "wires": [
            [
                "a68fef67.18802"
            ],
            [
                "d819a2b6.7e531"
            ]
        ]
    },
    {
        "id": "c43d26a4.2f9de8",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "SSID",
        "func": "var data = String(msg.payload.replace(/[\\n\\r]+/g, ' ').replace(/\\s{2,}/g,' ').replace(/^\\s+|\\s+$/,'') )\nmsg.payload = data\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 520,
        "wires": [
            [
                "8c0af33c.fa8ce"
            ]
        ]
    },
    {
        "id": "7be2de68.2e7cc",
        "type": "mqtt in",
        "z": "6fe84e1f.eadf8",
        "name": "",
        "topic": "MONICON-PLC/Device/AI_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 80,
        "wires": [
            [
                "ee9681a8.58cc7",
                "ab627a30.c76808"
            ]
        ]
    },
    {
        "id": "4157f3fd.cf519c",
        "type": "mqtt in",
        "z": "6fe84e1f.eadf8",
        "name": "",
        "topic": "MONICON-PLC/Device/AI_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 160,
        "wires": [
            [
                "6649b393.aae27c",
                "ab627a30.c76808"
            ]
        ]
    },
    {
        "id": "ee9681a8.58cc7",
        "type": "link out",
        "z": "6fe84e1f.eadf8",
        "name": "L-OUT-AI_4n20",
        "links": [
            "311cc9da.295866",
            "3e649a44.6ae766",
            "8a11b406.1372d8",
            "fb825d88.14935",
            "e4b05cb6.755b4",
            "61980d7c.a4f6f4",
            "88c2d23c.6ec84"
        ],
        "x": 655,
        "y": 80,
        "wires": []
    },
    {
        "id": "6649b393.aae27c",
        "type": "link out",
        "z": "6fe84e1f.eadf8",
        "name": "L-OUT-AI_PT100",
        "links": [
            "d40653c7.effc4",
            "4cd13541.c5b87c",
            "86a52f8.d751fd",
            "809e3c8c.14b8c",
            "88c2d23c.6ec84"
        ],
        "x": 655,
        "y": 160,
        "wires": []
    },
    {
        "id": "8a11b406.1372d8",
        "type": "link in",
        "z": "e7563fe0.8c458",
        "name": "",
        "links": [
            "ee9681a8.58cc7"
        ],
        "x": 35,
        "y": 420,
        "wires": [
            [
                "f2cb6a55.70b108"
            ]
        ]
    },
    {
        "id": "4cd13541.c5b87c",
        "type": "link in",
        "z": "e7563fe0.8c458",
        "name": "",
        "links": [
            "6649b393.aae27c"
        ],
        "x": 35,
        "y": 540,
        "wires": [
            [
                "b87c327.ce7fdd"
            ]
        ]
    },
    {
        "id": "389f8ffd.863c",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_00/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "nl": false,
        "rap": false,
        "x": 190,
        "y": 80,
        "wires": [
            [
                "63f1a6e9.9e0408",
                "47057744.907408",
                "82c0b22.c56385"
            ]
        ]
    },
    {
        "id": "d1b4fd4c.2346b",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_01/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 140,
        "wires": [
            [
                "63f1a6e9.9e0408",
                "47057744.907408",
                "82c0b22.c56385"
            ]
        ]
    },
    {
        "id": "e8610c02.abb31",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_02/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "63f1a6e9.9e0408",
                "47057744.907408",
                "82c0b22.c56385"
            ]
        ]
    },
    {
        "id": "e1701db1.6a703",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_03/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 260,
        "wires": [
            [
                "63f1a6e9.9e0408",
                "47057744.907408",
                "82c0b22.c56385"
            ]
        ]
    },
    {
        "id": "2cd5ac4c.5c9ce4",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_04/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 320,
        "wires": [
            [
                "63f1a6e9.9e0408",
                "47057744.907408",
                "82c0b22.c56385"
            ]
        ]
    },
    {
        "id": "4b3ca30d.e7abac",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_05/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 380,
        "wires": [
            [
                "63f1a6e9.9e0408",
                "47057744.907408",
                "82c0b22.c56385"
            ]
        ]
    },
    {
        "id": "a9444d9d.b19e2",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputs/DI_06/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 440,
        "wires": [
            [
                "63f1a6e9.9e0408",
                "47057744.907408",
                "82c0b22.c56385"
            ]
        ]
    },
    {
        "id": "bf8272bc.3658",
        "type": "comment",
        "z": "ae5e2d49.68e0c",
        "name": "Digital Input - Request",
        "info": "",
        "x": 120,
        "y": 40,
        "wires": []
    },
    {
        "id": "42f83ca9.391944",
        "type": "comment",
        "z": "7887b7b3.70ac08",
        "name": "Send Email Notification",
        "info": "",
        "x": 140,
        "y": 40,
        "wires": []
    },
    {
        "id": "52cc3d60.194f84",
        "type": "mqtt in",
        "z": "ce1b30ab.c2319",
        "name": "",
        "topic": "MONICON-PLC/Device/4n20_Flags/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 200,
        "wires": [
            [
                "542e65c4.fd9d1c",
                "6641fec4.054da"
            ]
        ]
    },
    {
        "id": "9c5b3519.421e88",
        "type": "mqtt in",
        "z": "ce1b30ab.c2319",
        "name": "",
        "topic": "MONICON-PLC/Device/PT100_Flags/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "753c5189.839ca",
                "6641fec4.054da"
            ]
        ]
    },
    {
        "id": "e8e9724d.13515",
        "type": "comment",
        "z": "ce1b30ab.c2319",
        "name": "Analog Alarms 1st <8x PT100 LOW Alarms> | 2nd <8x PT100 HIGH Alarms>",
        "info": "",
        "x": 290,
        "y": 40,
        "wires": []
    },
    {
        "id": "ec753f31.a20ec",
        "type": "mqtt in",
        "z": "ce1b30ab.c2319",
        "name": "",
        "topic": "MONICON-PLC/Device/Alarm_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 420,
        "wires": [
            [
                "1799b4e0.7bb7bb"
            ]
        ]
    },
    {
        "id": "ca0db59d.59e768",
        "type": "mqtt in",
        "z": "ce1b30ab.c2319",
        "name": "",
        "topic": "MONICON-PLC/Device/Alarm_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 340,
        "wires": [
            [
                "d3739f64.e7d71"
            ]
        ]
    },
    {
        "id": "ab23bf1b.0b29b",
        "type": "comment",
        "z": "ce1b30ab.c2319",
        "name": "4n20mA Low Alarm - Rising Edge Trigger | <AI-ID> | <Limit-Type> | <Equip-Name>",
        "info": "",
        "x": 310,
        "y": 300,
        "wires": []
    },
    {
        "id": "d3739f64.e7d71",
        "type": "link out",
        "z": "ce1b30ab.c2319",
        "name": "L-ALM-PT100",
        "links": [
            "e06f8049.2b238"
        ],
        "x": 475,
        "y": 340,
        "wires": []
    },
    {
        "id": "1799b4e0.7bb7bb",
        "type": "link out",
        "z": "ce1b30ab.c2319",
        "name": "L-ALM-4n20",
        "links": [
            "727aeff7.558a4"
        ],
        "x": 475,
        "y": 420,
        "wires": []
    },
    {
        "id": "e06f8049.2b238",
        "type": "link in",
        "z": "7887b7b3.70ac08",
        "name": "",
        "links": [
            "d3739f64.e7d71"
        ],
        "x": 75,
        "y": 120,
        "wires": [
            [
                "c33a8a95.984c38"
            ]
        ]
    },
    {
        "id": "72f34b0a.971564",
        "type": "comment",
        "z": "7887b7b3.70ac08",
        "name": "Alarm PT100",
        "info": "",
        "x": 110,
        "y": 80,
        "wires": []
    },
    {
        "id": "fbede2d2.e6d3a",
        "type": "comment",
        "z": "7887b7b3.70ac08",
        "name": "Alarm 4n20",
        "info": "",
        "x": 110,
        "y": 180,
        "wires": []
    },
    {
        "id": "727aeff7.558a4",
        "type": "link in",
        "z": "7887b7b3.70ac08",
        "name": "",
        "links": [
            "1799b4e0.7bb7bb"
        ],
        "x": 75,
        "y": 240,
        "wires": [
            [
                "3c15c606.2ae56a"
            ]
        ]
    },
    {
        "id": "c33a8a95.984c38",
        "type": "function",
        "z": "7887b7b3.70ac08",
        "name": "Email Setup - PT100 Alarms",
        "func": "/*\ndata[0] = PIN_ID\ndata[1] = Alarm Status\ndata[2] = PV\ndata[3] = Threshold Parameter\ndata[4] = Equipment ID\ndata[5] = Software Version\n\ntopic[0] = PLC_ID\ntopic[1] = CMD\ntopic[2] = Subject\ntopic[3] = Serial_ID\n*/\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nlet subjectMSg_PT100 = global.get(\"subjectMSg_PT100\") || \"null\";                    //String\nlet bodyMSg_PT100 = global.get(\"bodyMSg_PT100\") || \"null\";                          //String\nlet addrTo_PT100 = global.get(\"addrTo_PT100\") || \"monicon.sess@gmail.com\";                            //String\nlet addrCc_PT100 = global.get(\"addrCc_PT100\") || \"\";                            //Strng\nlet addrBcc_PT100 = global.get(\"addrBcc_PT100\") || \"\";                          //String\nlet subjectParameters_PT100 = global.get(\"subjectParameters_PT100\") || \"null\";      //String of bools\nlet bodyParameters_PT100 = global.get(\"bodyParameters_PT100\") || \"null\";            //String of bools\n\n// Data splitting\nvar data = msg.payload.split(',')\nvar topic = msg.topic.split('/')\nlet subPara = subjectParameters_PT100.split('=');\nlet bodyPara = bodyParameters_PT100.split('=');\n\n// Subject Concatenation\nvar subject = subjectMSg_PT100;\nsubject += subPara[5] == \"1\" ? \" | Sensor Type - PT100 Alm\" : \"\";\nsubject += subPara[4] == \"1\" ? \" | Alarm Status - \" + data[1] : \"\";\nsubject += subPara[1] == \"1\" ? \" | Analog No. - \" + data[0] : \"\";\nsubject += subPara[2] == \"1\" ? \" | Site ID - \" + siteID : \"\";\nsubject += subPara[3] == \"1\" ? \" | Equipment ID - \" + data[4] : \"\";\nsubject += subPara[0] == \"1\" ? \" | Date & Time - \" + Date().toString() : \"\";\n\n// Subject Concatenation\nvar body = bodyMSg_PT100 + \"\\n\";\nbody += bodyPara[0] == \"1\" ? \"\\nDate & Time -\\t \" + Date().toString() : \"\";\nbody += bodyPara[5] == \"1\" ? \"\\nSensor Type -\\t PT100 Alm\" : \"\";\nbody += bodyPara[4] == \"1\" ? \"\\nAlarm Status -\\t \" + data[1] : \"\";\nbody += bodyPara[1] == \"1\" ? \"\\nAnalog No. -\\t \" + data[0] : \"\";\nbody += bodyPara[2] == \"1\" ? \"\\nSite ID -\\t \" + siteID : \"\";\nbody += bodyPara[3] == \"1\" ? \"\\nEquipment ID -\\t \" + data[4] : \"\";\nbody += bodyPara[9] == \"1\" ? \"\\nProcess Value -\\t \" + data[2] : \"\";\nbody += bodyPara[6] == \"1\" ? \"\\nThreshold Parameter -\\t \" + data[3] : \"\";\nbody += bodyPara[7] == \"1\" ? \"\\nSerial No. -\\t \" + topic[3] : \"\";\nbody += bodyPara[8] == \"1\" ? \"\\nSoftware Version -\\t \" + data[5] : \"\";\n\n// New Email Message\nmsg = {\n    payload: body,\n    topic: subject,\n    to: addrTo_PT100,\n    cc: addrCc_PT100,\n    bcc: addrBcc_PT100\n}\n\n// Old Email Message\n// msg = {\n//     payload : \"PT100 Alarm has been triggered.\\n\" +\n//     \"Equipment ID[\" + data[4] + \"]\\n\" + \n//     \"PT100 Sensor - AI[\" + data[0] + \"]\\n\" +\n//     \"Alarm Status[\" + data[1] +\"]\\n\" +\n//     \"Timestamp[\" + Date().toString() + \"]\" + \n//     \"Site_BS001\\n\" +\n//     \"AI Process Value[\" + data[2] + \"]\\n\" +\n//     \"Threshold Parameter[\" + data[3] + \"]\\n\" + \n//     \"Equipment ID[\" + data[4] + \"]\\n\\n\" +\n//     \"PLC_Model[\" + topic[0] + \"]\\n\" + \n//     \"Command Header[\" + topic[1] + \"]\\n\" +\n//     \"Command Subject[\" + topic[2] + \"]\\n\" +\n//     \"Device Serial No.[\" + topic[3] + \"]\\n\\n\" , // Body\n//     topic : \"Alarm Notification | PT100 Sensor - AI[\" + data[0] + \"] | Status[\" + data[1] +\"] | \" + \"Timestamp[\" + Date().toString() + \"]\", //Subject\n//     to : \"monicon.sess@gmail.com\",\n//     bcc : \"monicon.sys@gmail.com\"\n// };\n\nreturn msg;\n\n// let parameters = msg.payload.split('+');\n\n// if (parameters[5] == \"1\") // PT100 Configuration Parameters\n// {\n//     global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n//     global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n//     global.set(\"addrTo_PT100\", parameters[2]);                //String\n//     global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_PT100\", parameters[4]);               //String\n//     global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n// } else {\n//     global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n//     global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n//     global.set(\"addrTo_4n20\", parameters[2]);                //String\n//     global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_4n20\", parameters[4]);               //String\n//     global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 480,
        "y": 120,
        "wires": [
            [
                "be5d96a4.aff208"
            ]
        ]
    },
    {
        "id": "753c5189.839ca",
        "type": "link out",
        "z": "ce1b30ab.c2319",
        "name": "L-PT100-ALM_FLAGS",
        "links": [
            "3184a127.75ebfe",
            "a10bac4a.3ef4b",
            "b4007e9b.4946c"
        ],
        "x": 475,
        "y": 80,
        "wires": []
    },
    {
        "id": "542e65c4.fd9d1c",
        "type": "link out",
        "z": "ce1b30ab.c2319",
        "name": "L-4n20-ALM_FLAGS",
        "links": [
            "35875a5a.263686"
        ],
        "x": 475,
        "y": 200,
        "wires": []
    },
    {
        "id": "dd3055f8.67b1f8",
        "type": "function",
        "z": "35eb0e0e.decd62",
        "name": "reboot Counter",
        "func": "var deploys = global.get(\"deploys\") || 0;\ndeploys = deploys + 1;\nglobal.set(\"deploys\", deploys);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 520,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "6f408bcd.4ebe04",
        "type": "inject",
        "z": "35eb0e0e.decd62",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "dd3055f8.67b1f8"
            ]
        ]
    },
    {
        "id": "584dddd5.2267a4",
        "type": "function",
        "z": "e7563fe0.8c458",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet depolys = global.get(\"depolys\") || 0\n\n// var msg1 = { payload : data[0] };   // RSSI\n// var msg2 = { payload : data[1] };   // WiFi Diconnection Counter\n// var msg3 = { payload : data[2] };   // MQTT Diconnection Counter\n// var msg4 = { payload : data[3] };   // Device IP\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[7]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tRSSI: parseFloat(output[0]),\n\t\t\t\tWIFI_DC: parseFloat(output[1]),\n    \t\t\tMQTT_DC: parseFloat(output[2]),\n    \t\t\tDEVICE_IP: \"\\\"\" + output[3] + \"\\\"\",\n    \t\t\tserialNo: parseFloat(topic[3]),\n    \t\t\tESP_Temp: parseFloat(output[4]),\n    \t\t\ttwentySecLoop: parseFloat(output[5]),\n    \t\t\tTRUC_VERSION: \"\\\"\" + output[6] + \"\\\"\",\n    \t\t\tdatabaseID: \"\\\"\" + output[7] + \"\\\"\",\n    \t\t\tEquipmentID: \"\\\"\" + output[8] + \"\\\"\"\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 700,
        "wires": [
            [
                "8cd3f525.a60058"
            ]
        ]
    },
    {
        "id": "cc8ac45f.c19b48",
        "type": "function",
        "z": "e7563fe0.8c458",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet depolys = global.get(\"depolys\") || 0\n// Display data\n// var data = msg.payload.split(',')\n// var msg1 = { payload : data[0] };   // RSSI\n// var msg2 = { payload : data[1] };   // WiFi Diconnection Counter\n// var msg3 = { payload : data[2] };   // MQTT Diconnection Counter\n// var msg4 = { payload : data[3] };   // Device IP\n\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\tRSSI: parseFloat(output[0]),\n\t\t\tWIFI_DC: parseFloat(output[1]),\n\t\t\tMQTT_DC: parseFloat(output[2]),\n\t\t\tDEVICE_IP: String(output[3]),\n\t\t\tSerialNo: String(topic[3]),\n\t\t\tESP_Temp: parseFloat(output[4]),\n\t\t\ttwentySecLoop: parseFloat(output[5]),\n\t\t\tTRUC_VERSION: output[6],\n\t\t\tdatabaseID: output[7],\n\t\t\tEquipmentID: output[8]\n\n\t\t},\n        tags:{\n            PLC: output[7] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 660,
        "wires": [
            [
                "9a838bb6.1ab1f8"
            ]
        ]
    },
    {
        "id": "8cd3f525.a60058",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "e7563fe0.8c458",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "9a838bb6.1ab1f8",
        "type": "influxdb batch",
        "z": "e7563fe0.8c458",
        "influxdb": "4da4ea34.630684",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 660,
        "wires": []
    },
    {
        "id": "d7b81383.f9142",
        "type": "mqtt in",
        "z": "e7563fe0.8c458",
        "name": "",
        "topic": "MONICON-PLC/Device/Status/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 150,
        "y": 660,
        "wires": [
            [
                "cc8ac45f.c19b48",
                "584dddd5.2267a4"
            ]
        ]
    },
    {
        "id": "9e06e7a6.dcab88",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Used mem(SSD)",
        "func": "let msg1 = {payload : \"df -h | grep -i sda1 | awk '{print $3\\\"/\\\"}';df -h | grep -i sda1 | awk '{print $2}'\", topic :\"Used mem(SSD)\"}\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 600,
        "wires": [
            [
                "67fc045d.1dacfc"
            ]
        ]
    },
    {
        "id": "67fc045d.1dacfc",
        "type": "exec",
        "z": "d5b77494.f7aea8",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 590,
        "y": 600,
        "wires": [
            [
                "261395c0.ac01aa"
            ],
            [],
            []
        ]
    },
    {
        "id": "261395c0.ac01aa",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Used mem(SSD)",
        "func": "if(msg.topic != \"Used mem(SSD)\") {\n    return\n}\n\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nlet data = msg.payload.split('/')\n\n//return msg;\n\nvar msg1 = {};\n\n    msg1.payload = [\n    {\n        measurement: \"OS\",\n        fields: {\n            SSD_Used: data[0],//.replace(/\\D/g,'')), //removes non numerical characters\n            SSD_Total: data[1],//.replace(/\\D/g,'')), //removes non numerical characters\n        },\n        tags:{\n            System: \"SSD\",\n        }\n    }];\n    \nvar msg2 = {};\n\nstructureObject();\n\nreturn [[msg1], [msg2]];\n        \nfunction structureObject() {\n    let usedMem = String(data[0].replace(/\\s+/g, ' ').trim());\n    let totMem = String(data[1].replace(/\\s+/g, ' ').trim());\n\tmsg2.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"SSD\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tSSD_Used: \"\\\"\" + usedMem + \"\\\"\",\n\t\t\t\tSSD_Total: \"\\\"\" + totMem + \"\\\"\",\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 600,
        "wires": [
            [
                "a68fef67.18802"
            ],
            [
                "d819a2b6.7e531"
            ]
        ]
    },
    {
        "id": "25c05ac9.3a1746",
        "type": "file in",
        "z": "fca1ea39.ff1f18",
        "name": "",
        "filename": "",
        "format": "",
        "sendError": true,
        "x": 950,
        "y": 40,
        "wires": [
            [
                "65041f6a.2aa31",
                "895bd705.192e18"
            ]
        ]
    },
    {
        "id": "bdec417c.c1339",
        "type": "switch",
        "z": "fca1ea39.ff1f18",
        "name": "Check user agent",
        "property": "req.headers.user-agent",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "ESP32-http-Update",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 290,
        "y": 40,
        "wires": [
            [],
            [
                "20df77df.81c988"
            ]
        ]
    },
    {
        "id": "f84898c0.d155f8",
        "type": "http in",
        "z": "fca1ea39.ff1f18",
        "name": "OTA Request",
        "url": "/firmwareUpdate",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 90,
        "y": 40,
        "wires": [
            [
                "bdec417c.c1339"
            ]
        ]
    },
    {
        "id": "298b3cd9.3603d4",
        "type": "debug",
        "z": "fca1ea39.ff1f18",
        "name": "msg.mostRecentFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "mostRecentFile",
        "x": 1000,
        "y": 260,
        "wires": []
    },
    {
        "id": "65041f6a.2aa31",
        "type": "http response",
        "z": "fca1ea39.ff1f18",
        "name": "OTA Response",
        "statusCode": "",
        "headers": {},
        "x": 1120,
        "y": 40,
        "wires": []
    },
    {
        "id": "a6e8e9d5.28ef88",
        "type": "function",
        "z": "fca1ea39.ff1f18",
        "name": "",
        "func": "///// \n\n\n//msg.filename = \"/home/pi/Firmware/PowerProV2.3.2.ino.nodemcu.bin\"\n//return msg\n\n//List of files from RPI Github\nvar firmwares = msg.files;\n//TRUC_VERSION DATA from ESP\nvar version = msg.req.headers;\n//Version Data\nvar currentFile = version[\"x-esp32-version\"];\n//Extract Device Type PowerPro or LightPro\nvar deviceType = currentFile.substring(0,currentFile.indexOf(\"V\")+1)\nmsg.deviceType = deviceType;\n\n//Extracts Github file that matches current ESP version ID\nvar existingFile = firmwares.filter(item=> item.includes(currentFile)).pop();\n//Filters out any incorrect device types ie PowerPro or LightPro\nvar firmwareNames = firmwares.filter(item=> item.includes(msg.deviceType));\n//Sorts out list of files\nvar comparer = new Intl.Collator(undefined, {numeric: true, sensitivity: 'base'});\nfirmwareNames.sort(comparer.compare)[firmwareNames.length-1];\n\nvar mostRecentFile;\n//Pops off most recent file\nmsg.mostRecentFile = firmwareNames.pop();\nmsg.existingFile = existingFile;\n//Compares ESP version to most recent developed file\n//if((msg.existingFile.localeCompare(msg.mostRecentFile)) < 0)\n//{\n    msg.filename = \"/home/pi/Firmware/\" + msg.mostRecentFile;\n// }\n// else\n// {\n//     msg.filename = undefined;\n//     msg.payload = \"No New File Exists\"\n// }\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 710,
        "y": 40,
        "wires": [
            [
                "298b3cd9.3603d4",
                "6966ad55.ab0db4",
                "25c05ac9.3a1746"
            ]
        ]
    },
    {
        "id": "6966ad55.ab0db4",
        "type": "debug",
        "z": "fca1ea39.ff1f18",
        "name": "msg.existingFile",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "existingFile",
        "x": 980,
        "y": 220,
        "wires": []
    },
    {
        "id": "20df77df.81c988",
        "type": "fs-ops-dir",
        "z": "fca1ea39.ff1f18",
        "name": "",
        "path": "/home/pi/Firmware",
        "pathType": "str",
        "filter": ".bin",
        "filterType": "str",
        "dir": "files",
        "dirType": "msg",
        "x": 540,
        "y": 40,
        "wires": [
            [
                "a6e8e9d5.28ef88",
                "aab60378.de0da"
            ]
        ]
    },
    {
        "id": "aee369cf.064bb8",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "MQTTCloud => MONICON.LOCAL",
        "info": "",
        "x": 160,
        "y": 40,
        "wires": []
    },
    {
        "id": "b9923e6f.a33c5",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "42507731.24b4b8"
            ]
        ]
    },
    {
        "id": "63f1a6e9.9e0408",
        "type": "function",
        "z": "ae5e2d49.68e0c",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 80,
        "wires": [
            [
                "e8bc6081.f6a39"
            ]
        ]
    },
    {
        "id": "42507731.24b4b8",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "System & Device Info",
        "func": "let macAddr = global.get(\"macAddr\") || \"NotSet\";\n\nif (macAddr === \"NotSet\") {\n    return [msg, null];\n} else {\n    return [null, msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 740,
        "y": 260,
        "wires": [
            [
                "f202d640.645438"
            ],
            [
                "a92e5565.f56698"
            ]
        ]
    },
    {
        "id": "dcedb1fa.bbf41",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "MONICON-PLC/STAT/System/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 150,
        "y": 80,
        "wires": [
            [
                "9616b2ef.d8638"
            ]
        ]
    },
    {
        "id": "ec42521.e494db",
        "type": "string",
        "z": "d365aa34.8aef88",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 420,
        "y": 200,
        "wires": [
            [
                "42507731.24b4b8"
            ]
        ]
    },
    {
        "id": "f202d640.645438",
        "type": "exec",
        "z": "d365aa34.8aef88",
        "command": "cat /sys/class/net/wlan0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 1010,
        "y": 220,
        "wires": [
            [
                "6c565f21.b54dd"
            ],
            [
                "855f743d.363c58"
            ],
            []
        ]
    },
    {
        "id": "6c565f21.b54dd",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nlet siteID = global.get(\"siteID\") || \"SiteIDxxx\";\n\nvar data = macAddr + \",\" + siteID + \",\" + msg.payload + \",\";\n\nmsg.payload = data;\nmsg.topic = \"sess/\" + msg.topic;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1250,
        "y": 220,
        "wires": [
            [
                "a92e5565.f56698"
            ]
        ]
    },
    {
        "id": "8df7a027.b8d54",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "Set MacAddress if NOT already Set",
        "info": "",
        "x": 1080,
        "y": 160,
        "wires": []
    },
    {
        "id": "9616b2ef.d8638",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "System Data",
        "func": "let siteID = global.get(\"siteID\") || \"SiteIDxxx\";\nlet macAddr = global.get(\"macAddr\") || \"NotSet\";\nlet serverVersion = global.get(\"serverVersion\") || \"MONICON-PLC_ServerV0.0.0\"\n\nvar data = macAddr + \",\" + siteID + \",\" + msg.payload;\n\nmsg.payload = data + \",\" + serverVersion;\nmsg.topic = \"sess/\" + msg.topic;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 80,
        "wires": [
            [
                "57996c9a.f65124"
            ]
        ]
    },
    {
        "id": "a92e5565.f56698",
        "type": "mqtt out",
        "z": "d365aa34.8aef88",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 1430,
        "y": 280,
        "wires": []
    },
    {
        "id": "5ee98ac4.43fc64",
        "type": "function",
        "z": "35eb0e0e.decd62",
        "name": "Check Server Address",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 540,
        "y": 420,
        "wires": [
            [
                "108a7f62.8117b1",
                "7af03c51.12c714"
            ]
        ]
    },
    {
        "id": "7bbc3919.7b7e58",
        "type": "influxdb in",
        "z": "d365aa34.8aef88",
        "influxdb": "4da4ea34.630684",
        "name": "",
        "query": "",
        "rawOutput": false,
        "precision": "",
        "retentionPolicy": "",
        "x": 850,
        "y": 520,
        "wires": [
            [
                "34c05223.f7263e"
            ]
        ]
    },
    {
        "id": "34c05223.f7263e",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "\\n\\r Filter",
        "func": "var data = String(msg.payload[0].last);\ndata = data.replace(/[\\n\\r]+/g, '');\nlet macAddr = global.get(\"macAddr\") || \"nSet\";\nmsg.topic = \"sess/MONICON-PLC/STAT/Query/\" + macAddr;\nmsg.payload = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 520,
        "wires": [
            [
                "fe660bf3.5bbb78"
            ]
        ]
    },
    {
        "id": "330b4af9.bb0196",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "Add to Query",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\nlet query = msg.payload;\nlet msg1 = {query:  String(query) };\n\nreturn msg1;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 520,
        "wires": [
            [
                "bc3050e2.febe7",
                "9468ec21.a3b54"
            ]
        ]
    },
    {
        "id": "fe660bf3.5bbb78",
        "type": "join",
        "z": "d365aa34.8aef88",
        "name": "",
        "mode": "custom",
        "build": "string",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": ",",
        "joinerType": "str",
        "accumulate": false,
        "timeout": "5",
        "count": "6",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 1210,
        "y": 520,
        "wires": [
            [
                "f9d89bd2.39cbe8"
            ]
        ]
    },
    {
        "id": "bc3050e2.febe7",
        "type": "delay",
        "z": "d365aa34.8aef88",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 610,
        "y": 520,
        "wires": [
            [
                "7bbc3919.7b7e58"
            ]
        ]
    },
    {
        "id": "2c4512dc.fa8c7e",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "Remote System Status Query",
        "info": "",
        "x": 140,
        "y": 480,
        "wires": []
    },
    {
        "id": "8fc5343f.d0b728",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "Set Site ID",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nlet siteID = msg.payload;\nglobal.set(\"siteID\", siteID);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 680,
        "wires": [
            [
                "238c4012.6c721"
            ]
        ]
    },
    {
        "id": "d73c75e.d9ece88",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "Remote Set Site ID",
        "info": "",
        "x": 110,
        "y": 640,
        "wires": []
    },
    {
        "id": "8cf60a1c.f47a38",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "Remote Set Equipment ID",
        "info": "",
        "x": 130,
        "y": 800,
        "wires": []
    },
    {
        "id": "de1f2cbf.5723",
        "type": "string",
        "z": "d365aa34.8aef88",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 700,
        "y": 840,
        "wires": [
            [
                "ca4d59f2.f04ca8",
                "e3148b64.17f478"
            ]
        ]
    },
    {
        "id": "e3148b64.17f478",
        "type": "mqtt out",
        "z": "d365aa34.8aef88",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 950,
        "y": 920,
        "wires": []
    },
    {
        "id": "cf5755e4.ea81a8",
        "type": "string",
        "z": "d365aa34.8aef88",
        "name": "Deconcatenate(USER)",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": "sess/"
                    }
                ]
            }
        ],
        "prop": "topic",
        "propout": "topic",
        "object": "msg",
        "objectout": "msg",
        "x": 700,
        "y": 1000,
        "wires": [
            [
                "e3148b64.17f478",
                "1268a4dc.6d1fcb"
            ]
        ]
    },
    {
        "id": "95c8af73.81071",
        "type": "exec",
        "z": "d365aa34.8aef88",
        "command": "sudo rm /home/pi/Firmware -r",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Delete Firmware Dir",
        "x": 900,
        "y": 1180,
        "wires": [
            [
                "4468763e.aadb08",
                "dcf30e6.f72fdf"
            ],
            [
                "5271c897.893b58"
            ],
            []
        ]
    },
    {
        "id": "4468763e.aadb08",
        "type": "exec",
        "z": "d365aa34.8aef88",
        "command": " sudo git clone https://github.com/jimmy232/Firmware.git",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Download github bin files",
        "x": 1210,
        "y": 1180,
        "wires": [
            [
                "ea90b06e.bf38a"
            ],
            [
                "c9733cf7.bb1da"
            ],
            []
        ]
    },
    {
        "id": "91971a80.ddbef8",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "MONICON-PLC/CMD/DownloadUploadFirmware/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 1180,
        "wires": [
            [
                "e5907660.f94f88"
            ]
        ]
    },
    {
        "id": "e5907660.f94f88",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "Alt Topic",
        "func": "var data = msg.topic\ndata = data.replace(\"DownloadUploadFirmware\", \"UploadFirmware\");\nmsg.topic = data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 620,
        "y": 1180,
        "wires": [
            [
                "95c8af73.81071",
                "72186fef.bbb33"
            ]
        ]
    },
    {
        "id": "b45b3581.046b78",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "Download new ESP32 Firmware and Upload to Device on request",
        "info": "",
        "x": 250,
        "y": 1140,
        "wires": []
    },
    {
        "id": "2b3294f6.c8cd1c",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "Download new ESP32 Firmware and Upload to Device on request",
        "info": "",
        "x": 250,
        "y": 960,
        "wires": []
    },
    {
        "id": "9869d20e.680fb",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "Set Timer Enable",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AnalogTimer\", \"0\");\n    AnalogTimer = \"0\";\n    msg.payload = \"Analog Timer Inactive\";\n} else {\n    global.set(\"AnalogTimer\", \"1\");\n    AnalogTimer = \"1\";\n    msg.payload = \"Analog Timer Active\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 1380,
        "wires": [
            [
                "a778e17c.07cc1"
            ]
        ]
    },
    {
        "id": "ab627a30.c76808",
        "type": "function",
        "z": "6fe84e1f.eadf8",
        "name": "Check MQTT Timer Enable",
        "func": "var AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(AnalogTimer == \"1\")\n{\nmsg.topic = msg.topic.replace(\"Device\", \"STAT\");\n    msg.topic = \"sess/\" + msg.topic;\n    return msg;\n} else {\n    return;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 120,
        "wires": [
            [
                "28f75e07.dca172"
            ]
        ]
    },
    {
        "id": "b45b430e.ed89f",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "Global Overide Timer Off",
        "func": "var AnalogTimer = global.get(\"AnalogTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AnalogTimer\", \"0\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 1420,
        "wires": [
            []
        ]
    },
    {
        "id": "6c48aae7.76f024",
        "type": "mqtt in",
        "z": "6fe84e1f.eadf8",
        "name": "",
        "topic": "MONICON-PLC/STAT/Scale_Single_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 300,
        "wires": [
            [
                "b6c88c60.d1115"
            ]
        ]
    },
    {
        "id": "a24280f4.ffc79",
        "type": "mqtt in",
        "z": "6fe84e1f.eadf8",
        "name": "",
        "topic": "MONICON-PLC/STAT/Scale_Single_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 380,
        "wires": [
            [
                "b6c88c60.d1115"
            ]
        ]
    },
    {
        "id": "139c8bbc.19f074",
        "type": "comment",
        "z": "6fe84e1f.eadf8",
        "name": "Scale Parameters",
        "info": "",
        "x": 110,
        "y": 260,
        "wires": []
    },
    {
        "id": "9517a849.fee028",
        "type": "comment",
        "z": "6fe84e1f.eadf8",
        "name": "Analog Input Values",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "b6c88c60.d1115",
        "type": "function",
        "z": "6fe84e1f.eadf8",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 340,
        "wires": [
            [
                "28f75e07.dca172"
            ]
        ]
    },
    {
        "id": "f85949b7.149f68",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "Set Timer Enable",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar AlarmTimer = global.get(\"AlarmTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AlarmTimer\", \"0\");\n    AlarmTimer = \"0\";\n    msg.payload = \"Alarm Timer Inactive\";\n} else {\n    global.set(\"AlarmTimer\", \"1\");\n    AlarmTimer = \"1\";\n    msg.payload = \"Alarm Timer Active\";\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 1520,
        "wires": [
            [
                "39230e4d.d00832"
            ]
        ]
    },
    {
        "id": "ffad7362.79761",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "Global Overide Timer Off",
        "func": "var AnalogTimer = global.get(\"AlarmTimer\") || \"0\";\nif(msg.payload == \"0\")\n{\n    global.set(\"AlarmTimer\", \"0\");\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 610,
        "y": 1560,
        "wires": [
            []
        ]
    },
    {
        "id": "6641fec4.054da",
        "type": "function",
        "z": "ce1b30ab.c2319",
        "name": "Check MQTT Timer Enable",
        "func": "var AlarmTimer = global.get(\"AlarmTimer\") || \"0\";\nif(AlarmTimer == \"1\")\n{\nmsg.topic = msg.topic.replace(\"Device\", \"STAT\");\n    msg.topic = \"sess/\" + msg.topic;\n    return msg;\n} else {\n    return;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 680,
        "y": 140,
        "wires": [
            [
                "80a4c574.8ca648"
            ]
        ]
    },
    {
        "id": "69bbb3f.e85924c",
        "type": "mqtt in",
        "z": "ce1b30ab.c2319",
        "name": "",
        "topic": "MONICON-PLC/STAT/Alarm_En_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 520,
        "wires": [
            [
                "87da9ad0.b8bfd8"
            ]
        ]
    },
    {
        "id": "e9611b13.8d7be8",
        "type": "mqtt in",
        "z": "ce1b30ab.c2319",
        "name": "",
        "topic": "MONICON-PLC/STAT/Alarm_En_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 600,
        "wires": [
            [
                "87da9ad0.b8bfd8"
            ]
        ]
    },
    {
        "id": "87da9ad0.b8bfd8",
        "type": "function",
        "z": "ce1b30ab.c2319",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 560,
        "wires": [
            [
                "80a4c574.8ca648"
            ]
        ]
    },
    {
        "id": "a307e99b.d5b658",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "Define Email Parameters",
        "info": "",
        "x": 130,
        "y": 1620,
        "wires": []
    },
    {
        "id": "9da14d73.5ab7a",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "Email Parameters",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nlet parameters = msg.payload.split('+');\n\nif (parameters[5] == \"1\") // PT100 Configuration Parameters\n{\n    global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n    global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n    global.set(\"addrTo_PT100\", parameters[2]);                //String\n    global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n    global.set(\"addrBcc_PT100\", parameters[4]);               //String\n    global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n    global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n} else {\n    global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n    global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n    global.set(\"addrTo_4n20\", parameters[2]);                //String\n    global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n    global.set(\"addrBcc_4n20\", parameters[4]);               //String\n    global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n    global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 590,
        "y": 1660,
        "wires": [
            [
                "cd51fff.f0459"
            ]
        ]
    },
    {
        "id": "3c15c606.2ae56a",
        "type": "function",
        "z": "7887b7b3.70ac08",
        "name": "Email Setup - 4..20mA Alarms",
        "func": "/*\ndata[0] = PIN_ID\ndata[1] = Alarm Status\ndata[2] = PV\ndata[3] = Threshold Parameter\ndata[4] = Equipment ID\ndata[5] = Software Version\n\ntopic[0] = PLC_ID\ntopic[1] = CMD\ntopic[2] = Subject\ntopic[3] = Serial_ID\n*/\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nlet subjectMSg_4n20 = global.get(\"subjectMSg_4n20\") || \"null\";                    //String\nlet bodyMSg_4n20 = global.get(\"bodyMSg_4n20\") || \"null\";                          //String\nlet addrTo_4n20 = global.get(\"addrTo_4n20\") || \"monicon.sess@gmail.com\";                            //String\nlet addrCc_4n20 = global.get(\"addrCc_4n20\") || \"\";                            //Strng\nlet addrBcc_4n20 = global.get(\"addrBcc_4n20\") || \"\";                          //String\nlet subjectParameters_4n20 = global.get(\"subjectParameters_4n20\") || \"null\";      //String of bools\nlet bodyParameters_4n20 = global.get(\"bodyParameters_4n20\") || \"null\";            //String of bools\n\n// Data splitting\nvar data = msg.payload.split(',')\nvar topic = msg.topic.split('/')\nlet subPara = subjectParameters_4n20.split('=');\nlet bodyPara = bodyParameters_4n20.split('=');\n\n// Subject Concatenation\nvar subject = subjectMSg_4n20;\nsubject += subPara[5] == \"1\" ? \" | Sensor Type - 4n20 Alm\" : \"\";\nsubject += subPara[4] == \"1\" ? \" | Alarm Status - \" + data[1] : \"\";\nsubject += subPara[1] == \"1\" ? \" | Analog No. - \" + data[0] : \"\";\nsubject += subPara[2] == \"1\" ? \" | Site ID - \" + siteID : \"\";\nsubject += subPara[3] == \"1\" ? \" | Equipment ID - \" + data[4] : \"\";\nsubject += subPara[0] == \"1\" ? \" | Date & Time - \" + Date().toString() : \"\";\n\n// Subject Concatenation\nvar body = bodyMSg_4n20 + \"\\n\";\nbody += bodyPara[0] == \"1\" ? \"\\nDate & Time -\\t \" + Date().toString() : \"\";\nbody += bodyPara[5] == \"1\" ? \"\\nSensor Type -\\t 4n20 Alm\" : \"\";\nbody += bodyPara[4] == \"1\" ? \"\\nAlarm Status -\\t \" + data[1] : \"\";\nbody += bodyPara[1] == \"1\" ? \"\\nAnalog No. -\\t \" + data[0] : \"\";\nbody += bodyPara[2] == \"1\" ? \"\\nSite ID -\\t \" + siteID : \"\";\nbody += bodyPara[3] == \"1\" ? \"\\nEquipment ID -\\t \" + data[4] : \"\";\nbody += bodyPara[9] == \"1\" ? \"\\nProcess Value -\\t \" + data[2] : \"\";\nbody += bodyPara[6] == \"1\" ? \"\\nThreshold Parameter -\\t \" + data[3] : \"\";\nbody += bodyPara[7] == \"1\" ? \"\\nSerial No. -\\t \" + topic[3] : \"\";\nbody += bodyPara[8] == \"1\" ? \"\\nSoftware Version -\\t \" + data[5] : \"\";\n\n// New Email Message\nmsg = {\n    payload: body,\n    topic: subject,\n    to: addrTo_4n20,\n    cc: addrCc_4n20,\n    bcc: addrBcc_4n20\n}\n\n// Old Email Message\n// msg = {\n//     payload : \"PT100 Alarm has been triggered.\\n\" +\n//     \"Equipment ID[\" + data[4] + \"]\\n\" + \n//     \"PT100 Sensor - AI[\" + data[0] + \"]\\n\" +\n//     \"Alarm Status[\" + data[1] +\"]\\n\" +\n//     \"Timestamp[\" + Date().toString() + \"]\" + \n//     \"Site_BS001\\n\" +\n//     \"AI Process Value[\" + data[2] + \"]\\n\" +\n//     \"Threshold Parameter[\" + data[3] + \"]\\n\" + \n//     \"Equipment ID[\" + data[4] + \"]\\n\\n\" +\n//     \"PLC_Model[\" + topic[0] + \"]\\n\" + \n//     \"Command Header[\" + topic[1] + \"]\\n\" +\n//     \"Command Subject[\" + topic[2] + \"]\\n\" +\n//     \"Device Serial No.[\" + topic[3] + \"]\\n\\n\" , // Body\n//     topic : \"Alarm Notification | PT100 Sensor - AI[\" + data[0] + \"] | Status[\" + data[1] +\"] | \" + \"Timestamp[\" + Date().toString() + \"]\", //Subject\n//     to : \"monicon.sess@gmail.com\",\n//     bcc : \"monicon.sys@gmail.com\"\n// };\n\nreturn msg;\n\n// let parameters = msg.payload.split('+');\n\n// if (parameters[5] == \"1\") // PT100 Configuration Parameters\n// {\n//     global.set(\"subjectMSg_PT100\", parameters[0]);            //String\n//     global.set(\"bodyMSg_PT100\", parameters[1]);               //String\n//     global.set(\"addrTo_PT100\", parameters[2]);                //String\n//     global.set(\"addrCc_PT100\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_PT100\", parameters[4]);               //String\n//     global.set(\"subjectParameters_PT100\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_PT100\", parameters[7]);        //String of bools\n// } else {\n//     global.set(\"subjectMSg_4n20\", parameters[0]);            //String\n//     global.set(\"bodyMSg_4n20\", parameters[1]);               //String\n//     global.set(\"addrTo_4n20\", parameters[2]);                //String\n//     global.set(\"addrCc_4n20\", parameters[3]);                //Strng\n//     global.set(\"addrBcc_4n20\", parameters[4]);               //String\n//     global.set(\"subjectParameters_4n20\", parameters[6]);     //String of bools\n//     global.set(\"bodyParameters_4n20\", parameters[7]);        //String of bools    \n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 240,
        "wires": [
            [
                "be5d96a4.aff208"
            ]
        ]
    },
    {
        "id": "bde89a38.fa9a98",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 140,
        "y": 200,
        "wires": [
            [
                "ec42521.e494db"
            ]
        ]
    },
    {
        "id": "d06808a3.59c088",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Query/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 520,
        "wires": [
            [
                "330b4af9.bb0196"
            ]
        ]
    },
    {
        "id": "92b78ef2.3db31",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/SiteID/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 680,
        "wires": [
            [
                "8fc5343f.d0b728"
            ]
        ]
    },
    {
        "id": "4e2b09ae.97ed78",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpdateEquipID/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 840,
        "wires": [
            [
                "de1f2cbf.5723"
            ]
        ]
    },
    {
        "id": "74abb150.fa04f",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UploadFirmware/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 1000,
        "wires": [
            [
                "cf5755e4.ea81a8"
            ]
        ]
    },
    {
        "id": "ea0bafa1.2c085",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "Enable Analog Timer to Stream values to Broker",
        "info": "",
        "x": 200,
        "y": 1340,
        "wires": []
    },
    {
        "id": "fb2810cb.155a9",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/AnalogTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 1380,
        "wires": [
            [
                "9869d20e.680fb",
                "b45b430e.ed89f"
            ]
        ]
    },
    {
        "id": "f5654fc8.988ac",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "Enable Alarm Timer to Stream values to Broker",
        "info": "",
        "x": 200,
        "y": 1480,
        "wires": []
    },
    {
        "id": "5d584ea6.ccd52",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/AlarmTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 1520,
        "wires": [
            [
                "f85949b7.149f68",
                "ffad7362.79761"
            ]
        ]
    },
    {
        "id": "4371abd7.568bb4",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/EmailDefinition/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 1660,
        "wires": [
            [
                "9da14d73.5ab7a"
            ]
        ]
    },
    {
        "id": "d9d6a28.5b6336",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "Search Email Parameters",
        "info": "",
        "x": 130,
        "y": 1720,
        "wires": []
    },
    {
        "id": "436c141b.be791c",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/EmailSearch/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 1760,
        "wires": [
            [
                "40acfc1d.7a9d94"
            ]
        ]
    },
    {
        "id": "40acfc1d.7a9d94",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "Email Parameters Template",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nmsg.topic = msg.topic.replace(\"CMD\", \"STAT\");\n\nlet message = \"\";\n\nif (msg.payload == \"PT100SensorType\") // PT100 Configuration Parameters\n{\n    message = global.get(\"subjectMSg_PT100\");            //String\n    message += \",\";\n    message += global.get(\"bodyMSg_PT100\");               //String\n    message += \",\";\n    message += global.get(\"addrTo_PT100\");                //String\n    message += \",\";\n    message += global.get(\"addrCc_PT100\");                //Strng\n    message += \",\";\n    message += global.get(\"addrBcc_PT100\");               //String\n    message += \",\";\n    message += global.get(\"subjectParameters_PT100\");     //String of bools\n    message += \",\";\n    message += global.get(\"bodyParameters_PT100\");        //String of bools\n} else {\n    message = global.get(\"subjectMSg_4n20\");            //String\n    message += \",\";\n    message += global.get(\"bodyMSg_4n20\");               //String\n    message += \",\";\n    message += global.get(\"addrTo_4n20\");                //String\n    message += \",\";\n    message += global.get(\"addrCc_4n20\");                //Strng\n    message += \",\";\n    message += global.get(\"addrBcc_4n20\");               //String\n    message += \",\";\n    message += global.get(\"subjectParameters_4n20\");     //String of bools\n    message += \",\";\n    message += global.get(\"bodyParameters_4n20\");        //String of bools    \n}\nmsg.payload = message;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1100,
        "y": 1760,
        "wires": [
            [
                "ea90b06e.bf38a"
            ]
        ]
    },
    {
        "id": "2ef41c5b.3af734",
        "type": "mqtt in",
        "z": "35eb0e0e.decd62",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Reboot/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 420,
        "wires": [
            [
                "5ee98ac4.43fc64"
            ]
        ]
    },
    {
        "id": "496adc4f.1aab74",
        "type": "comment",
        "z": "35eb0e0e.decd62",
        "name": "System Reboot Counter",
        "info": "",
        "x": 120,
        "y": 140,
        "wires": []
    },
    {
        "id": "234c648a.81e21c",
        "type": "comment",
        "z": "35eb0e0e.decd62",
        "name": "System Reboot every 48hrs",
        "info": "",
        "x": 140,
        "y": 260,
        "wires": []
    },
    {
        "id": "71faaa38.465524",
        "type": "comment",
        "z": "35eb0e0e.decd62",
        "name": "Remote Reboot",
        "info": "",
        "x": 100,
        "y": 380,
        "wires": []
    },
    {
        "id": "7af03c51.12c714",
        "type": "function",
        "z": "35eb0e0e.decd62",
        "name": "Return Message",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Server Reboot was Successful.\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1080,
        "y": 420,
        "wires": [
            [
                "125523a6.48a3bc"
            ]
        ]
    },
    {
        "id": "895bd705.192e18",
        "type": "function",
        "z": "fca1ea39.ff1f18",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Uploading Outstation with new File: <\" + msg.filename + \">\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1090,
        "y": 120,
        "wires": [
            [
                "3920a476.1a7f4c"
            ]
        ]
    },
    {
        "id": "cd51fff.f0459",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Email template loaded successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1660,
        "wires": [
            [
                "ea90b06e.bf38a"
            ]
        ]
    },
    {
        "id": "72186fef.bbb33",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Clearing Server File Directory...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1320,
        "wires": [
            [
                "ea90b06e.bf38a"
            ]
        ]
    },
    {
        "id": "dcf30e6.f72fdf",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Downloading new Firmware...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1240,
        "wires": [
            [
                "ea90b06e.bf38a"
            ]
        ]
    },
    {
        "id": "1268a4dc.6d1fcb",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Uploading new Firmware...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 1000,
        "wires": [
            [
                "fa51f1a5.49096"
            ]
        ]
    },
    {
        "id": "39230e4d.d00832",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\") || \"\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1520,
        "wires": [
            [
                "ea90b06e.bf38a"
            ]
        ]
    },
    {
        "id": "238c4012.6c721",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nlet siteID = global.get(\"siteID\", siteID);\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"SiteID updated <\" + siteID + \">\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 680,
        "wires": [
            [
                "f9d89bd2.39cbe8"
            ]
        ]
    },
    {
        "id": "a778e17c.07cc1",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\") || \"\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1380,
        "wires": [
            [
                "ea90b06e.bf38a"
            ]
        ]
    },
    {
        "id": "9468ec21.a3b54",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Query on Local Database Executed Successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 580,
        "wires": [
            [
                "f9d89bd2.39cbe8"
            ]
        ]
    },
    {
        "id": "ca4d59f2.f04ca8",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"New Equipment ID has been issued to Outstation.\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 840,
        "wires": [
            [
                "fa51f1a5.49096"
            ]
        ]
    },
    {
        "id": "cdb04f27.5dfb5",
        "type": "mqtt out",
        "z": "d365aa34.8aef88",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 330,
        "y": 2280,
        "wires": []
    },
    {
        "id": "1fa4c231.94098e",
        "type": "mqtt out",
        "z": "d365aa34.8aef88",
        "name": "MQTT Cloud",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "4d64fa3d.ad0334",
        "x": 330,
        "y": 2340,
        "wires": []
    },
    {
        "id": "c260f821.25d778",
        "type": "link in",
        "z": "d365aa34.8aef88",
        "name": "MQTT Local | Remote",
        "links": [
            "e8bc6081.f6a39",
            "e31f862a.4be1a8",
            "bc5a69a0.b344c8",
            "d43e38f9.001218",
            "3920a476.1a7f4c",
            "f9d89bd2.39cbe8",
            "57996c9a.f65124",
            "125523a6.48a3bc",
            "80a4c574.8ca648",
            "b597f3a7.7d688",
            "2edd2e4d.c38122",
            "26aec357.11ac9c",
            "11deca3a.f31256",
            "ea90b06e.bf38a",
            "28f75e07.dca172",
            "fa51f1a5.49096",
            "c37bbc7e.51264",
            "e25579c6.4f04d8",
            "b400755a.4bbc38",
            "699294a4.9b178c"
        ],
        "x": 195,
        "y": 2300,
        "wires": [
            [
                "1fa4c231.94098e",
                "cdb04f27.5dfb5"
            ]
        ]
    },
    {
        "id": "ea90b06e.bf38a",
        "type": "link out",
        "z": "d365aa34.8aef88",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 1575,
        "y": 1400,
        "wires": []
    },
    {
        "id": "fa51f1a5.49096",
        "type": "link out",
        "z": "d365aa34.8aef88",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 1415,
        "y": 920,
        "wires": []
    },
    {
        "id": "f9d89bd2.39cbe8",
        "type": "link out",
        "z": "d365aa34.8aef88",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 1395,
        "y": 520,
        "wires": []
    },
    {
        "id": "3920a476.1a7f4c",
        "type": "link out",
        "z": "fca1ea39.ff1f18",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 1175,
        "y": 120,
        "wires": []
    },
    {
        "id": "125523a6.48a3bc",
        "type": "link out",
        "z": "35eb0e0e.decd62",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 1255,
        "y": 420,
        "wires": []
    },
    {
        "id": "28f75e07.dca172",
        "type": "link out",
        "z": "6fe84e1f.eadf8",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 835,
        "y": 240,
        "wires": []
    },
    {
        "id": "80a4c574.8ca648",
        "type": "link out",
        "z": "ce1b30ab.c2319",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 935,
        "y": 420,
        "wires": []
    },
    {
        "id": "e8bc6081.f6a39",
        "type": "link out",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 795,
        "y": 80,
        "wires": []
    },
    {
        "id": "cc416748.e7aba8",
        "type": "link in",
        "z": "d5b77494.f7aea8",
        "name": "",
        "links": [
            "b4c78120.c061c"
        ],
        "x": 135,
        "y": 360,
        "wires": [
            [
                "33ab00b1.eba83",
                "2ec991a8.9bffae",
                "fe7e1c6.70e80e",
                "5851728c.81b63c",
                "c4dbff5e.7e952",
                "3375ee25.83a7c2",
                "7323f309.33cadc",
                "19ce72d4.ee167d",
                "9e06e7a6.dcab88",
                "c1e25478.cb8208"
            ]
        ]
    },
    {
        "id": "b4c78120.c061c",
        "type": "link out",
        "z": "d5b77494.f7aea8",
        "name": "30SecCycle",
        "links": [
            "cc416748.e7aba8"
        ],
        "x": 615,
        "y": 80,
        "wires": []
    },
    {
        "id": "ad4ac9ab.eadc88",
        "type": "link out",
        "z": "d5b77494.f7aea8",
        "name": "",
        "links": [
            "abb189e3.b4abc8"
        ],
        "x": 1115,
        "y": 80,
        "wires": []
    },
    {
        "id": "f74b43dd.94c43",
        "type": "influxdb batch",
        "z": "e7563fe0.8c458",
        "influxdb": "4da4ea34.630684",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 960,
        "wires": []
    },
    {
        "id": "abb189e3.b4abc8",
        "type": "link in",
        "z": "e7563fe0.8c458",
        "name": "Local InfluxDB",
        "links": [
            "ad4ac9ab.eadc88",
            "a68fef67.18802",
            "8fd3e33c.936cf",
            "5e2df02a.f63e7",
            "3dadfec1.d1ed12",
            "16251cb3.026963",
            "2df71e1.2d013e2",
            "1628eea3.8519d1"
        ],
        "x": 35,
        "y": 960,
        "wires": [
            [
                "f74b43dd.94c43"
            ]
        ]
    },
    {
        "id": "51c7261b.29bdb8",
        "type": "comment",
        "z": "e7563fe0.8c458",
        "name": "Local InfluxDb Link",
        "info": "",
        "x": 150,
        "y": 940,
        "wires": []
    },
    {
        "id": "5d01ef4f.91794",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "e7563fe0.8c458",
        "server": "da535876.280af8",
        "name": "SESS",
        "x": 930,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "8bc1c50e.825288",
        "type": "link in",
        "z": "e7563fe0.8c458",
        "name": "Remote FluxDB",
        "links": [
            "82e0df3a.50ae7",
            "d819a2b6.7e531",
            "9a038e99.ed9ba",
            "bf5396be.445188",
            "52944acb.6a3a64",
            "25bd3a1a.9c8846",
            "377877ea.af4428"
        ],
        "x": 35,
        "y": 1040,
        "wires": [
            [
                "5d01ef4f.91794"
            ]
        ]
    },
    {
        "id": "9a038e99.ed9ba",
        "type": "link out",
        "z": "d5b77494.f7aea8",
        "name": "",
        "links": [
            "8bc1c50e.825288"
        ],
        "x": 1115,
        "y": 160,
        "wires": []
    },
    {
        "id": "8fd3e33c.936cf",
        "type": "link out",
        "z": "d5b77494.f7aea8",
        "name": "",
        "links": [
            "abb189e3.b4abc8"
        ],
        "x": 1115,
        "y": 240,
        "wires": []
    },
    {
        "id": "a68fef67.18802",
        "type": "link out",
        "z": "d5b77494.f7aea8",
        "name": "",
        "links": [
            "abb189e3.b4abc8"
        ],
        "x": 1115,
        "y": 400,
        "wires": []
    },
    {
        "id": "25bd3a1a.9c8846",
        "type": "link out",
        "z": "d5b77494.f7aea8",
        "name": "",
        "links": [
            "8bc1c50e.825288"
        ],
        "x": 1115,
        "y": 360,
        "wires": []
    },
    {
        "id": "d819a2b6.7e531",
        "type": "link out",
        "z": "d5b77494.f7aea8",
        "name": "",
        "links": [
            "8bc1c50e.825288"
        ],
        "x": 1115,
        "y": 600,
        "wires": []
    },
    {
        "id": "c1e25478.cb8208",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "System & Device Info",
        "func": "let macAddr = global.get(\"macAddr\") || \"NotSet\";\n\nif (macAddr === \"NotSet\") {\n    return [msg, null];\n} else {\n    msg.payload = macAddr;\n    return [null, msg];\n}\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 760,
        "wires": [
            [
                "13ef432.88dd6bd"
            ],
            [
                "122d0eb4.f29e11"
            ]
        ]
    },
    {
        "id": "13ef432.88dd6bd",
        "type": "exec",
        "z": "d5b77494.f7aea8",
        "command": "cat /sys/class/net/eth0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 630,
        "y": 700,
        "wires": [
            [
                "7596ab6b.1f3fe4"
            ],
            [],
            []
        ]
    },
    {
        "id": "7596ab6b.1f3fe4",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nmsg.payload = macAddr;\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 700,
        "wires": [
            [
                "122d0eb4.f29e11"
            ]
        ]
    },
    {
        "id": "bdac9192.4c3c7",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Developer macAddr Block",
        "func": "let macAddr = global.get(\"macAddr\") || \"nSet\";\nif(macAddr == \"b827ebf15f4e\" || macAddr == \"b827eba5dff3\") {\n    return\n} \nelse if (macAddr == \"nSet\") {\n    return [[msg], [null]];\n} else {\n    return [[null], [msg]];\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 350,
        "y": 40,
        "wires": [
            [
                "9e405054.f8343"
            ],
            [
                "b4c78120.c061c"
            ]
        ]
    },
    {
        "id": "9a7a184.3256ee8",
        "type": "comment",
        "z": "d5b77494.f7aea8",
        "name": "Get local macaddr",
        "info": "",
        "x": 410,
        "y": 720,
        "wires": []
    },
    {
        "id": "9e405054.f8343",
        "type": "link out",
        "z": "d5b77494.f7aea8",
        "name": "Get macAddr if Not Defined",
        "links": [
            "11c74579.3eeadb"
        ],
        "x": 615,
        "y": 40,
        "wires": []
    },
    {
        "id": "6a8075fb.651f7c",
        "type": "inject",
        "z": "35eb0e0e.decd62",
        "name": "MoniconPLC-Server003V0.1.2",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "MoniconPLC-Server003V0.1.2",
        "payloadType": "str",
        "x": 170,
        "y": 80,
        "wires": [
            [
                "9c3a8f81.31952"
            ]
        ]
    },
    {
        "id": "66fd1e6.58ac8e",
        "type": "comment",
        "z": "35eb0e0e.decd62",
        "name": "Set Server Version",
        "info": "",
        "x": 110,
        "y": 40,
        "wires": []
    },
    {
        "id": "9a4033ed.c502d",
        "type": "mqtt in",
        "z": "e7563fe0.8c458",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/DeleteCreateLocalDB/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 160,
        "wires": [
            [
                "b06b18cc.b32c58"
            ]
        ]
    },
    {
        "id": "4c1a8ba1.1e34a4",
        "type": "delay",
        "z": "e7563fe0.8c458",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 560,
        "y": 240,
        "wires": [
            [
                "1fec9ac2.998825"
            ]
        ]
    },
    {
        "id": "b06b18cc.b32c58",
        "type": "function",
        "z": "e7563fe0.8c458",
        "name": "Check Server macAddr",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Local Database has been reset.\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 160,
        "wires": [
            [
                "c7962292.80849",
                "4c1a8ba1.1e34a4",
                "c37bbc7e.51264"
            ]
        ]
    },
    {
        "id": "c37bbc7e.51264",
        "type": "link out",
        "z": "e7563fe0.8c458",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 815,
        "y": 160,
        "wires": []
    },
    {
        "id": "318df286.09511e",
        "type": "mqtt in",
        "z": "ce1b30ab.c2319",
        "name": "",
        "topic": "MONICON-PLC/STAT/Thresholds_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 680,
        "wires": [
            [
                "720968a8.5512a8",
                "32a7f8d2.3afa48"
            ]
        ]
    },
    {
        "id": "d2c05440.9a0738",
        "type": "mqtt in",
        "z": "ce1b30ab.c2319",
        "name": "",
        "topic": "MONICON-PLC/STAT/Thresholds_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 800,
        "wires": [
            [
                "28186c51.2e4754",
                "32a7f8d2.3afa48"
            ]
        ]
    },
    {
        "id": "720968a8.5512a8",
        "type": "link out",
        "z": "ce1b30ab.c2319",
        "name": "L-Thres_PT100-Para",
        "links": [],
        "x": 475,
        "y": 680,
        "wires": []
    },
    {
        "id": "28186c51.2e4754",
        "type": "link out",
        "z": "ce1b30ab.c2319",
        "name": "L-Thres_4n20-Para",
        "links": [
            "7010bf18.67104"
        ],
        "x": 475,
        "y": 800,
        "wires": []
    },
    {
        "id": "32a7f8d2.3afa48",
        "type": "function",
        "z": "ce1b30ab.c2319",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 740,
        "wires": [
            [
                "80a4c574.8ca648"
            ]
        ]
    },
    {
        "id": "57996c9a.f65124",
        "type": "link out",
        "z": "d365aa34.8aef88",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 575,
        "y": 80,
        "wires": []
    },
    {
        "id": "c8c01f5c.34b31",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "GLOBAL DEVICE SEARCH",
        "info": "",
        "x": 140,
        "y": 140,
        "wires": []
    },
    {
        "id": "cf8224a1.e6afc8",
        "type": "mqtt in",
        "z": "6fe84e1f.eadf8",
        "name": "",
        "topic": "MONICON-PLC/STAT/CaliPub_4n20/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 500,
        "wires": [
            [
                "452755d2.db9dec"
            ]
        ]
    },
    {
        "id": "dd9d07b5.e0e2a8",
        "type": "mqtt in",
        "z": "6fe84e1f.eadf8",
        "name": "",
        "topic": "MONICON-PLC/STAT/CaliPub_PT100/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 580,
        "wires": [
            [
                "452755d2.db9dec"
            ]
        ]
    },
    {
        "id": "71aa66c7.f8ef68",
        "type": "comment",
        "z": "6fe84e1f.eadf8",
        "name": "Scale Parameters",
        "info": "",
        "x": 110,
        "y": 460,
        "wires": []
    },
    {
        "id": "452755d2.db9dec",
        "type": "function",
        "z": "6fe84e1f.eadf8",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 640,
        "y": 540,
        "wires": [
            [
                "28f75e07.dca172"
            ]
        ]
    },
    {
        "id": "bc4b7d11.d05d2",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "Poll Cycle Times",
        "info": "",
        "x": 120,
        "y": 1840,
        "wires": []
    },
    {
        "id": "2da25baa.6e7d84",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "MONICON-PLC/STAT/TenSecondLoopLimit/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 1880,
        "wires": [
            [
                "217eef62.0d835"
            ]
        ]
    },
    {
        "id": "217eef62.0d835",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 1880,
        "wires": [
            [
                "11deca3a.f31256"
            ]
        ]
    },
    {
        "id": "11deca3a.f31256",
        "type": "link out",
        "z": "d365aa34.8aef88",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 735,
        "y": 1880,
        "wires": []
    },
    {
        "id": "25d15e2b.bcf4e2",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "Task Complete Messages",
        "info": "",
        "x": 150,
        "y": 1940,
        "wires": []
    },
    {
        "id": "cbae79ff.784148",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "MONICON-PLC/STAT/RespondMessages/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 1980,
        "wires": [
            [
                "63fa3d1b.a6e144"
            ]
        ]
    },
    {
        "id": "63fa3d1b.a6e144",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 600,
        "y": 1980,
        "wires": [
            [
                "d43e38f9.001218"
            ]
        ]
    },
    {
        "id": "d43e38f9.001218",
        "type": "link out",
        "z": "d365aa34.8aef88",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 735,
        "y": 1980,
        "wires": []
    },
    {
        "id": "4b3411fa.956b8",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "Enable Analog Timer to Stream values to Broker",
        "info": "",
        "x": 220,
        "y": 2040,
        "wires": []
    },
    {
        "id": "e31ba6f8.406528",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpgradeGrafana/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "x": 210,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "5fa013ef.c0416c",
        "type": "exec",
        "z": "d365aa34.8aef88",
        "command": "sudo /home/pi/JC/grafanaGithubSetup.sh",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Update Local Grafana Dashboard ",
        "x": 840,
        "y": 2080,
        "wires": [
            [
                "b96c8e73.a2b98"
            ],
            [
                "e0c0e559.36cd28"
            ],
            []
        ]
    },
    {
        "id": "df62cec7.d2e86",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "Check Server",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 580,
        "y": 2080,
        "wires": [
            [
                "5fa013ef.c0416c"
            ]
        ]
    },
    {
        "id": "b96c8e73.a2b98",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Local Grafana Updated Successfully\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 2100,
        "wires": [
            [
                "b597f3a7.7d688"
            ]
        ]
    },
    {
        "id": "b597f3a7.7d688",
        "type": "link out",
        "z": "d365aa34.8aef88",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 1255,
        "y": 2100,
        "wires": []
    },
    {
        "id": "f9dcf7ea.553bd8",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/UpgradeGrafana/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 210,
        "y": 2140,
        "wires": [
            [
                "df62cec7.d2e86"
            ]
        ]
    },
    {
        "id": "e0c0e559.36cd28",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1110,
        "y": 2160,
        "wires": [
            [
                "b597f3a7.7d688"
            ]
        ]
    },
    {
        "id": "5271c897.893b58",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1170,
        "y": 1280,
        "wires": [
            [
                "ea90b06e.bf38a"
            ]
        ]
    },
    {
        "id": "c9733cf7.bb1da",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1450,
        "y": 1180,
        "wires": [
            [
                "ea90b06e.bf38a"
            ]
        ]
    },
    {
        "id": "855f743d.363c58",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1230,
        "y": 400,
        "wires": [
            [
                "f9d89bd2.39cbe8"
            ]
        ]
    },
    {
        "id": "37783af7.712fd6",
        "type": "function",
        "z": "35eb0e0e.decd62",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\");\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 300,
        "wires": [
            [
                "125523a6.48a3bc"
            ]
        ]
    },
    {
        "id": "8dbdfc7f.a8195",
        "type": "comment",
        "z": "35eb0e0e.decd62",
        "name": "Download Scripts",
        "info": "",
        "x": 100,
        "y": 640,
        "wires": []
    },
    {
        "id": "4e17a9ea.564c98",
        "type": "mqtt in",
        "z": "35eb0e0e.decd62",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/Scripts/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 680,
        "wires": [
            [
                "b18d0ce4.9ce45"
            ]
        ]
    },
    {
        "id": "b18d0ce4.9ce45",
        "type": "function",
        "z": "35eb0e0e.decd62",
        "name": "Scripting",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\n//let directory = \"MONICON\";\n\n//var data = \"sudo find /home/pi/ -type d -name 'MONICON/Scripts' -exec rm -r {} +;\"\nvar data = \"sudo rm -r /home/pi/MONICON/Scripts;\"\ndata = data.concat(\"sudo git clone https://github.com/jimmy232/MoniconPLC_Scripts.git /home/pi/MONICON/Scripts/;\");\ndata = data.concat(\"sudo chmod +x /home/pi/MONICON/Scripts/*.sh;\");\ndata = data.concat(\"sudo /home/pi/MONICON/Scripts/\" + msg.payload + \";\");\nmsg.payload = data;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 500,
        "y": 680,
        "wires": [
            [
                "91c5cadd.2c5a98",
                "5c5fc486.4d979c",
                "21f71d84.c38a42"
            ]
        ]
    },
    {
        "id": "91c5cadd.2c5a98",
        "type": "exec",
        "z": "35eb0e0e.decd62",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 790,
        "y": 680,
        "wires": [
            [
                "cebcc9de.1982f8"
            ],
            [
                "cebcc9de.1982f8"
            ],
            [
                "cebcc9de.1982f8",
                "a2d159fb.ae1988"
            ]
        ]
    },
    {
        "id": "cebcc9de.1982f8",
        "type": "function",
        "z": "35eb0e0e.decd62",
        "name": "Logs",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/LogMessages/\" + macAddr;\nif(msg.payload === null || msg.payload.length == 0) {\n    msg.payload == \"Empty Msg\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 680,
        "wires": [
            [
                "bc5a69a0.b344c8"
            ]
        ]
    },
    {
        "id": "a2d159fb.ae1988",
        "type": "function",
        "z": "35eb0e0e.decd62",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\n\nif(msg.payload.code === 0) {\n    msg.payload = \"Script-Finished\";\n} else {\n    msg.payload = \"Script-Failed\";\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1050,
        "y": 720,
        "wires": [
            [
                "bc5a69a0.b344c8"
            ]
        ]
    },
    {
        "id": "bc5a69a0.b344c8",
        "type": "link out",
        "z": "35eb0e0e.decd62",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 1195,
        "y": 840,
        "wires": []
    },
    {
        "id": "5c5fc486.4d979c",
        "type": "function",
        "z": "35eb0e0e.decd62",
        "name": "Logs",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/LogMessages/\" + macAddr;\nif(msg.payload === null || msg.payload.length === 0) {\n    msg.payload == \"Empty Msg\"\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 800,
        "wires": [
            [
                "bc5a69a0.b344c8"
            ]
        ]
    },
    {
        "id": "21f71d84.c38a42",
        "type": "function",
        "z": "35eb0e0e.decd62",
        "name": "RTM",
        "func": "let macAddr = global.get(\"macAddr\")\nlet serverVersion = global.get(\"serverVersion\") || \"nVersion\";\nmsg.topic =  \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"Running Scripts...\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 790,
        "y": 840,
        "wires": [
            [
                "bc5a69a0.b344c8"
            ]
        ]
    },
    {
        "id": "831e89fd.e9bdb8",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalOutputStatus/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 190,
        "y": 580,
        "wires": [
            [
                "3a2cd81e.1e4a68",
                "9da6b841.f4c968",
                "d6a15bfe.c61e38"
            ]
        ]
    },
    {
        "id": "b79e702b.37cb9",
        "type": "comment",
        "z": "ae5e2d49.68e0c",
        "name": "Digital Output Status",
        "info": "",
        "x": 110,
        "y": 540,
        "wires": []
    },
    {
        "id": "3a2cd81e.1e4a68",
        "type": "function",
        "z": "ae5e2d49.68e0c",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 580,
        "wires": [
            [
                "26aec357.11ac9c"
            ]
        ]
    },
    {
        "id": "26aec357.11ac9c",
        "type": "link out",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 795,
        "y": 580,
        "wires": []
    },
    {
        "id": "d8bddb88.a6df38",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "sess/MONICON-PLC/ENG/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "x": 140,
        "y": 320,
        "wires": [
            [
                "13f7c7dc.b548a8"
            ]
        ]
    },
    {
        "id": "13f7c7dc.b548a8",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "ENG => CMD",
        "func": "msg.topic = msg.topic.replace(\"ENG\", \"CMD\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 320,
        "wires": [
            [
                "42507731.24b4b8"
            ]
        ]
    },
    {
        "id": "59e1d325.fd73cc",
        "type": "mqtt in",
        "z": "d365aa34.8aef88",
        "name": "",
        "topic": "sess/MONICON-PLC/PUB/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "4d64fa3d.ad0334",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "80f77996.419968"
            ]
        ]
    },
    {
        "id": "80f77996.419968",
        "type": "function",
        "z": "d365aa34.8aef88",
        "name": "PUB => CMD",
        "func": "msg.topic = msg.topic.replace(\"PUB\", \"CMD\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 380,
        "wires": [
            [
                "42507731.24b4b8"
            ]
        ]
    },
    {
        "id": "6443cd7b.45d2f4",
        "type": "comment",
        "z": "d365aa34.8aef88",
        "name": "MASTER MQTT LINK",
        "info": "",
        "x": 140,
        "y": 2220,
        "wires": []
    },
    {
        "id": "6dd91713.6dca58",
        "type": "inject",
        "z": "70a1e52.9588f1c",
        "name": "Accumulator",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 170,
        "y": 100,
        "wires": [
            [
                "8546091a.346938"
            ]
        ]
    },
    {
        "id": "8546091a.346938",
        "type": "function",
        "z": "70a1e52.9588f1c",
        "name": "AccumulatorRequest 24hr",
        "func": "//var hour = new Date().getHours();\n//if (hour === 0) {\n    for (var r = 0; r < 7; r++) {\n            msg.topic = \"MONICON-PLC/CMD/AccumulatorRequest/\";\n            msg.payload = String(r);\n            node.send(msg);\n       \n    }\n    // for (var c = 0; c < 7; c++) {\n    //         msg.topic = \"MONICON-PLC/CMD/AccumulatorClear/\";\n    //         msg.payload = String(c);\n    //         node.send(msg);\n       \n    // }\n//}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 100,
        "wires": [
            [
                "f46e33ac.75e81"
            ]
        ]
    },
    {
        "id": "f798f43e.17a3b8",
        "type": "mqtt in",
        "z": "70a1e52.9588f1c",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorOne/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 240,
        "wires": [
            [
                "c2e77b5c.4ca3a8"
            ]
        ]
    },
    {
        "id": "53d98e42.babad",
        "type": "mqtt in",
        "z": "70a1e52.9588f1c",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorTwo/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 280,
        "wires": [
            [
                "c2e77b5c.4ca3a8"
            ]
        ]
    },
    {
        "id": "5e771ff5.0df85",
        "type": "mqtt in",
        "z": "70a1e52.9588f1c",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorThree/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 320,
        "wires": [
            [
                "c2e77b5c.4ca3a8"
            ]
        ]
    },
    {
        "id": "5abb14ae.d04c9c",
        "type": "mqtt in",
        "z": "70a1e52.9588f1c",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorFour/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 360,
        "wires": [
            [
                "c2e77b5c.4ca3a8"
            ]
        ]
    },
    {
        "id": "b4b71561.418178",
        "type": "mqtt in",
        "z": "70a1e52.9588f1c",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorFive/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 400,
        "wires": [
            [
                "c2e77b5c.4ca3a8"
            ]
        ]
    },
    {
        "id": "bad5b2a9.f8b2e",
        "type": "mqtt in",
        "z": "70a1e52.9588f1c",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorSix/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 250,
        "y": 440,
        "wires": [
            [
                "c2e77b5c.4ca3a8"
            ]
        ]
    },
    {
        "id": "988ebb2e.3fa938",
        "type": "mqtt in",
        "z": "70a1e52.9588f1c",
        "name": "",
        "topic": "MONICON-PLC/STAT/AccumulatorSeven/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 240,
        "y": 480,
        "wires": [
            [
                "c2e77b5c.4ca3a8"
            ]
        ]
    },
    {
        "id": "f46e33ac.75e81",
        "type": "mqtt out",
        "z": "70a1e52.9588f1c",
        "name": "",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 830,
        "y": 100,
        "wires": []
    },
    {
        "id": "c2e77b5c.4ca3a8",
        "type": "link out",
        "z": "70a1e52.9588f1c",
        "name": "Accumulators",
        "links": [
            "9660f342.3ce09"
        ],
        "x": 795,
        "y": 240,
        "wires": []
    },
    {
        "id": "9660f342.3ce09",
        "type": "link in",
        "z": "e7563fe0.8c458",
        "name": "",
        "links": [
            "c2e77b5c.4ca3a8"
        ],
        "x": 35,
        "y": 780,
        "wires": [
            [
                "4c1bf4bf.2f77dc",
                "8546c7a3.fd84e8"
            ]
        ]
    },
    {
        "id": "8546c7a3.fd84e8",
        "type": "function",
        "z": "e7563fe0.8c458",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[0]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[2]]: parseFloat(output[1])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 570,
        "y": 820,
        "wires": [
            [
                "43276d15.b14df4"
            ]
        ]
    },
    {
        "id": "4c1bf4bf.2f77dc",
        "type": "function",
        "z": "e7563fe0.8c458",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[2]]: parseFloat(output[1])\n\t\t},\n        tags:{\n            PLC: output[0] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 560,
        "y": 780,
        "wires": [
            [
                "e03009de.38ffe8"
            ]
        ]
    },
    {
        "id": "43276d15.b14df4",
        "type": "Stackhero-InfluxDB-v2-write",
        "z": "e7563fe0.8c458",
        "server": "da535876.280af8",
        "name": "SESS_ID001",
        "x": 950,
        "y": 820,
        "wires": [
            []
        ]
    },
    {
        "id": "e03009de.38ffe8",
        "type": "influxdb batch",
        "z": "e7563fe0.8c458",
        "influxdb": "4da4ea34.630684",
        "precision": "",
        "retentionPolicy": "",
        "name": "",
        "x": 1010,
        "y": 780,
        "wires": []
    },
    {
        "id": "a6fc753.e774888",
        "type": "comment",
        "z": "e7563fe0.8c458",
        "name": "Accumulators Link",
        "info": "",
        "x": 110,
        "y": 740,
        "wires": []
    },
    {
        "id": "ee957762.5dc418",
        "type": "function",
        "z": "e0f0fa16.5e06f8",
        "name": "Check Timers",
        "func": "/////////////// Splict message into an array ///////////////\n//var data = msg.payload.split(\",\");\n//data[0] = id\n//data[1] = sw\n//data[2] = type\n//data[3] = index\n//data[4] = action\n//data[5] = milliseconds(onTime)\n//data[6] = milliseconds(offTime)\n//data[7] = repeat\n//data[8] = enable\n//data[9] = RoomName/SwitchName\n\nvar digitalOutputID = 0;\n\nvar timerArray = flow.get(\"timers\") || null;\n\nif(timerArray === null) {\n    return;\n}\n\nif (Object.keys(timerArray).length === 0 ) {\n    return;\n}\n\n\nvar currentTime = new Date().getTime();\n\n/////////////// Action Manifold ///////////////\nfor (let [key, value] of Object.entries(timerArray.id)) {\n    let serial = key;\n    \n    //msg.payload = key;\n    //node.send(msg);\n    \n    for (let [key, value] of Object.entries(timerArray.id[serial].index)) {\n\n        actionSelection(value, serial);\n        \n        // msg.payload = value;\n        // node.send(msg);\n    }\n}\n\nfunction actionSelection(value, serial) {\n    if (value.action == \"On\" ) {\n    } \n    else if (value.action == \"Off\") {\n    }\n    else if (value.action == \"ON/OFF\" ) {\n        timerList(value, serial);\n    }\n}\n\nfunction timerList(value, serial) {\n    \n    if(value.type == \"LightPro\") {\n        if(value.sw == \"sw0\") {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial;\n            digitalOutputID = 0;\n        } \n        else if (value.sw == \"sw1\") {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial; \n            digitalOutputID = 1;\n        } else {\n            msg.topic = \"sess/MONICON-PLC/CMD/DigitalOutputs/\" + serial;\n            digitalOutputID = 2;\n        }\n    } else {\n        msg.topic = \"sess/MONICON-PLC/CMD/RELAY/\" + serial;\n    }\n\n    if (value.on.trig == \"1\" && checkTime(value.on.time)) {\n        if (value.repeat == \"1\") {\n            value.on.trig = \"1\";\n            value.on.time = DateCalculator(value.on.time); // Add 60 seconds\n            value.on.seconds = String(new Date(value.on.time).getTime());\n            msg.date = value.on.time;\n        } else {\n            value.on.trig = \"0\";\n        }\n        msg.id = value.id;\n        msg.name = value.name;\n        msg.payload = String(digitalOutputID) + \",\" + 1;\n        \n        flow.set(\"timers\", timerArray);\n        node.send(msg);\n    } \n    if (value.off.trig == \"1\" && checkTime(value.off.time)) {\n        if (value.repeat == \"1\") {\n            value.off.trig = \"1\";\n            value.off.time = DateCalculator(value.off.time); // Add 60 seconds\n            value.off.seconds = String(new Date(value.off.time).getTime());\n            msg.date = value.off.time;\n        } else {\n            value.off.trig = \"0\";\n        }\n        msg.id = value.id;\n        msg.name = value.name;\n        msg.payload = String(digitalOutputID) + \",\" + 0;\n\n        flow.set(\"timers\", timerArray);\n        node.send(msg);\n    } \n}\n\nfunction DateCalculator(time) {\n    //msg.payload = time\n    //return msg\n    var thisTime = new Date(time);\n    \n    thisTime.setHours(thisTime.getHours());\n    thisTime.setMinutes(thisTime.getMinutes());\n    thisTime.setSeconds(0);\n\n    //thisTime.setDate(new Date().getDate() + 1);\n    thisTime.setDate(new Date().getDate())\n    thisTime.setMonth(new Date().getMonth());\n    thisTime.setFullYear(new Date().getFullYear());\n    \n    var milliSeconds = thisTime.getTime() + 86400000;\n    \n    thisTime = new Date(milliSeconds);\n    \n    return thisTime;\n}\n\nfunction checkTime(time) {\n    if (new Date(time).getTime() < new Date().getTime()) {\n        return true\n    }\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 120,
        "wires": [
            [
                "4df781ea.b57e1"
            ]
        ]
    },
    {
        "id": "d8479c8b.c27b2",
        "type": "inject",
        "z": "e0f0fa16.5e06f8",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "str",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "ee957762.5dc418"
            ]
        ]
    },
    {
        "id": "a5972326.e61",
        "type": "comment",
        "z": "e0f0fa16.5e06f8",
        "name": "Check Existing Alarms",
        "info": "",
        "x": 140,
        "y": 60,
        "wires": []
    },
    {
        "id": "7c68cf5.2454a3",
        "type": "function",
        "z": "e0f0fa16.5e06f8",
        "name": "Create",
        "func": "/////////////// Splict message into an array ///////////////\nvar data = msg.payload.split(\",\");\n// var data = [];\n// data[0] = \"9020802\"                     //id\n// data[1] = \"sw1\"                         //sw\n// data[2] = \"LightPro\"                    //type\n// data[3] = \"0\"                           //index\n// data[4] = \"On/Off\"                      //action\n// data[5] = \"2020/04/16 19:30\"            //milliseconds(onTime)\n// data[6] = \"2020/04/16 19:32\"            //milliseconds(offTime)\n// data[7] = \"1\"                           //repeat\n// data[8] = \"1\"                           //enable\n// data[9] = \"Master Bedroom/Light\"        //RoomName/SwitchName\n\nlet t1 = new Date(new Date(parseInt(data[5])));\nlet t2 = new Date(new Date(parseInt(data[6])));\n\n// let t1 = new Date(new Date().getTime() + 300000);\n// let t2 = new Date(new Date().getTime() + 30000);\n\nvar timer = flow.get(\"timers.id[\\\"\" + data[0] + \"\\\"].index[\\\"\" + data[3] + \"\\\"]\") || { id: data[0], sw: data[1], type: data[2], index: data[3], action: data[4], on:{trig:data[8], time: t1, seconds: data[6] }, off:{trig:data[8], time: t2, seconds: data[5] }, repeat: data[7], state: data[8], name: data[9] } ; \n\ntimer = { id: data[0], sw: data[1], type: data[2], index: data[3], action: data[4], on:{trig:data[8], time: t1, seconds: data[5] }, off:{trig:data[8], time: t2, seconds: data[6] }, repeat: data[7], state: data[8], name: data[9] } ; \n\nflow.set(\"timers.id[\\\"\" + data[0] + \"\\\"].index[\\\"\" + data[3] + \"\\\"]\", timer);\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "61fd8f87.f6e56",
        "type": "function",
        "z": "e0f0fa16.5e06f8",
        "name": "Delete",
        "func": "/////////////// Splict message into an array ///////////////\nvar data = msg.payload.split(\",\");\nlet id = String(data[0])\nlet sw = data[1]\nlet index = String(data[2])\n\n/////////////// Get Timers ///////////////\nvar timer = flow.get(\"timers\") ;\n\n/////////////// Get Timer Object ///////////////\ndelete timer.id[id].index[index]\n",
        "outputs": 1,
        "noerr": 0,
        "x": 830,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "507a0c7.7419bf4",
        "type": "function",
        "z": "e0f0fa16.5e06f8",
        "name": "",
        "func": "/////////////// Get Timers ///////////////\nvar timer = flow.get(\"timers\") ;\n\n/////////////// Get Timer Object ///////////////\nvar obj = timer.id[msg.payload];\nmsg.topic = \"sess/MONICON-PLC/STAT/GetTimers/\" + msg.payload;\n\n/////////////// If Object doesn't exist, send empty object ///////////////\n// if(obj === undefined) {\n//     msg = {payload: {  }, topic: msg.topic};\n//     msg.topic = \"\"\n//     return ;\n// }\n// /////////////// Send Timer Object ///////////////\n// else {\n    var msg1 = { payload: obj, topic: msg.topic };\n\n    return msg1;\n// }",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 840,
        "y": 300,
        "wires": [
            [
                "7165fb98.d37c94"
            ]
        ]
    },
    {
        "id": "bdf1c7b2.59c348",
        "type": "mqtt in",
        "z": "e0f0fa16.5e06f8",
        "name": "",
        "topic": "MONICON-PLC/CMD/setTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 150,
        "y": 180,
        "wires": [
            [
                "3f11ffdc.d95bc"
            ]
        ]
    },
    {
        "id": "4df781ea.b57e1",
        "type": "function",
        "z": "e0f0fa16.5e06f8",
        "name": "Return Timers",
        "func": "var cmd = msg.payload.split(\",\");\nif(cmd[1] === \"1\" || cmd[1] === \"0\") {\n    // Update iOS device timer list\nvar msg1 = { payload: msg.id, topic: \"sess/MONICON-PLC/CMD/GetTimers/\" };\n    // Send Notification to user\nvar msg2 = { payload: msg.id + \",MONICON,\" + msg.name + \",\" + msg.payload, topic: \"sess/MONICON-PLC/STAT/Timers/Alert/\" };\n    // Send Command to Monicon device\nvar msg3 = { payload: msg.payload, topic: msg.topic };\n\nreturn [msg1, msg2, msg3]\n\n}\n\nreturn",
        "outputs": 3,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 860,
        "y": 120,
        "wires": [
            [
                "2edd2e4d.c38122"
            ],
            [
                "2edd2e4d.c38122"
            ],
            [
                "2edd2e4d.c38122"
            ]
        ]
    },
    {
        "id": "e6e73c2d.db1d8",
        "type": "mqtt in",
        "z": "e0f0fa16.5e06f8",
        "name": "",
        "topic": "MONICON-PLC/CMD/DeleteTimer/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 160,
        "y": 240,
        "wires": [
            [
                "634db9a7.51a268"
            ]
        ]
    },
    {
        "id": "c4862adf.68ff28",
        "type": "mqtt in",
        "z": "e0f0fa16.5e06f8",
        "name": "",
        "topic": "MONICON-PLC/CMD/GetTimers/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 170,
        "y": 300,
        "wires": [
            [
                "b2501808.7d1fb8"
            ]
        ]
    },
    {
        "id": "79c1feb7.c8308",
        "type": "delay",
        "z": "e0f0fa16.5e06f8",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 660,
        "y": 300,
        "wires": [
            [
                "507a0c7.7419bf4"
            ]
        ]
    },
    {
        "id": "7165fb98.d37c94",
        "type": "json",
        "z": "e0f0fa16.5e06f8",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 970,
        "y": 300,
        "wires": [
            [
                "2edd2e4d.c38122"
            ]
        ]
    },
    {
        "id": "2edd2e4d.c38122",
        "type": "link out",
        "z": "e0f0fa16.5e06f8",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 1135,
        "y": 120,
        "wires": []
    },
    {
        "id": "e54ec176.07282",
        "type": "inject",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "0,1",
        "payloadType": "str",
        "x": 110,
        "y": 800,
        "wires": [
            [
                "a489b4de.8ff268",
                "721e5d5.83a4ea4"
            ]
        ]
    },
    {
        "id": "a489b4de.8ff268",
        "type": "mqtt out",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/CMD/pubDigitalInputsEnable/4164319659",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 630,
        "y": 860,
        "wires": []
    },
    {
        "id": "2600bed0.69d692",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_00/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 80,
        "wires": [
            [
                "e7b7619.aafeea",
                "ddffcaca.32d758",
                "80d5d720.c7c4b8"
            ]
        ]
    },
    {
        "id": "8f4a1e1b.f7606",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_01/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 140,
        "wires": [
            [
                "e7b7619.aafeea",
                "ddffcaca.32d758",
                "80d5d720.c7c4b8"
            ]
        ]
    },
    {
        "id": "417bddd1.20d724",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_02/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 200,
        "wires": [
            [
                "e7b7619.aafeea",
                "ddffcaca.32d758",
                "80d5d720.c7c4b8"
            ]
        ]
    },
    {
        "id": "7d63d367.278b6c",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_03/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 260,
        "wires": [
            [
                "e7b7619.aafeea",
                "ddffcaca.32d758",
                "80d5d720.c7c4b8"
            ]
        ]
    },
    {
        "id": "f9fd9d8b.d11cb",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_04/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 320,
        "wires": [
            [
                "e7b7619.aafeea",
                "ddffcaca.32d758",
                "80d5d720.c7c4b8"
            ]
        ]
    },
    {
        "id": "d53aa2a3.7421d",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_05/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 380,
        "wires": [
            [
                "e7b7619.aafeea",
                "ddffcaca.32d758",
                "80d5d720.c7c4b8"
            ]
        ]
    },
    {
        "id": "fa54c1ad.2d7ce",
        "type": "mqtt in",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/STAT/DigitalInputStatus/DI_06/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 1280,
        "y": 440,
        "wires": [
            [
                "e7b7619.aafeea",
                "ddffcaca.32d758",
                "80d5d720.c7c4b8"
            ]
        ]
    },
    {
        "id": "f8730bae.428b48",
        "type": "comment",
        "z": "ae5e2d49.68e0c",
        "name": "Digital Input - Status Change",
        "info": "",
        "x": 1220,
        "y": 40,
        "wires": []
    },
    {
        "id": "e7b7619.aafeea",
        "type": "function",
        "z": "ae5e2d49.68e0c",
        "name": "Prefex(USER)",
        "func": "msg.topic = \"sess/\" + msg.topic;\nmsg.topic = msg.topic.replace(\"DigitalInputStatus\", \"DigitalInputs\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 80,
        "wires": [
            [
                "e31f862a.4be1a8"
            ]
        ]
    },
    {
        "id": "e31f862a.4be1a8",
        "type": "link out",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 1875,
        "y": 80,
        "wires": []
    },
    {
        "id": "721e5d5.83a4ea4",
        "type": "mqtt out",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "topic": "MONICON-PLC/CMD/pubDigitalInputsEnable/1010989483",
        "qos": "",
        "retain": "",
        "broker": "5fca9504.17508c",
        "x": 630,
        "y": 800,
        "wires": []
    },
    {
        "id": "be3976b4.509528",
        "type": "comment",
        "z": "ae5e2d49.68e0c",
        "name": "Enable Digital Status Change Publishing",
        "info": "",
        "x": 180,
        "y": 760,
        "wires": []
    },
    {
        "id": "422195f7.3092cc",
        "type": "comment",
        "z": "e7563fe0.8c458",
        "name": "------- Global Logging Connection ------- ",
        "info": "",
        "x": 170,
        "y": 900,
        "wires": []
    },
    {
        "id": "6bce8530.40625c",
        "type": "comment",
        "z": "e7563fe0.8c458",
        "name": "Remote FluxDb Link",
        "info": "",
        "x": 150,
        "y": 1020,
        "wires": []
    },
    {
        "id": "d6a15bfe.c61e38",
        "type": "function",
        "z": "ae5e2d49.68e0c",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[3]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tDigital_00: parseFloat(output[0]),\n\t\t\t\tDigital_01: parseFloat(output[1]),\n\t\t\t\tDigital_02: parseFloat(output[2])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 660,
        "wires": [
            [
                "377877ea.af4428"
            ]
        ]
    },
    {
        "id": "9da6b841.f4c968",
        "type": "function",
        "z": "ae5e2d49.68e0c",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\tDigitalOutput_00: parseFloat(output[0]),\n\t\t\tDigitalOutput_01: parseFloat(output[1]),\n\t\t\tDigitalOutput_02: parseFloat(output[2])\n\t\t},\n        tags:{\n            PLC: output[3] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 620,
        "wires": [
            [
                "5e2df02a.f63e7"
            ]
        ]
    },
    {
        "id": "5e2df02a.f63e7",
        "type": "link out",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "links": [
            "abb189e3.b4abc8"
        ],
        "x": 795,
        "y": 620,
        "wires": []
    },
    {
        "id": "377877ea.af4428",
        "type": "link out",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "links": [
            "8bc1c50e.825288"
        ],
        "x": 795,
        "y": 660,
        "wires": []
    },
    {
        "id": "3c90cd6.35b6532",
        "type": "comment",
        "z": "ae5e2d49.68e0c",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 940,
        "y": 580,
        "wires": []
    },
    {
        "id": "28d3b839.9cdef8",
        "type": "comment",
        "z": "ae5e2d49.68e0c",
        "name": "Database | Local",
        "info": "",
        "x": 900,
        "y": 620,
        "wires": []
    },
    {
        "id": "38222a27.38f466",
        "type": "comment",
        "z": "ae5e2d49.68e0c",
        "name": "Database | Remote",
        "info": "",
        "x": 910,
        "y": 660,
        "wires": []
    },
    {
        "id": "80d5d720.c7c4b8",
        "type": "function",
        "z": "ae5e2d49.68e0c",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[1]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1750,
        "y": 440,
        "wires": [
            [
                "bf5396be.445188"
            ]
        ]
    },
    {
        "id": "ddffcaca.32d758",
        "type": "function",
        "z": "ae5e2d49.68e0c",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            PLC: output[1] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1740,
        "y": 260,
        "wires": [
            [
                "3dadfec1.d1ed12"
            ]
        ]
    },
    {
        "id": "3dadfec1.d1ed12",
        "type": "link out",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "links": [
            "abb189e3.b4abc8"
        ],
        "x": 1875,
        "y": 260,
        "wires": []
    },
    {
        "id": "bf5396be.445188",
        "type": "link out",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "links": [
            "8bc1c50e.825288"
        ],
        "x": 1875,
        "y": 440,
        "wires": []
    },
    {
        "id": "a438f12.7108e1",
        "type": "comment",
        "z": "ae5e2d49.68e0c",
        "name": "Database | Local",
        "info": "",
        "x": 1980,
        "y": 260,
        "wires": []
    },
    {
        "id": "39214f19.28f72",
        "type": "comment",
        "z": "ae5e2d49.68e0c",
        "name": "Database | Remote",
        "info": "",
        "x": 1990,
        "y": 440,
        "wires": []
    },
    {
        "id": "dfcff7d9.7a8cd8",
        "type": "comment",
        "z": "ae5e2d49.68e0c",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 2020,
        "y": 80,
        "wires": []
    },
    {
        "id": "47057744.907408",
        "type": "function",
        "z": "ae5e2d49.68e0c",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tdatabaseID: output[1]\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 670,
        "y": 440,
        "wires": [
            [
                "82e0df3a.50ae7"
            ]
        ]
    },
    {
        "id": "82c0b22.c56385",
        "type": "function",
        "z": "ae5e2d49.68e0c",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"Monicon-Local-DB\",\n\n        fields: {\n\t\t\t[topic[3]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            PLC: output[1] || \"MoniconPLC-1\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 660,
        "y": 260,
        "wires": [
            [
                "16251cb3.026963"
            ]
        ]
    },
    {
        "id": "16251cb3.026963",
        "type": "link out",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "links": [
            "abb189e3.b4abc8"
        ],
        "x": 795,
        "y": 260,
        "wires": []
    },
    {
        "id": "82e0df3a.50ae7",
        "type": "link out",
        "z": "ae5e2d49.68e0c",
        "name": "",
        "links": [
            "8bc1c50e.825288"
        ],
        "x": 795,
        "y": 440,
        "wires": []
    },
    {
        "id": "c3aaa0af.1aa82",
        "type": "comment",
        "z": "ae5e2d49.68e0c",
        "name": "Database | Local",
        "info": "",
        "x": 900,
        "y": 260,
        "wires": []
    },
    {
        "id": "f5e86569.4e8c68",
        "type": "comment",
        "z": "ae5e2d49.68e0c",
        "name": "Database | Remote",
        "info": "",
        "x": 910,
        "y": 440,
        "wires": []
    },
    {
        "id": "fa89f799.9bc888",
        "type": "comment",
        "z": "ae5e2d49.68e0c",
        "name": "MQTT Broker Local | Remote",
        "info": "",
        "x": 940,
        "y": 80,
        "wires": []
    },
    {
        "id": "8a33e70b.1ab0f8",
        "type": "inject",
        "z": "ece5ea71.278258",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "20",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "Server_Heartbeat",
        "payload": "*",
        "payloadType": "str",
        "x": 160,
        "y": 140,
        "wires": [
            [
                "7801f411.ffb7fc",
                "2905173d.b98f58"
            ]
        ]
    },
    {
        "id": "7801f411.ffb7fc",
        "type": "trigger",
        "z": "ece5ea71.278258",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0.250",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 600,
        "y": 180,
        "wires": [
            [
                "65723d2f.1b3c24",
                "a23389b1.7056e8"
            ]
        ]
    },
    {
        "id": "65723d2f.1b3c24",
        "type": "rpi-gpio out",
        "z": "ece5ea71.278258",
        "name": "Heartbeat Server - GPIO18",
        "pin": "12",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1040,
        "y": 180,
        "wires": []
    },
    {
        "id": "ee8ac28.27eec4",
        "type": "mqtt in",
        "z": "ece5ea71.278258",
        "name": "",
        "topic": "MONICON-PLC/CMD/Heartbeat/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "5fca9504.17508c",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "e558ab9.edf0c58"
            ]
        ]
    },
    {
        "id": "648cfc1e.c824b4",
        "type": "trigger",
        "z": "ece5ea71.278258",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "2.5",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 590,
        "y": 300,
        "wires": [
            [
                "723a2b13.e686f4"
            ]
        ]
    },
    {
        "id": "d37f4d72.62d17",
        "type": "comment",
        "z": "ece5ea71.278258",
        "name": "Watchdog Timer Supervisor - Server Heartbeat",
        "info": "",
        "x": 220,
        "y": 40,
        "wires": []
    },
    {
        "id": "4ae35bfa.d67f54",
        "type": "comment",
        "z": "ece5ea71.278258",
        "name": "Watchdog Timer Supervisor - Server Heartbeat",
        "info": "",
        "x": 220,
        "y": 260,
        "wires": []
    },
    {
        "id": "1b0bd31.581e02d",
        "type": "function",
        "z": "ece5ea71.278258",
        "name": "Remote Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\nlet siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tSystem: \"Heartbeat\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\t[topic[0]]: parseFloat(output[0])\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 300,
        "wires": [
            [
                "52944acb.6a3a64"
            ]
        ]
    },
    {
        "id": "48ef9a08.2fc324",
        "type": "function",
        "z": "ece5ea71.278258",
        "name": "Local Database",
        "func": "var output = msg.payload.split(\",\");\nvar topic = msg.topic.split(\"/\");\n\nmsg.payload = [\n    {\n        measurement: \"OS\",\n\n        fields: {\n\t\t\t[topic[0]]: parseFloat(output[0])\n\t\t},\n        tags:{\n            System: \"Heartbeat\"\n        },\n        //timestamp: Date.now()\n    }];\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1000,
        "y": 240,
        "wires": [
            [
                "7f25ac6d.763a14"
            ]
        ]
    },
    {
        "id": "7f25ac6d.763a14",
        "type": "link out",
        "z": "ece5ea71.278258",
        "name": "",
        "links": [
            "abb189e3.b4abc8"
        ],
        "x": 1135,
        "y": 240,
        "wires": []
    },
    {
        "id": "52944acb.6a3a64",
        "type": "link out",
        "z": "ece5ea71.278258",
        "name": "",
        "links": [
            "8bc1c50e.825288"
        ],
        "x": 1135,
        "y": 300,
        "wires": []
    },
    {
        "id": "a846eb0c.45efd8",
        "type": "comment",
        "z": "ece5ea71.278258",
        "name": "Database | Local",
        "info": "",
        "x": 1240,
        "y": 240,
        "wires": []
    },
    {
        "id": "53d0dd52.b032c4",
        "type": "comment",
        "z": "ece5ea71.278258",
        "name": "Database | Remote",
        "info": "",
        "x": 1250,
        "y": 300,
        "wires": []
    },
    {
        "id": "723a2b13.e686f4",
        "type": "function",
        "z": "ece5ea71.278258",
        "name": "Formatting",
        "func": "msg.topic = \"PLC_Heartbeat\";\nflow.set(\"PLC_Heartbeat\", \"1\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 300,
        "wires": [
            [
                "48ef9a08.2fc324",
                "1b0bd31.581e02d"
            ]
        ]
    },
    {
        "id": "a23389b1.7056e8",
        "type": "function",
        "z": "ece5ea71.278258",
        "name": "Formatting",
        "func": "return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 780,
        "y": 240,
        "wires": [
            [
                "1b0bd31.581e02d",
                "48ef9a08.2fc324"
            ]
        ]
    },
    {
        "id": "e558ab9.edf0c58",
        "type": "function",
        "z": "ece5ea71.278258",
        "name": "MoniconPLC-1",
        "func": "if(msg.payload == \"MoniconPLC-1\") {\n    return msg;\n} else {\n    return;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 420,
        "y": 300,
        "wires": [
            [
                "648cfc1e.c824b4"
            ]
        ]
    },
    {
        "id": "b9218c2a.d6909",
        "type": "trigger",
        "z": "ece5ea71.278258",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "0.250",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 780,
        "y": 80,
        "wires": [
            [
                "65723d2f.1b3c24"
            ]
        ]
    },
    {
        "id": "2905173d.b98f58",
        "type": "delay",
        "z": "ece5ea71.278258",
        "name": "",
        "pauseType": "delay",
        "timeout": "750",
        "timeoutUnits": "milliseconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 590,
        "y": 140,
        "wires": [
            [
                "b9218c2a.d6909"
            ]
        ]
    },
    {
        "id": "38e02152.51048e",
        "type": "rpi-gpio out",
        "z": "ece5ea71.278258",
        "name": "Heartbeat Server - GPIO18",
        "pin": "12",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1240,
        "y": 560,
        "wires": []
    },
    {
        "id": "470066ae.83b008",
        "type": "trigger",
        "z": "ece5ea71.278258",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "10",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 830,
        "y": 560,
        "wires": [
            [
                "38e02152.51048e",
                "eaf8f416.8cacb8",
                "1cef36bd.2569a9"
            ]
        ]
    },
    {
        "id": "9dee59c4.7e5558",
        "type": "rpi-gpio in",
        "z": "ece5ea71.278258",
        "name": "Safe Shutdown - Panel Button GPIO16",
        "pin": "36",
        "intype": "up",
        "debounce": "25",
        "read": false,
        "x": 190,
        "y": 640,
        "wires": [
            [
                "98306e86.2449",
                "6949082a.a734c8"
            ]
        ]
    },
    {
        "id": "98306e86.2449",
        "type": "delay",
        "z": "ece5ea71.278258",
        "name": "",
        "pauseType": "delay",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 640,
        "y": 560,
        "wires": [
            [
                "470066ae.83b008"
            ]
        ]
    },
    {
        "id": "8dcf8710.9595a8",
        "type": "function",
        "z": "ece5ea71.278258",
        "name": "Reset",
        "func": "msg.reset = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 410,
        "y": 560,
        "wires": [
            [
                "98306e86.2449"
            ]
        ]
    },
    {
        "id": "f18e8fc8.f14a7",
        "type": "delay",
        "z": "ece5ea71.278258",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 280,
        "y": 560,
        "wires": [
            [
                "8dcf8710.9595a8"
            ]
        ]
    },
    {
        "id": "6949082a.a734c8",
        "type": "function",
        "z": "ece5ea71.278258",
        "name": "Reset",
        "func": "if (msg.payload === 0) {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "f18e8fc8.f14a7"
            ]
        ]
    },
    {
        "id": "888a5e21.12a11",
        "type": "exec",
        "z": "ece5ea71.278258",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Shutdown Pi",
        "x": 1190,
        "y": 640,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "eaf8f416.8cacb8",
        "type": "delay",
        "z": "ece5ea71.278258",
        "name": "",
        "pauseType": "delay",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 1020,
        "y": 640,
        "wires": [
            [
                "888a5e21.12a11"
            ]
        ]
    },
    {
        "id": "a836cf94.e0727",
        "type": "link out",
        "z": "ece5ea71.278258",
        "name": "Reset",
        "links": [
            "738b6d8f.321224"
        ],
        "x": 1135,
        "y": 500,
        "wires": []
    },
    {
        "id": "1cef36bd.2569a9",
        "type": "function",
        "z": "ece5ea71.278258",
        "name": "Reset",
        "func": "msg.reset = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 1010,
        "y": 500,
        "wires": [
            [
                "a836cf94.e0727"
            ]
        ]
    },
    {
        "id": "738b6d8f.321224",
        "type": "link in",
        "z": "ece5ea71.278258",
        "name": "",
        "links": [
            "a836cf94.e0727"
        ],
        "x": 255,
        "y": 80,
        "wires": [
            [
                "2905173d.b98f58",
                "7801f411.ffb7fc",
                "b9218c2a.d6909"
            ]
        ]
    },
    {
        "id": "20e1c49f.ea6e3c",
        "type": "comment",
        "z": "ece5ea71.278258",
        "name": "Reset",
        "info": "",
        "x": 170,
        "y": 80,
        "wires": []
    },
    {
        "id": "b172b5c4.7ef818",
        "type": "comment",
        "z": "ece5ea71.278258",
        "name": "Reset",
        "info": "",
        "x": 1210,
        "y": 500,
        "wires": []
    },
    {
        "id": "782bddd3.f99cf4",
        "type": "rpi-gpio out",
        "z": "ece5ea71.278258",
        "name": "Fan - GPIO12",
        "pin": "32",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 1200,
        "y": 780,
        "wires": []
    },
    {
        "id": "7d9e4f6a.10e94",
        "type": "comment",
        "z": "ece5ea71.278258",
        "name": "Fan Temperature Control - OS Output",
        "info": "",
        "x": 190,
        "y": 740,
        "wires": []
    },
    {
        "id": "f67de1e7.9a655",
        "type": "link in",
        "z": "ece5ea71.278258",
        "name": "Fan Controller",
        "links": [
            "4df6766.7dbdc88"
        ],
        "x": 55,
        "y": 780,
        "wires": [
            [
                "5076f5b7.d9c6ec"
            ]
        ]
    },
    {
        "id": "5076f5b7.d9c6ec",
        "type": "function",
        "z": "ece5ea71.278258",
        "name": "Temperature Threshold",
        "func": "// Check Temperature Thresholds\nif (msg.payload > 55) {\n    msg.payload = 1;\n    return msg;\n} else if (msg.payload < 50) {\n    msg.payload = 0; \n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 390,
        "y": 780,
        "wires": [
            [
                "782bddd3.f99cf4"
            ]
        ]
    },
    {
        "id": "cbaca6db.841688",
        "type": "trigger",
        "z": "35eb0e0e.decd62",
        "name": "",
        "op1": "1",
        "op2": "0",
        "op1type": "str",
        "op2type": "str",
        "duration": "1",
        "extend": false,
        "units": "s",
        "reset": "",
        "bytopic": "all",
        "topic": "topic",
        "outputs": 1,
        "x": 800,
        "y": 540,
        "wires": [
            [
                "b400755a.4bbc38"
            ]
        ]
    },
    {
        "id": "681519e8.35f988",
        "type": "comment",
        "z": "35eb0e0e.decd62",
        "name": "Remote Reboot CMD - Esp32 Physical Reboot",
        "info": "",
        "x": 200,
        "y": 520,
        "wires": []
    },
    {
        "id": "63855581.15f19c",
        "type": "mqtt in",
        "z": "35eb0e0e.decd62",
        "name": "",
        "topic": "sess/MONICON-PLC/CMD/APM/#",
        "qos": "2",
        "datatype": "auto",
        "broker": "dba358e0.ff7ca8",
        "x": 160,
        "y": 560,
        "wires": [
            [
                "7b7af2e2.59fbac"
            ]
        ]
    },
    {
        "id": "7b7af2e2.59fbac",
        "type": "function",
        "z": "35eb0e0e.decd62",
        "name": "Check Server macAddr",
        "func": "let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(serialID != macAddr) {\n    return\n}\n\nvar msg1 = {payload: \"*\", topic: \"MONICON-PLC/CMD/APM/\" + msg.payload};\n\nmsg.topic = \"sess/MONICON-PLC/STAT/RespondMessages/\" + macAddr;\nmsg.payload = \"PLC Reboot was Successful.\"\n\nreturn [msg, msg1];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 550,
        "y": 560,
        "wires": [
            [
                "cbaca6db.841688"
            ],
            [
                "247819b.787bde6"
            ]
        ]
    },
    {
        "id": "b400755a.4bbc38",
        "type": "link out",
        "z": "35eb0e0e.decd62",
        "name": "",
        "links": [
            "c260f821.25d778"
        ],
        "x": 1015,
        "y": 540,
        "wires": []
    },
    {
        "id": "247819b.787bde6",
        "type": "mqtt out",
        "z": "35eb0e0e.decd62",
        "name": "MQTT Local",
        "topic": "",
        "qos": "",
        "retain": "",
        "broker": "dba358e0.ff7ca8",
        "x": 810,
        "y": 580,
        "wires": []
    },
    {
        "id": "b2501808.7d1fb8",
        "type": "function",
        "z": "e0f0fa16.5e06f8",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 300,
        "wires": [
            [
                "79c1feb7.c8308"
            ]
        ]
    },
    {
        "id": "634db9a7.51a268",
        "type": "function",
        "z": "e0f0fa16.5e06f8",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 240,
        "wires": [
            [
                "61fd8f87.f6e56"
            ]
        ]
    },
    {
        "id": "3f11ffdc.d95bc",
        "type": "function",
        "z": "e0f0fa16.5e06f8",
        "name": "Check macAddr",
        "func": "var topicMacAddr = msg.topic.split('/');\n\n//let serialID = msg.topic.substring(msg.topic.lastIndexOf('/') + 1, msg.topic.length)\nlet macAddr = global.get(\"macAddr\") || 1;\nif(topicMacAddr[3] != macAddr) {\n    return;\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 460,
        "y": 180,
        "wires": [
            [
                "7c68cf5.2454a3"
            ]
        ]
    },
    {
        "id": "9c3a8f81.31952",
        "type": "function",
        "z": "35eb0e0e.decd62",
        "name": "Set Server Version",
        "func": "// eg. \"MONICON-PLC_ServerV0.1.1\"\nglobal.set(\"serverVersion\", msg.payload);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 80,
        "wires": [
            [
                "4cf02854.fcac38"
            ]
        ]
    },
    {
        "id": "faee5ab3.900858",
        "type": "function",
        "z": "35eb0e0e.decd62",
        "name": "Set macAddr",
        "func": "var macAddr = msg.payload.replace(/\\W/g,\"\");\nglobal.set(\"macAddr\", macAddr);\n\nreturn\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 970,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "4cf02854.fcac38",
        "type": "exec",
        "z": "35eb0e0e.decd62",
        "command": "cat /sys/class/net/eth0/address",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "MAC Addr",
        "x": 770,
        "y": 80,
        "wires": [
            [
                "faee5ab3.900858"
            ],
            [],
            []
        ]
    },
    {
        "id": "4df6766.7dbdc88",
        "type": "link out",
        "z": "d5b77494.f7aea8",
        "name": "",
        "links": [
            "f67de1e7.9a655"
        ],
        "x": 835,
        "y": 460,
        "wires": []
    },
    {
        "id": "122d0eb4.f29e11",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Remote Database",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tSystem: \"macAddr\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tmacAddr: \"\\\"\" + msg.payload + \"\\\"\"\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 830,
        "y": 760,
        "wires": [
            [
                "d819a2b6.7e531"
            ]
        ]
    },
    {
        "id": "aab60378.de0da",
        "type": "debug",
        "z": "fca1ea39.ff1f18",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 460,
        "y": 140,
        "wires": []
    },
    {
        "id": "8007f62.2e5d108",
        "type": "rpi-gpio out",
        "z": "ece5ea71.278258",
        "name": "SIXFAB HAT POWER PIN - GPIO26",
        "pin": "37",
        "set": true,
        "level": "0",
        "freq": "",
        "out": "out",
        "x": 770,
        "y": 960,
        "wires": []
    },
    {
        "id": "6ef0bd99.1e30f4",
        "type": "http request",
        "z": "ece5ea71.278258",
        "name": "Internet Check",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "http://gogle.com",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 280,
        "y": 900,
        "wires": [
            [
                "f72a9b5a.4f4038"
            ]
        ]
    },
    {
        "id": "34f93ea4.dea532",
        "type": "inject",
        "z": "ece5ea71.278258",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 110,
        "y": 900,
        "wires": [
            [
                "6ef0bd99.1e30f4"
            ]
        ]
    },
    {
        "id": "f72a9b5a.4f4038",
        "type": "function",
        "z": "ece5ea71.278258",
        "name": "Reset SIXFAB HAT",
        "func": "if(msg.statusCode != 200) {\n    msg.payload = 1;\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 900,
        "wires": [
            [
                "8007f62.2e5d108",
                "7ca7b3ea.36d54c"
            ]
        ]
    },
    {
        "id": "44f2790.3578188",
        "type": "exec",
        "z": "ece5ea71.278258",
        "command": "sudo reboot",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Reboot",
        "x": 1180,
        "y": 900,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "8c316eff.1d25c",
        "type": "comment",
        "z": "ece5ea71.278258",
        "name": "Check Internet Connection every Hour",
        "info": "",
        "x": 190,
        "y": 860,
        "wires": []
    },
    {
        "id": "7ca7b3ea.36d54c",
        "type": "delay",
        "z": "ece5ea71.278258",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "x": 680,
        "y": 900,
        "wires": [
            [
                "8d9696fa.72d0d8"
            ]
        ]
    },
    {
        "id": "8d9696fa.72d0d8",
        "type": "exec",
        "z": "ece5ea71.278258",
        "command": "echo '1-1' |sudo tee /sys/bus/usb/drivers/usb/unbind",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Unbind",
        "x": 860,
        "y": 900,
        "wires": [
            [
                "db042854.8fe7c8"
            ],
            [],
            []
        ]
    },
    {
        "id": "db042854.8fe7c8",
        "type": "exec",
        "z": "ece5ea71.278258",
        "command": "echo '1-1' |sudo tee /sys/bus/usb/drivers/usb/bind",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Bind",
        "x": 1010,
        "y": 900,
        "wires": [
            [
                "44f2790.3578188"
            ],
            [],
            []
        ]
    },
    {
        "id": "25b0a2e7.1ebdbe",
        "type": "comment",
        "z": "ece5ea71.278258",
        "name": "Safe Shutdown - Button Input",
        "info": "",
        "x": 160,
        "y": 380,
        "wires": []
    },
    {
        "id": "629cdb38.edc0d4",
        "type": "inject",
        "z": "ece5ea71.278258",
        "name": "Check Heartbeat else Reboot",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "3600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "1",
        "payloadType": "str",
        "x": 190,
        "y": 420,
        "wires": [
            [
                "38454cff.99e804"
            ]
        ]
    },
    {
        "id": "38454cff.99e804",
        "type": "function",
        "z": "ece5ea71.278258",
        "name": "Formatting",
        "func": "var HB = flow.get(\"PLC_Heartbeat\");\nif (HB === \"1\") {\n    flow.set(\"PLC_Heartbeat\", \"0\");\n} else {\n    return msg;\n}\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 770,
        "y": 420,
        "wires": [
            [
                "754f825f.b7226c"
            ]
        ]
    },
    {
        "id": "754f825f.b7226c",
        "type": "exec",
        "z": "ece5ea71.278258",
        "command": "sudo shutdown -h now",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "Shutdown Pi",
        "x": 1190,
        "y": 420,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "65b7f852.1468d8",
        "type": "inject",
        "z": "7887b7b3.70ac08",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "86400",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "89dd3f32.c0bd7"
            ]
        ]
    },
    {
        "id": "89dd3f32.c0bd7",
        "type": "function",
        "z": "7887b7b3.70ac08",
        "name": "Dumy Email",
        "func": "msg = {\n    payload: \"48hr activity notification email.\",\n    topic: \"Ignore\",\n    to: \"monicon.sess@gmail.com\",\n    cc: \"\",\n    bcc: \"\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 530,
        "y": 360,
        "wires": [
            [
                "be5d96a4.aff208"
            ]
        ]
    },
    {
        "id": "be5d96a4.aff208",
        "type": "e-mail",
        "z": "7887b7b3.70ac08",
        "server": "smtp.gmail.com",
        "port": "465",
        "secure": true,
        "tls": true,
        "name": "",
        "dname": "monicon.sess@gmail.com",
        "x": 940,
        "y": 160,
        "wires": []
    },
    {
        "id": "18fe345f.e40e0c",
        "type": "exec",
        "z": "d5b77494.f7aea8",
        "command": "",
        "addpay": true,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "",
        "x": 550,
        "y": 880,
        "wires": [
            [
                "2b70ddc8.fd1012"
            ],
            [],
            []
        ]
    },
    {
        "id": "64d67d85.8641d4",
        "type": "inject",
        "z": "d5b77494.f7aea8",
        "name": "10 Mins",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "600",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 880,
        "wires": [
            [
                "c2107285.e2c0a"
            ]
        ]
    },
    {
        "id": "abb287af.8a2e68",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "Remote Database",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\n\nstructureObject();\n\nreturn msg;\n        \nfunction structureObject() {\n\tmsg.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\t//Info: msg.topic,\n\t\t\t\tSystem: \"gsm_signal\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tgsm_signal: parseInt(msg.payload.replace(/\\s+/g, ' ').trim())\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 930,
        "y": 880,
        "wires": [
            [
                "d819a2b6.7e531"
            ]
        ]
    },
    {
        "id": "2b70ddc8.fd1012",
        "type": "string",
        "z": "d5b77494.f7aea8",
        "name": "",
        "methods": [
            {
                "name": "getRightMost",
                "params": [
                    {
                        "type": "str",
                        "value": ":"
                    }
                ]
            },
            {
                "name": "getLeftMost",
                "params": [
                    {
                        "type": "str",
                        "value": ","
                    }
                ]
            }
        ],
        "prop": "payload",
        "propout": "payload",
        "object": "msg",
        "objectout": "msg",
        "x": 750,
        "y": 880,
        "wires": [
            [
                "abb287af.8a2e68"
            ]
        ]
    },
    {
        "id": "c2107285.e2c0a",
        "type": "function",
        "z": "d5b77494.f7aea8",
        "name": "",
        "func": "msg.payload = \"sudo python3 /home/pi/sixfab/Sixfab_RPi_CellularIoT_Library/sixfab.py\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 380,
        "y": 880,
        "wires": [
            [
                "18fe345f.e40e0c"
            ]
        ]
    },
    {
        "id": "f2234e36.9508a",
        "type": "exec",
        "z": "7887b7b3.70ac08",
        "command": "sudo poff -a",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "poff",
        "x": 250,
        "y": 480,
        "wires": [
            [
                "47364ea7.3007b"
            ],
            [],
            []
        ]
    },
    {
        "id": "e62e95ac.5533d8",
        "type": "inject",
        "z": "7887b7b3.70ac08",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 110,
        "y": 480,
        "wires": [
            [
                "f2234e36.9508a"
            ]
        ]
    },
    {
        "id": "47364ea7.3007b",
        "type": "exec",
        "z": "7887b7b3.70ac08",
        "command": "sudo route del default",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "del default gw",
        "x": 420,
        "y": 480,
        "wires": [
            [
                "2cacb01f.78a0f"
            ],
            [],
            []
        ]
    },
    {
        "id": "64c8498c.3cbbe8",
        "type": "comment",
        "z": "7887b7b3.70ac08",
        "name": "Disables ppp0",
        "info": "",
        "x": 110,
        "y": 440,
        "wires": []
    },
    {
        "id": "2cacb01f.78a0f",
        "type": "exec",
        "z": "7887b7b3.70ac08",
        "command": "sudo systemctl stop ppp_connection_manager.service",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "stop ppp0 service",
        "x": 630,
        "y": 480,
        "wires": [
            [
                "f3cdd4c7.e12ef8"
            ],
            [],
            []
        ]
    },
    {
        "id": "731fc477.8313ec",
        "type": "inject",
        "z": "7887b7b3.70ac08",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "*",
        "payloadType": "str",
        "x": 110,
        "y": 580,
        "wires": [
            [
                "3055f4a5.71caec"
            ]
        ]
    },
    {
        "id": "a0721612.a90368",
        "type": "comment",
        "z": "7887b7b3.70ac08",
        "name": "Enable ppp0",
        "info": "",
        "x": 110,
        "y": 540,
        "wires": []
    },
    {
        "id": "3055f4a5.71caec",
        "type": "exec",
        "z": "7887b7b3.70ac08",
        "command": "sudo systemctl start ppp_connection_manager.service",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "restart ppp0 service",
        "x": 290,
        "y": 580,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "f3cdd4c7.e12ef8",
        "type": "exec",
        "z": "7887b7b3.70ac08",
        "command": "sudo systemctl restart dhcpcd",
        "addpay": false,
        "append": "",
        "useSpawn": "false",
        "timer": "",
        "oldrc": false,
        "name": "restart dhcp server",
        "x": 850,
        "y": 480,
        "wires": [
            [],
            [],
            []
        ]
    },
    {
        "id": "3d1cb1fd.ccc41e",
        "type": "modbus-server",
        "z": "d85313a8.b3b8e",
        "name": "",
        "logEnabled": false,
        "hostname": "192.168.1.222",
        "serverPort": "502",
        "responseDelay": 100,
        "delayUnit": "ms",
        "coilsBufferSize": 10000,
        "holdingBufferSize": 10000,
        "inputBufferSize": 10000,
        "discreteBufferSize": 10000,
        "showErrors": false,
        "x": 220,
        "y": 120,
        "wires": [
            [],
            [],
            [],
            [],
            []
        ]
    },
    {
        "id": "5cc64d24.d1d8a4",
        "type": "modbus-read",
        "z": "d85313a8.b3b8e",
        "name": "SESS Modbus FC 3",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "0",
        "quantity": "10",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": true,
        "startDelayTime": "10",
        "server": "d508e07e.f4bc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 250,
        "y": 280,
        "wires": [
            [
                "7b4a6ff2.d0d65"
            ],
            []
        ]
    },
    {
        "id": "47f3724d.0b895c",
        "type": "modbus-read",
        "z": "d85313a8.b3b8e",
        "name": "SESS Modbus FC 1",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "0",
        "quantity": "15",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": true,
        "startDelayTime": "10",
        "server": "d508e07e.f4bc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 250,
        "y": 220,
        "wires": [
            [
                "15db9c49.100a94"
            ],
            []
        ]
    },
    {
        "id": "a67ed57a.f15058",
        "type": "function",
        "z": "d85313a8.b3b8e",
        "name": "FC 1 - Coil Registers",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar data = msg.payload.replace(/\\[/g, \"\").split(',')\n\n//Influx-DB - Local\n\nvar msg1 = {};\n\n    msg1.payload = [\n    {\n        measurement: \"MB_Coils_A\",\n        fields: {\n            cycleAbort: data[0] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            cycleOn: data[1] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            lowSteamSupply: data[2] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            lowAirSupply: data[3] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            gasketLowPressure: data[4] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            lowWaterSupply: data[5] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            lowSteriTemp: data[6] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            cycleOverTemp: data[7] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            powerInterrupt: data[8] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            generatorFault: data[9] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            doorFault: data[10] == \"true\" ? 1 : 0//.replace(/\\D/g,'')), //removes non numerical characters\n\n        },\n        tags:{\n            System: \"Modbus\",\n        }\n    }];\n    \n//Influx-V2 - Cloud\n    \nvar msg2 = {};\n\nstructureObject();\n\nreturn [[msg1], [msg2]];\n        \nfunction structureObject() {\n\tmsg2.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"MB_Coils\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tcycleAbort: data[0] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                cycleOn: data[1] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                lowSteamSupply: data[2] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                lowAirSupply: data[3] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                gasketLowPressure: data[4] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                lowWaterSupply: data[5] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                lowSteriTemp: data[6] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                cycleOverTemp: data[7] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                powerInterrupt: data[8] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                generatorFault: data[9] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                doorFault: data[10] == \"true\" ? 1 : 0//.replace(/\\D/g,'')), //removes non numerical characters\n\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 220,
        "wires": [
            [
                "81e00057.63774"
            ],
            [
                "d1d8917e.c0d29"
            ]
        ]
    },
    {
        "id": "97b7a2ec.dd32c",
        "type": "function",
        "z": "d85313a8.b3b8e",
        "name": "FC 3 - Holding Registers",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar data = msg.payload.replace(/\\[/g, \"\").split(',')\n\n//Influx-DB - Local\n\nvar msg1 = {};\n\n    msg1.payload = [\n    {\n        measurement: \"MB_HoldingReg_A\",\n        fields: {\n            cycleWorkingTemp: parseFloat(data[0]),//.replace(/\\D/g,'')), //removes non numerical characters\n            cycleWorkingPressure: parseFloat(data[1]),//.replace(/\\D/g,'')), //removes non numerical characters\n            chilledWaterFlow: parseFloat(data[2]),//.replace(/\\D/g,'')), //removes non numerical characters\n            chilledWaterTemp: parseFloat(data[3])//.replace(/\\D/g,'')), //removes non numerical characters\n\n        },\n        tags:{\n            System: \"Modbus\",\n        }\n    }];\n    \n//Influx-V2 - Cloud\n    \nvar msg2 = {};\n\nstructureObject();\n\nreturn [[msg1], [msg2]];\n        \nfunction structureObject() {\n\tmsg2.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"MB_HoldingReg\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tcycleWorkingTemp: parseFloat(data[0]),//.replace(/\\D/g,'')), //removes non numerical characters\n                cycleWorkingPressure: parseFloat(data[1]),//.replace(/\\D/g,'')), //removes non numerical characters\n                chilledWaterFlow: parseFloat(data[2]),//.replace(/\\D/g,'')), //removes non numerical characters\n                chilledWaterTemp: parseFloat(data[3])//.replace(/\\D/g,'')), //removes non numerical characters\n\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 280,
        "wires": [
            [
                "81e00057.63774"
            ],
            [
                "d1d8917e.c0d29"
            ]
        ]
    },
    {
        "id": "15db9c49.100a94",
        "type": "json",
        "z": "d85313a8.b3b8e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 430,
        "y": 220,
        "wires": [
            [
                "a67ed57a.f15058"
            ]
        ]
    },
    {
        "id": "7b4a6ff2.d0d65",
        "type": "json",
        "z": "d85313a8.b3b8e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 430,
        "y": 280,
        "wires": [
            [
                "97b7a2ec.dd32c"
            ]
        ]
    },
    {
        "id": "d1d8917e.c0d29",
        "type": "link out",
        "z": "d85313a8.b3b8e",
        "name": "",
        "links": [
            "96dff132.a5bc8"
        ],
        "x": 1015,
        "y": 320,
        "wires": []
    },
    {
        "id": "81e00057.63774",
        "type": "link out",
        "z": "d85313a8.b3b8e",
        "name": "",
        "links": [
            "99efd2a3.7113"
        ],
        "x": 1015,
        "y": 280,
        "wires": []
    },
    {
        "id": "4ff84240.31fe0c",
        "type": "comment",
        "z": "d85313a8.b3b8e",
        "name": "Local MODBUS Server - eth0 - 192.168.1.222",
        "info": "",
        "x": 310,
        "y": 40,
        "wires": []
    },
    {
        "id": "c1c0201f.ee4ab",
        "type": "modbus-write",
        "z": "d85313a8.b3b8e",
        "name": "",
        "showStatusActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "MHoldingRegisters",
        "adr": "5",
        "quantity": "1",
        "server": "d508e07e.f4bc",
        "emptyMsgOnFail": false,
        "keepMsgProperties": false,
        "x": 460,
        "y": 520,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "a2f19c59.f081",
        "type": "inject",
        "z": "d85313a8.b3b8e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "2",
        "payloadType": "num",
        "x": 200,
        "y": 520,
        "wires": [
            [
                "c1c0201f.ee4ab"
            ]
        ]
    },
    {
        "id": "88c4ffd8.621f4",
        "type": "modbus-read",
        "z": "d85313a8.b3b8e",
        "name": "SESS Modbus 2 FC 3",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "HoldingRegister",
        "adr": "100",
        "quantity": "5",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": true,
        "startDelayTime": "10",
        "server": "d508e07e.f4bc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 260,
        "y": 440,
        "wires": [
            [
                "9427c01.ea4ac4"
            ],
            []
        ]
    },
    {
        "id": "e875cf84.98fc9",
        "type": "modbus-read",
        "z": "d85313a8.b3b8e",
        "name": "SESS Modbus 2 FC 1",
        "topic": "",
        "showStatusActivities": false,
        "logIOActivities": false,
        "showErrors": false,
        "unitid": "",
        "dataType": "Coil",
        "adr": "100",
        "quantity": "15",
        "rate": "10",
        "rateUnit": "s",
        "delayOnStart": true,
        "startDelayTime": "10",
        "server": "d508e07e.f4bc",
        "useIOFile": false,
        "ioFile": "",
        "useIOForPayload": false,
        "emptyMsgOnFail": false,
        "x": 260,
        "y": 380,
        "wires": [
            [
                "e8e0207c.24f7a"
            ],
            []
        ]
    },
    {
        "id": "373d3eaf.e13ff2",
        "type": "function",
        "z": "d85313a8.b3b8e",
        "name": "FC 1 - Coil Registers",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar data = msg.payload.replace(/\\[/g, \"\").split(',')\n\n//Influx-DB - Local\n\nvar msg1 = {};\n\n    msg1.payload = [\n    {\n        measurement: \"MB_Coils_B\",\n        fields: {\n            cycleAbort2: data[0] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            cycleOn2: data[1] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            lowSteamSupply2: data[2] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            lowAirSupply2: data[3] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            gasketLowPressure2: data[4] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            lowWaterSupply2: data[5] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            lowSteriTemp2: data[6] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            cycleOverTemp2: data[7] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            powerInterrupt2: data[8] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            generatorFault2: data[9] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n            doorFault2: data[10] == \"true\" ? 1 : 0//.replace(/\\D/g,'')), //removes non numerical characters\n\n        },\n        tags:{\n            System: \"Modbus\",\n        }\n    }];\n    \n//Influx-V2 - Cloud\n    \nvar msg2 = {};\n\nstructureObject();\n\nreturn [[msg1], [msg2]];\n        \nfunction structureObject() {\n\tmsg2.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"MB_Coils\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tcycleAbort2: data[0] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                cycleOn2: data[1] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                lowSteamSupply2: data[2] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                lowAirSupply2: data[3] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                gasketLowPressure2: data[4] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                lowWaterSupply2: data[5] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                lowSteriTemp2: data[6] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                cycleOverTemp2: data[7] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                powerInterrupt2: data[8] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                generatorFault2: data[9] == \"true\" ? 1 : 0,//.replace(/\\D/g,'')), //removes non numerical characters\n                doorFault2: data[10] == \"true\" ? 1 : 0//.replace(/\\D/g,'')), //removes non numerical characters\n\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 380,
        "wires": [
            [
                "a8faa903.014e08"
            ],
            [
                "20ede583.7ea46a"
            ]
        ]
    },
    {
        "id": "e1db9e7d.44265",
        "type": "function",
        "z": "d85313a8.b3b8e",
        "name": "FC 3 - Holding Registers",
        "func": "let siteID = global.get(\"siteID\") || \"Site_IDxxx\"\nvar data = msg.payload.replace(/\\[/g, \"\").split(',')\n\n//Influx-DB - Local\n\nvar msg1 = {};\n\n    msg1.payload = [\n    {\n        measurement: \"MB_HoldingReg_B\",\n        fields: {\n            cycleWorkingTemp: parseFloat(data[0]),//.replace(/\\D/g,'')), //removes non numerical characters\n            cycleWorkingPressure: parseFloat(data[1]),//.replace(/\\D/g,'')), //removes non numerical characters\n            chilledWaterFlow: parseFloat(data[2]),//.replace(/\\D/g,'')), //removes non numerical characters\n            chilledWaterTemp: parseFloat(data[3])//.replace(/\\D/g,'')), //removes non numerical characters\n\n        },\n        tags:{\n            System: \"Modbus\",\n        }\n    }];\n    \n//Influx-V2 - Cloud\n    \nvar msg2 = {};\n\nstructureObject();\n\nreturn [[msg1], [msg2]];\n        \nfunction structureObject() {\n\tmsg2.payload = {\n\t\t// You bucket\n\t\t// Optional (it can be defined in the node credentials settings)\n\t\tbucket: 'SESS BS ID001',\n\n\t\t// Precision of timestamp\n\t\t// Optional\n\t\t// Can be `ns` (nanoseconds),\n\t\t//        `us` (microseconds),\n\t\t//        `ms` (milliseconds),\n\t\t//        `s` (seconds).\n\t\t// The default is `ns`\n\t\tprecision: 'ms',\n\n\t\t// Data to send to InfluxDB\n\t\t// Can be an array of objects or only one object\n\t\tdata: [\n\t\t{\n\t\t\tmeasurement: siteID,\n\n\t\t\ttags:{\n\t\t\t\tSystem: \"MB_HoldingReg\"\n\t\t\t},\n\n\t\t\tfields: {\n\t\t\t\tcycleWorkingTemp: parseFloat(data[0]),//.replace(/\\D/g,'')), //removes non numerical characters\n                cycleWorkingPressure: parseFloat(data[1]),//.replace(/\\D/g,'')), //removes non numerical characters\n                chilledWaterFlow: parseFloat(data[2]),//.replace(/\\D/g,'')), //removes non numerical characters\n                chilledWaterTemp: parseFloat(data[3])//.replace(/\\D/g,'')), //removes non numerical characters\n\n\t\t\t},\n\n\t\t\ttimestamp: Date.now()\n\t\t},\n\t\t]\n\t};\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 440,
        "wires": [
            [
                "a8faa903.014e08"
            ],
            [
                "20ede583.7ea46a"
            ]
        ]
    },
    {
        "id": "e8e0207c.24f7a",
        "type": "json",
        "z": "d85313a8.b3b8e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 430,
        "y": 380,
        "wires": [
            [
                "373d3eaf.e13ff2"
            ]
        ]
    },
    {
        "id": "9427c01.ea4ac4",
        "type": "json",
        "z": "d85313a8.b3b8e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 430,
        "y": 440,
        "wires": [
            [
                "e1db9e7d.44265"
            ]
        ]
    },
    {
        "id": "20ede583.7ea46a",
        "type": "link out",
        "z": "d85313a8.b3b8e",
        "name": "",
        "links": [
            "96dff132.a5bc8"
        ],
        "x": 1015,
        "y": 440,
        "wires": []
    },
    {
        "id": "a8faa903.014e08",
        "type": "link out",
        "z": "d85313a8.b3b8e",
        "name": "",
        "links": [
            "99efd2a3.7113"
        ],
        "x": 1015,
        "y": 380,
        "wires": []
    },
    {
        "id": "c0105890.4e9008",
        "type": "function",
        "z": "d85313a8.b3b8e",
        "name": "",
        "func": "const k = 65535;\nvar val = 65533;\nif (val > 32767) {\n    var d = (val ^ k) *-1;\n}\nmsg.payload = d;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "x": 470,
        "y": 660,
        "wires": [
            [
                "9bf001a.6debc"
            ]
        ]
    },
    {
        "id": "c5148f5c.37808",
        "type": "inject",
        "z": "d85313a8.b3b8e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 260,
        "y": 660,
        "wires": [
            [
                "c0105890.4e9008"
            ]
        ]
    },
    {
        "id": "9bf001a.6debc",
        "type": "debug",
        "z": "d85313a8.b3b8e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 760,
        "y": 660,
        "wires": []
    }
]